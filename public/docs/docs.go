// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "Business Source License 1.1",
            "url": "https://mariadb.com/bsl11/"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/stores/{storeName}/eth1": {
            "get": {
                "description": "List of addresses of stored Ethereum Accounts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ethereum Account"
                ],
                "summary": "List Ethereum Accounts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store Identifier",
                        "name": "storeName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ethereum Account list",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/types.Eth1AccountResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/stores/{storeName}/eth1/ec-recover": {
            "post": {
                "description": "Recover Ethereum transaction sender",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Ethereum"
                ],
                "summary": "EC Recover",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store Identifier",
                        "name": "storeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ethereum address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Ethereum recover request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.ECRecoverRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Recovered sender address",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/stores/{storeName}/eth1/verify-signature": {
            "post": {
                "description": "Verify signature of an Ethereum signature",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Ethereum"
                ],
                "summary": "Verify signature",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store Identifier",
                        "name": "storeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ethereum address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Ethereum signature verify request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.VerifyEth1SignatureRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful verification"
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Cannot verify signature",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/stores/{storeName}/eth1/verify-typed-data-signature": {
            "post": {
                "description": "Verify signature of an ethereum type data signing",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Ethereum"
                ],
                "summary": "Verify typed data signature",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store Identifier",
                        "name": "storeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ethereum address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Ethereum signature verify request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.VerifyTypedDataRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful verification"
                    },
                    "422": {
                        "description": "Cannot verify signature",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/stores/{storeName}/eth1/{address}": {
            "get": {
                "description": "Fetch Ethereum Account data by its address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ethereum Account"
                ],
                "summary": "Get Ethereum Account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store Identifier",
                        "name": "storeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ethereum address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ethereum Account data",
                        "schema": {
                            "$ref": "#/definitions/types.Eth1AccountResponse"
                        }
                    },
                    "404": {
                        "description": "Store/Account not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Soft delete Ethereum Account, can be recovered",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Ethereum Account"
                ],
                "summary": "Delete Ethereum Account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store Identifier",
                        "name": "storeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ethereum address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Store/Account not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update Ethereum Account metadata",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ethereum Account"
                ],
                "summary": "Update Ethereum Account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store Identifier",
                        "name": "storeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ethereum address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Ethereum Account metadata request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateEth1AccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update Ethereum Account",
                        "schema": {
                            "$ref": "#/definitions/types.Eth1AccountResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Store/Account not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/stores/{storeName}/eth1/{address}/destroy": {
            "delete": {
                "description": "Hard delete Ethereum Account, cannot be recovered",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Ethereum Account"
                ],
                "summary": "Destroy Ethereum Account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store Identifier",
                        "name": "storeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ethereum address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Destroyed successfully"
                    },
                    "404": {
                        "description": "Store/Account not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/stores/{storeName}/eth1/{address}/restore": {
            "put": {
                "description": "Recover a soft-deleted Ethereum Account",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Ethereum Account"
                ],
                "summary": "Restore Ethereum Account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store Identifier",
                        "name": "storeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ethereum address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Restored successfully"
                    },
                    "404": {
                        "description": "Store/Account not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/stores/{storeName}/eth1/{address}/sign": {
            "post": {
                "description": "Sign random hexadecimal payload using selected Ethereum Account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Ethereum Account"
                ],
                "summary": "Sign payload with Ethereum Account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store Identifier",
                        "name": "storeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ethereum address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Sign payload request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.SignHexPayloadRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Signed payload signature",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Store/Account not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/stores/{storeName}/eth1/{address}/sign-data": {
            "post": {
                "description": "Sign Keccak256 payload using selected Ethereum Account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Ethereum Account"
                ],
                "summary": "Sign hashed payload with Ethereum Account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store Identifier",
                        "name": "storeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ethereum address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Sign payload request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.SignHexPayloadRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Signed payload signature",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Store/Account not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/stores/{storeName}/eth1/{address}/sign-eea-transaction": {
            "post": {
                "description": "Sign EEA transaction using selected Ethereum Account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Ethereum Account"
                ],
                "summary": "Sign EEA transaction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store Identifier",
                        "name": "storeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ethereum address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Sign EEA transaction request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.SignEEATransactionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Signed EEA transaction signature",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Store/Account not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/stores/{storeName}/eth1/{address}/sign-quorum-private-transaction": {
            "post": {
                "description": "Sign Quorum private transaction using selected Ethereum Account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Ethereum Account"
                ],
                "summary": "Sign Quorum private transaction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store Identifier",
                        "name": "storeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ethereum address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Sign Quorum transaction request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.SignQuorumPrivateTransactionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Signed Quorum private transaction signature",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Store/Account not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/stores/{storeName}/eth1/{address}/sign-transaction": {
            "post": {
                "description": "Sign Ethereum transaction using selected Ethereum Account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Ethereum Account"
                ],
                "summary": "Sign Ethereum transaction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store Identifier",
                        "name": "storeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ethereum address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Sign Ethereum transaction request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.SignETHTransactionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Signed transaction signature",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Store/Account not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/stores/{storeName}/eth1/{address}/sign-typed-data": {
            "post": {
                "description": "Sign Typed Data, following the EIP-712 Standard, using selected Ethereum Account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Ethereum Account"
                ],
                "summary": "Sign Typed Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store Identifier",
                        "name": "storeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ethereum address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Sign typed data request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.SignTypedDataRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Signed typed data signature",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Store/Account not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/stores/{storeName}/eth1/{id}": {
            "post": {
                "description": "Creates a new ECDSA Secp256k1 key representing an Ethereum Account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ethereum Account"
                ],
                "summary": "Create Ethereum Account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Store Identifier",
                        "name": "storeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Create Ethereum Account request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateEth1AccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Created Ethereum Account",
                        "schema": {
                            "$ref": "#/definitions/types.Eth1AccountResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Store not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/stores/{storeName}/eth1/{id}/import": {
            "post": {
                "description": "Import an ECDSA Secp256k1 key representing an Ethereum account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ethereum Account"
                ],
                "summary": "Import Ethereum Account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Store Identifier",
                        "name": "storeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Create Ethereum Account request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.ImportEth1AccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Created Ethereum Account",
                        "schema": {
                            "$ref": "#/definitions/types.Eth1AccountResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Store not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/stores/{storeName}/keys": {
            "get": {
                "description": "List identifiers of keys store on selected Store",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Keys"
                ],
                "summary": "List Key ids",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store Identifier",
                        "name": "storeName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of key ids",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/types.KeyResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/stores/{storeName}/keys/verify-signature": {
            "post": {
                "description": "Verify if signature data was signed by a specific key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Keys"
                ],
                "summary": "Verify key signature",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store Identifier",
                        "name": "storeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Key identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful verification"
                    },
                    "422": {
                        "description": "Cannot verify signature",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/stores/{storeName}/keys/{id}": {
            "get": {
                "description": "Retrieve key object by identifier",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Keys"
                ],
                "summary": "Get key by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store Identifier",
                        "name": "storeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Key identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Key data",
                        "schema": {
                            "$ref": "#/definitions/types.KeyResponse"
                        }
                    },
                    "404": {
                        "description": "Store/Key not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create Key with a specific Curve and Signing algorithm",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Keys"
                ],
                "summary": "Create key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Key Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Store Identifier",
                        "name": "storeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Create key request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateKeyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Key data",
                        "schema": {
                            "$ref": "#/definitions/types.KeyResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Store not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a Key by ID. The key can be recovered",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Keys"
                ],
                "summary": "Soft-deletes Key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store Identifier",
                        "name": "storeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Key identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Store/Key not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates the tags of a key by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Keys"
                ],
                "summary": "Updates a key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store Identifier",
                        "name": "storeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Key identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Key data",
                        "schema": {
                            "$ref": "#/definitions/types.KeyResponse"
                        }
                    },
                    "404": {
                        "description": "Store/Key not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/stores/{storeName}/keys/{id}/destroy": {
            "delete": {
                "description": "Permanently deletes a Key by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Keys"
                ],
                "summary": "Destroys a Key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store Identifier",
                        "name": "storeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Key identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Destroyed successfully"
                    },
                    "404": {
                        "description": "Store/Key not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/stores/{storeName}/keys/{id}/import": {
            "post": {
                "description": "Import Key with a specific Curve and Signing algorithm",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Keys"
                ],
                "summary": "Import Key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Key Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Store Identifier",
                        "name": "storeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Create key request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.ImportKeyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Key data",
                        "schema": {
                            "$ref": "#/definitions/types.KeyResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Store not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/stores/{storeName}/keys/{id}/restore": {
            "put": {
                "description": "Restores a previously soft-deleted key by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Keys"
                ],
                "summary": "Restores a soft-deleted key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store Identifier",
                        "name": "storeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Key identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Restored successfully"
                    },
                    "404": {
                        "description": "Store/Key not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/stores/{storeName}/keys/{id}/sign": {
            "post": {
                "description": "Sign random payload using a selected key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Keys"
                ],
                "summary": "Sign random payload",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store Identifier",
                        "name": "storeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Key identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Signing request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.SignBase64PayloadRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "signature in base64",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Store/Key not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/stores/{storeName}/secrets": {
            "get": {
                "description": "List of Secret IDs stored in the selected Store",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Secrets"
                ],
                "summary": "List Secrets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store Identifier",
                        "name": "storeName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Secret IDs",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/types.SecretResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Store not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create new Secret on selected Store",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Secrets"
                ],
                "summary": "Create Secret",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Secret Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Store Identifier",
                        "name": "storeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Create Secret request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.SetSecretRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Secret data",
                        "schema": {
                            "$ref": "#/definitions/types.SecretResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Store not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/stores/{storeName}/secrets/{id}": {
            "get": {
                "description": "Retrieve secret information by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Secrets"
                ],
                "summary": "Get secret by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store Identifier",
                        "name": "storeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Secret ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Secret object",
                        "schema": {
                            "$ref": "#/definitions/types.SecretResponse"
                        }
                    },
                    "404": {
                        "description": "Store/Secret not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "IR001"
                },
                "message": {
                    "type": "string",
                    "example": "error message"
                }
            }
        },
        "types.CreateEth1AccountRequest": {
            "type": "object",
            "properties": {
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "types.CreateKeyRequest": {
            "type": "object",
            "required": [
                "curve",
                "id",
                "signingAlgorithm"
            ],
            "properties": {
                "curve": {
                    "type": "string",
                    "example": "secp256k1"
                },
                "id": {
                    "type": "string",
                    "example": "my-key"
                },
                "signingAlgorithm": {
                    "type": "string",
                    "example": "ecdsa"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "types.DomainSeparator": {
            "type": "object",
            "required": [
                "chainID",
                "name",
                "version"
            ],
            "properties": {
                "chainID": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "MyDApp"
                },
                "salt": {
                    "type": "string",
                    "example": "some-random-string"
                },
                "verifyingContract": {
                    "type": "string",
                    "example": "0x905B88EFf8Bda1543d4d6f4aA05afef143D27E18"
                },
                "version": {
                    "type": "string",
                    "example": "v1.0.0"
                }
            }
        },
        "types.ECRecoverRequest": {
            "type": "object",
            "required": [
                "data",
                "signature"
            ],
            "properties": {
                "data": {
                    "type": "string",
                    "example": "0xfeaeee..."
                },
                "signature": {
                    "type": "string",
                    "example": "0x6019a3c8..."
                }
            }
        },
        "types.Eth1AccountResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "example": "0x664895b5fE3ddf049d2Fb508cfA03923859763C6"
                },
                "compressedPublicKey": {
                    "type": "string",
                    "example": "1abae27a0cbfb02945720425d3b80c7e09728534"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "deletedAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "destroyedAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "disabled": {
                    "type": "boolean",
                    "example": false
                },
                "expireAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "id": {
                    "type": "string",
                    "example": "my-key-id"
                },
                "publicKey": {
                    "type": "string",
                    "example": "048e66b3e549818ea2cb354fb70749f6c8de8fa484f7530fc447d5fe80a1c424e4f5ae648d648c980ae7095d1efad87161d83886ca4b6c498ac22a93da5099014a"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                }
            }
        },
        "types.ImportEth1AccountRequest": {
            "type": "object",
            "required": [
                "privateKey"
            ],
            "properties": {
                "privateKey": {
                    "type": "string",
                    "example": "56202652FDFFD802B7252A456DBD8F3ECC0352BBDE76C23B40AFE8AEBD714E2E"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "types.ImportKeyRequest": {
            "type": "object",
            "required": [
                "curve",
                "privateKey",
                "signingAlgorithm"
            ],
            "properties": {
                "curve": {
                    "type": "string",
                    "example": "secp256k1"
                },
                "privateKey": {
                    "type": "string",
                    "example": "BFVSFJhqUh9DQJwcayNtsWdD2..."
                },
                "signingAlgorithm": {
                    "type": "string",
                    "example": "ecdsa"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "types.KeyResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "curve": {
                    "type": "string",
                    "example": "secp256k1"
                },
                "deletedAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "destroyedAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "disabled": {
                    "type": "boolean",
                    "example": false
                },
                "expireAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "id": {
                    "type": "string",
                    "example": "my-key"
                },
                "publicKey": {
                    "type": "string",
                    "example": "BFVSFJhqUh9DQJwcayNtsWdD2..."
                },
                "signingAlgorithm": {
                    "type": "string",
                    "example": "ecdsa"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                }
            }
        },
        "types.SecretResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "deletedAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "destroyedAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "disabled": {
                    "type": "boolean",
                    "example": false
                },
                "expireAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "id": {
                    "type": "string",
                    "example": "my-secret"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "value": {
                    "type": "string",
                    "example": "my-value"
                },
                "version": {
                    "type": "string",
                    "example": "1"
                }
            }
        },
        "types.SetSecretRequest": {
            "type": "object",
            "required": [
                "value"
            ],
            "properties": {
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "value": {
                    "type": "string",
                    "example": "my-value"
                }
            }
        },
        "types.SignBase64PayloadRequest": {
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "type": "string",
                    "example": "BFVSFJhqUh9DQJwcayNtsWdD2..."
                }
            }
        },
        "types.SignEEATransactionRequest": {
            "type": "object",
            "required": [
                "chainID",
                "privateFrom"
            ],
            "properties": {
                "chainID": {
                    "type": "string",
                    "example": "0x1 (mainnet)"
                },
                "data": {
                    "type": "string",
                    "example": "0xfeaeee..."
                },
                "nonce": {
                    "type": "string",
                    "example": "0x1"
                },
                "privacyGroupId": {
                    "type": "string",
                    "example": "A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo="
                },
                "privateFor": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=",
                        "B1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo="
                    ]
                },
                "privateFrom": {
                    "type": "string",
                    "example": "A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo="
                },
                "to": {
                    "type": "string",
                    "example": "0x905B88EFf8Bda1543d4d6f4aA05afef143D27E18"
                }
            }
        },
        "types.SignETHTransactionRequest": {
            "type": "object",
            "required": [
                "chainID",
                "gasLimit",
                "gasPrice"
            ],
            "properties": {
                "chainID": {
                    "type": "string",
                    "example": "0x1 (mainnet)"
                },
                "data": {
                    "type": "string",
                    "example": "0xfeaeee..."
                },
                "gasLimit": {
                    "type": "string",
                    "example": "0x5208"
                },
                "gasPrice": {
                    "type": "string",
                    "example": "0x0"
                },
                "nonce": {
                    "type": "string",
                    "example": "0x1"
                },
                "to": {
                    "type": "string",
                    "example": "0x905B88EFf8Bda1543d4d6f4aA05afef143D27E18"
                },
                "value": {
                    "type": "string",
                    "example": "0xfeaeae"
                }
            }
        },
        "types.SignHexPayloadRequest": {
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "description": "required to be hex value",
                    "type": "string",
                    "example": "0xfeee"
                }
            }
        },
        "types.SignQuorumPrivateTransactionRequest": {
            "type": "object",
            "required": [
                "gasLimit",
                "gasPrice"
            ],
            "properties": {
                "data": {
                    "type": "string",
                    "example": "0xfeaeee..."
                },
                "gasLimit": {
                    "type": "string",
                    "example": "0x5208"
                },
                "gasPrice": {
                    "type": "string",
                    "example": "0x0"
                },
                "nonce": {
                    "type": "string",
                    "example": "0x1"
                },
                "to": {
                    "type": "string",
                    "example": "0x905B88EFf8Bda1543d4d6f4aA05afef143D27E18"
                },
                "value": {
                    "type": "string",
                    "example": "0x1"
                }
            }
        },
        "types.SignTypedDataRequest": {
            "type": "object",
            "required": [
                "domainSeparator",
                "message",
                "messageType",
                "types"
            ],
            "properties": {
                "domainSeparator": {
                    "$ref": "#/definitions/types.DomainSeparator"
                },
                "message": {
                    "type": "object",
                    "additionalProperties": true
                },
                "messageType": {
                    "type": "string",
                    "example": "Mail"
                },
                "types": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/types.Type"
                        }
                    }
                }
            }
        },
        "types.Type": {
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "fieldName"
                },
                "type": {
                    "type": "string",
                    "example": "string"
                }
            }
        },
        "types.UpdateEth1AccountRequest": {
            "type": "object",
            "properties": {
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "types.VerifyEth1SignatureRequest": {
            "type": "object",
            "required": [
                "address",
                "data",
                "signature"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "example": "0x905B88EFf8Bda1543d4d6f4aA05afef143D27E18"
                },
                "data": {
                    "type": "string",
                    "example": "0xfeaeee..."
                },
                "signature": {
                    "type": "string",
                    "example": "0x6019a3c8..."
                }
            }
        },
        "types.VerifyTypedDataRequest": {
            "type": "object",
            "required": [
                "address",
                "data",
                "signature"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "example": "0x905B88EFf8Bda1543d4d6f4aA05afef143D27E18"
                },
                "data": {
                    "type": "string"
                },
                "signature": {
                    "type": "string",
                    "example": "0x6019a3c8..."
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "BasicAuth": {
            "type": "basic"
        },
        "OAuth2Application": {
            "type": "oauth2",
            "flow": "application",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": " Grants read and write access to administrative information",
                "write": " Grants write access"
            }
        }
    },
    "x-extension-openapi": {
        "example": "value on a json format"
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.1",
	Host:        "https://consensysquorum.github.io/quorum-key-manager",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "Quorum Key Manager API",
	Description: "Quorum Key Manager API server documentation.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
