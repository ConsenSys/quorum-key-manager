// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	jsonrpc "github.com/consensys/quorum-key-manager/pkg/jsonrpc"
	types "github.com/consensys/quorum-key-manager/src/stores/api/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSecretsClient is a mock of SecretsClient interface
type MockSecretsClient struct {
	ctrl     *gomock.Controller
	recorder *MockSecretsClientMockRecorder
}

// MockSecretsClientMockRecorder is the mock recorder for MockSecretsClient
type MockSecretsClientMockRecorder struct {
	mock *MockSecretsClient
}

// NewMockSecretsClient creates a new mock instance
func NewMockSecretsClient(ctrl *gomock.Controller) *MockSecretsClient {
	mock := &MockSecretsClient{ctrl: ctrl}
	mock.recorder = &MockSecretsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSecretsClient) EXPECT() *MockSecretsClientMockRecorder {
	return m.recorder
}

// SetSecret mocks base method
func (m *MockSecretsClient) SetSecret(ctx context.Context, storeName, id string, request *types.SetSecretRequest) (*types.SecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSecret", ctx, storeName, id, request)
	ret0, _ := ret[0].(*types.SecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSecret indicates an expected call of SetSecret
func (mr *MockSecretsClientMockRecorder) SetSecret(ctx, storeName, id, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSecret", reflect.TypeOf((*MockSecretsClient)(nil).SetSecret), ctx, storeName, id, request)
}

// GetSecret mocks base method
func (m *MockSecretsClient) GetSecret(ctx context.Context, storeName, id, version string) (*types.SecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", ctx, storeName, id, version)
	ret0, _ := ret[0].(*types.SecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret
func (mr *MockSecretsClientMockRecorder) GetSecret(ctx, storeName, id, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockSecretsClient)(nil).GetSecret), ctx, storeName, id, version)
}

// GetDeletedSecret mocks base method
func (m *MockSecretsClient) GetDeletedSecret(ctx context.Context, storeName, id string) (*types.SecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeletedSecret", ctx, storeName, id)
	ret0, _ := ret[0].(*types.SecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeletedSecret indicates an expected call of GetDeletedSecret
func (mr *MockSecretsClientMockRecorder) GetDeletedSecret(ctx, storeName, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeletedSecret", reflect.TypeOf((*MockSecretsClient)(nil).GetDeletedSecret), ctx, storeName, id)
}

// DeleteSecret mocks base method
func (m *MockSecretsClient) DeleteSecret(ctx context.Context, storeName, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", ctx, storeName, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret
func (mr *MockSecretsClientMockRecorder) DeleteSecret(ctx, storeName, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockSecretsClient)(nil).DeleteSecret), ctx, storeName, id)
}

// RestoreSecret mocks base method
func (m *MockSecretsClient) RestoreSecret(ctx context.Context, storeName, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreSecret", ctx, storeName, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreSecret indicates an expected call of RestoreSecret
func (mr *MockSecretsClientMockRecorder) RestoreSecret(ctx, storeName, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreSecret", reflect.TypeOf((*MockSecretsClient)(nil).RestoreSecret), ctx, storeName, id)
}

// DestroySecret mocks base method
func (m *MockSecretsClient) DestroySecret(ctx context.Context, storeName, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroySecret", ctx, storeName, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroySecret indicates an expected call of DestroySecret
func (mr *MockSecretsClientMockRecorder) DestroySecret(ctx, storeName, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroySecret", reflect.TypeOf((*MockSecretsClient)(nil).DestroySecret), ctx, storeName, id)
}

// ListSecrets mocks base method
func (m *MockSecretsClient) ListSecrets(ctx context.Context, storeName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecrets", ctx, storeName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecrets indicates an expected call of ListSecrets
func (mr *MockSecretsClientMockRecorder) ListSecrets(ctx, storeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecrets", reflect.TypeOf((*MockSecretsClient)(nil).ListSecrets), ctx, storeName)
}

// ListDeletedSecrets mocks base method
func (m *MockSecretsClient) ListDeletedSecrets(ctx context.Context, storeName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeletedSecrets", ctx, storeName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeletedSecrets indicates an expected call of ListDeletedSecrets
func (mr *MockSecretsClientMockRecorder) ListDeletedSecrets(ctx, storeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeletedSecrets", reflect.TypeOf((*MockSecretsClient)(nil).ListDeletedSecrets), ctx, storeName)
}

// MockKeysClient is a mock of KeysClient interface
type MockKeysClient struct {
	ctrl     *gomock.Controller
	recorder *MockKeysClientMockRecorder
}

// MockKeysClientMockRecorder is the mock recorder for MockKeysClient
type MockKeysClientMockRecorder struct {
	mock *MockKeysClient
}

// NewMockKeysClient creates a new mock instance
func NewMockKeysClient(ctrl *gomock.Controller) *MockKeysClient {
	mock := &MockKeysClient{ctrl: ctrl}
	mock.recorder = &MockKeysClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeysClient) EXPECT() *MockKeysClientMockRecorder {
	return m.recorder
}

// CreateKey mocks base method
func (m *MockKeysClient) CreateKey(ctx context.Context, storeName, id string, request *types.CreateKeyRequest) (*types.KeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKey", ctx, storeName, id, request)
	ret0, _ := ret[0].(*types.KeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKey indicates an expected call of CreateKey
func (mr *MockKeysClientMockRecorder) CreateKey(ctx, storeName, id, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKey", reflect.TypeOf((*MockKeysClient)(nil).CreateKey), ctx, storeName, id, request)
}

// ImportKey mocks base method
func (m *MockKeysClient) ImportKey(ctx context.Context, storeName, id string, request *types.ImportKeyRequest) (*types.KeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportKey", ctx, storeName, id, request)
	ret0, _ := ret[0].(*types.KeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportKey indicates an expected call of ImportKey
func (mr *MockKeysClientMockRecorder) ImportKey(ctx, storeName, id, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportKey", reflect.TypeOf((*MockKeysClient)(nil).ImportKey), ctx, storeName, id, request)
}

// SignKey mocks base method
func (m *MockKeysClient) SignKey(ctx context.Context, storeName, id string, request *types.SignBase64PayloadRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignKey", ctx, storeName, id, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignKey indicates an expected call of SignKey
func (mr *MockKeysClientMockRecorder) SignKey(ctx, storeName, id, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignKey", reflect.TypeOf((*MockKeysClient)(nil).SignKey), ctx, storeName, id, request)
}

// VerifyKeySignature mocks base method
func (m *MockKeysClient) VerifyKeySignature(ctx context.Context, storeName string, request *types.VerifyKeySignatureRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyKeySignature", ctx, storeName, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyKeySignature indicates an expected call of VerifyKeySignature
func (mr *MockKeysClientMockRecorder) VerifyKeySignature(ctx, storeName, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyKeySignature", reflect.TypeOf((*MockKeysClient)(nil).VerifyKeySignature), ctx, storeName, request)
}

// GetKey mocks base method
func (m *MockKeysClient) GetKey(ctx context.Context, storeName, id string) (*types.KeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey", ctx, storeName, id)
	ret0, _ := ret[0].(*types.KeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKey indicates an expected call of GetKey
func (mr *MockKeysClientMockRecorder) GetKey(ctx, storeName, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockKeysClient)(nil).GetKey), ctx, storeName, id)
}

// ListKeys mocks base method
func (m *MockKeysClient) ListKeys(ctx context.Context, storeName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeys", ctx, storeName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeys indicates an expected call of ListKeys
func (mr *MockKeysClientMockRecorder) ListKeys(ctx, storeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeys", reflect.TypeOf((*MockKeysClient)(nil).ListKeys), ctx, storeName)
}

// DeleteKey mocks base method
func (m *MockKeysClient) DeleteKey(ctx context.Context, storeName, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKey", ctx, storeName, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKey indicates an expected call of DeleteKey
func (mr *MockKeysClientMockRecorder) DeleteKey(ctx, storeName, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKey", reflect.TypeOf((*MockKeysClient)(nil).DeleteKey), ctx, storeName, id)
}

// GetDeletedKey mocks base method
func (m *MockKeysClient) GetDeletedKey(ctx context.Context, storeName, id string) (*types.KeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeletedKey", ctx, storeName, id)
	ret0, _ := ret[0].(*types.KeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeletedKey indicates an expected call of GetDeletedKey
func (mr *MockKeysClientMockRecorder) GetDeletedKey(ctx, storeName, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeletedKey", reflect.TypeOf((*MockKeysClient)(nil).GetDeletedKey), ctx, storeName, id)
}

// ListDeletedKeys mocks base method
func (m *MockKeysClient) ListDeletedKeys(ctx context.Context, storeName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeletedKeys", ctx, storeName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeletedKeys indicates an expected call of ListDeletedKeys
func (mr *MockKeysClientMockRecorder) ListDeletedKeys(ctx, storeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeletedKeys", reflect.TypeOf((*MockKeysClient)(nil).ListDeletedKeys), ctx, storeName)
}

// RestoreKey mocks base method
func (m *MockKeysClient) RestoreKey(ctx context.Context, storeName, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreKey", ctx, storeName, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreKey indicates an expected call of RestoreKey
func (mr *MockKeysClientMockRecorder) RestoreKey(ctx, storeName, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreKey", reflect.TypeOf((*MockKeysClient)(nil).RestoreKey), ctx, storeName, id)
}

// DestroyKey mocks base method
func (m *MockKeysClient) DestroyKey(ctx context.Context, storeName, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyKey", ctx, storeName, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyKey indicates an expected call of DestroyKey
func (mr *MockKeysClientMockRecorder) DestroyKey(ctx, storeName, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyKey", reflect.TypeOf((*MockKeysClient)(nil).DestroyKey), ctx, storeName, id)
}

// MockEthClient is a mock of EthClient interface
type MockEthClient struct {
	ctrl     *gomock.Controller
	recorder *MockEthClientMockRecorder
}

// MockEthClientMockRecorder is the mock recorder for MockEthClient
type MockEthClientMockRecorder struct {
	mock *MockEthClient
}

// NewMockEthClient creates a new mock instance
func NewMockEthClient(ctrl *gomock.Controller) *MockEthClient {
	mock := &MockEthClient{ctrl: ctrl}
	mock.recorder = &MockEthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEthClient) EXPECT() *MockEthClientMockRecorder {
	return m.recorder
}

// CreateEthAccount mocks base method
func (m *MockEthClient) CreateEthAccount(ctx context.Context, storeName string, request *types.CreateEthAccountRequest) (*types.EthAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEthAccount", ctx, storeName, request)
	ret0, _ := ret[0].(*types.EthAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEthAccount indicates an expected call of CreateEthAccount
func (mr *MockEthClientMockRecorder) CreateEthAccount(ctx, storeName, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEthAccount", reflect.TypeOf((*MockEthClient)(nil).CreateEthAccount), ctx, storeName, request)
}

// ImportEthAccount mocks base method
func (m *MockEthClient) ImportEthAccount(ctx context.Context, storeName string, request *types.ImportEthAccountRequest) (*types.EthAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportEthAccount", ctx, storeName, request)
	ret0, _ := ret[0].(*types.EthAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportEthAccount indicates an expected call of ImportEthAccount
func (mr *MockEthClientMockRecorder) ImportEthAccount(ctx, storeName, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportEthAccount", reflect.TypeOf((*MockEthClient)(nil).ImportEthAccount), ctx, storeName, request)
}

// UpdateEthAccount mocks base method
func (m *MockEthClient) UpdateEthAccount(ctx context.Context, storeName, address string, request *types.UpdateEthAccountRequest) (*types.EthAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEthAccount", ctx, storeName, address, request)
	ret0, _ := ret[0].(*types.EthAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEthAccount indicates an expected call of UpdateEthAccount
func (mr *MockEthClientMockRecorder) UpdateEthAccount(ctx, storeName, address, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEthAccount", reflect.TypeOf((*MockEthClient)(nil).UpdateEthAccount), ctx, storeName, address, request)
}

// SignMessage mocks base method
func (m *MockEthClient) SignMessage(ctx context.Context, storeName, account string, request *types.SignMessageRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignMessage", ctx, storeName, account, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignMessage indicates an expected call of SignMessage
func (mr *MockEthClientMockRecorder) SignMessage(ctx, storeName, account, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignMessage", reflect.TypeOf((*MockEthClient)(nil).SignMessage), ctx, storeName, account, request)
}

// SignTypedData mocks base method
func (m *MockEthClient) SignTypedData(ctx context.Context, storeName, address string, request *types.SignTypedDataRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignTypedData", ctx, storeName, address, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignTypedData indicates an expected call of SignTypedData
func (mr *MockEthClientMockRecorder) SignTypedData(ctx, storeName, address, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignTypedData", reflect.TypeOf((*MockEthClient)(nil).SignTypedData), ctx, storeName, address, request)
}

// SignTransaction mocks base method
func (m *MockEthClient) SignTransaction(ctx context.Context, storeName, address string, request *types.SignETHTransactionRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignTransaction", ctx, storeName, address, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignTransaction indicates an expected call of SignTransaction
func (mr *MockEthClientMockRecorder) SignTransaction(ctx, storeName, address, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignTransaction", reflect.TypeOf((*MockEthClient)(nil).SignTransaction), ctx, storeName, address, request)
}

// SignQuorumPrivateTransaction mocks base method
func (m *MockEthClient) SignQuorumPrivateTransaction(ctx context.Context, storeName, address string, request *types.SignQuorumPrivateTransactionRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignQuorumPrivateTransaction", ctx, storeName, address, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignQuorumPrivateTransaction indicates an expected call of SignQuorumPrivateTransaction
func (mr *MockEthClientMockRecorder) SignQuorumPrivateTransaction(ctx, storeName, address, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignQuorumPrivateTransaction", reflect.TypeOf((*MockEthClient)(nil).SignQuorumPrivateTransaction), ctx, storeName, address, request)
}

// SignEEATransaction mocks base method
func (m *MockEthClient) SignEEATransaction(ctx context.Context, storeName, address string, request *types.SignEEATransactionRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignEEATransaction", ctx, storeName, address, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignEEATransaction indicates an expected call of SignEEATransaction
func (mr *MockEthClientMockRecorder) SignEEATransaction(ctx, storeName, address, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignEEATransaction", reflect.TypeOf((*MockEthClient)(nil).SignEEATransaction), ctx, storeName, address, request)
}

// GetEthAccount mocks base method
func (m *MockEthClient) GetEthAccount(ctx context.Context, storeName, address string) (*types.EthAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEthAccount", ctx, storeName, address)
	ret0, _ := ret[0].(*types.EthAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEthAccount indicates an expected call of GetEthAccount
func (mr *MockEthClientMockRecorder) GetEthAccount(ctx, storeName, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEthAccount", reflect.TypeOf((*MockEthClient)(nil).GetEthAccount), ctx, storeName, address)
}

// ListEthAccounts mocks base method
func (m *MockEthClient) ListEthAccounts(ctx context.Context, storeName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEthAccounts", ctx, storeName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEthAccounts indicates an expected call of ListEthAccounts
func (mr *MockEthClientMockRecorder) ListEthAccounts(ctx, storeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEthAccounts", reflect.TypeOf((*MockEthClient)(nil).ListEthAccounts), ctx, storeName)
}

// DeleteEthAccount mocks base method
func (m *MockEthClient) DeleteEthAccount(ctx context.Context, storeName, address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEthAccount", ctx, storeName, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEthAccount indicates an expected call of DeleteEthAccount
func (mr *MockEthClientMockRecorder) DeleteEthAccount(ctx, storeName, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEthAccount", reflect.TypeOf((*MockEthClient)(nil).DeleteEthAccount), ctx, storeName, address)
}

// DestroyEthAccount mocks base method
func (m *MockEthClient) DestroyEthAccount(ctx context.Context, storeName, address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyEthAccount", ctx, storeName, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyEthAccount indicates an expected call of DestroyEthAccount
func (mr *MockEthClientMockRecorder) DestroyEthAccount(ctx, storeName, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyEthAccount", reflect.TypeOf((*MockEthClient)(nil).DestroyEthAccount), ctx, storeName, address)
}

// RestoreEthAccount mocks base method
func (m *MockEthClient) RestoreEthAccount(ctx context.Context, storeName, address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreEthAccount", ctx, storeName, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreEthAccount indicates an expected call of RestoreEthAccount
func (mr *MockEthClientMockRecorder) RestoreEthAccount(ctx, storeName, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreEthAccount", reflect.TypeOf((*MockEthClient)(nil).RestoreEthAccount), ctx, storeName, address)
}

// ECRecover mocks base method
func (m *MockEthClient) ECRecover(ctx context.Context, storeName string, request *types.ECRecoverRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ECRecover", ctx, storeName, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ECRecover indicates an expected call of ECRecover
func (mr *MockEthClientMockRecorder) ECRecover(ctx, storeName, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ECRecover", reflect.TypeOf((*MockEthClient)(nil).ECRecover), ctx, storeName, request)
}

// Verify mocks base method
func (m *MockEthClient) Verify(ctx context.Context, storeName string, request *types.VerifyRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ctx, storeName, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify
func (mr *MockEthClientMockRecorder) Verify(ctx, storeName, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockEthClient)(nil).Verify), ctx, storeName, request)
}

// VerifyMessage mocks base method
func (m *MockEthClient) VerifyMessage(ctx context.Context, storeName string, request *types.VerifyRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyMessage", ctx, storeName, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyMessage indicates an expected call of VerifyMessage
func (mr *MockEthClientMockRecorder) VerifyMessage(ctx, storeName, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyMessage", reflect.TypeOf((*MockEthClient)(nil).VerifyMessage), ctx, storeName, request)
}

// VerifyTypedData mocks base method
func (m *MockEthClient) VerifyTypedData(ctx context.Context, storeName string, request *types.VerifyTypedDataRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyTypedData", ctx, storeName, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyTypedData indicates an expected call of VerifyTypedData
func (mr *MockEthClientMockRecorder) VerifyTypedData(ctx, storeName, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyTypedData", reflect.TypeOf((*MockEthClient)(nil).VerifyTypedData), ctx, storeName, request)
}

// MockJSONRPC is a mock of JSONRPC interface
type MockJSONRPC struct {
	ctrl     *gomock.Controller
	recorder *MockJSONRPCMockRecorder
}

// MockJSONRPCMockRecorder is the mock recorder for MockJSONRPC
type MockJSONRPCMockRecorder struct {
	mock *MockJSONRPC
}

// NewMockJSONRPC creates a new mock instance
func NewMockJSONRPC(ctrl *gomock.Controller) *MockJSONRPC {
	mock := &MockJSONRPC{ctrl: ctrl}
	mock.recorder = &MockJSONRPCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJSONRPC) EXPECT() *MockJSONRPCMockRecorder {
	return m.recorder
}

// Call mocks base method
func (m *MockJSONRPC) Call(ctx context.Context, nodeID, method string, args ...interface{}) (*jsonrpc.ResponseMsg, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, nodeID, method}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(*jsonrpc.ResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call
func (mr *MockJSONRPCMockRecorder) Call(ctx, nodeID, method interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, nodeID, method}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockJSONRPC)(nil).Call), varargs...)
}

// MockKeyManagerClient is a mock of KeyManagerClient interface
type MockKeyManagerClient struct {
	ctrl     *gomock.Controller
	recorder *MockKeyManagerClientMockRecorder
}

// MockKeyManagerClientMockRecorder is the mock recorder for MockKeyManagerClient
type MockKeyManagerClientMockRecorder struct {
	mock *MockKeyManagerClient
}

// NewMockKeyManagerClient creates a new mock instance
func NewMockKeyManagerClient(ctrl *gomock.Controller) *MockKeyManagerClient {
	mock := &MockKeyManagerClient{ctrl: ctrl}
	mock.recorder = &MockKeyManagerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeyManagerClient) EXPECT() *MockKeyManagerClientMockRecorder {
	return m.recorder
}

// SetSecret mocks base method
func (m *MockKeyManagerClient) SetSecret(ctx context.Context, storeName, id string, request *types.SetSecretRequest) (*types.SecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSecret", ctx, storeName, id, request)
	ret0, _ := ret[0].(*types.SecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSecret indicates an expected call of SetSecret
func (mr *MockKeyManagerClientMockRecorder) SetSecret(ctx, storeName, id, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSecret", reflect.TypeOf((*MockKeyManagerClient)(nil).SetSecret), ctx, storeName, id, request)
}

// GetSecret mocks base method
func (m *MockKeyManagerClient) GetSecret(ctx context.Context, storeName, id, version string) (*types.SecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", ctx, storeName, id, version)
	ret0, _ := ret[0].(*types.SecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret
func (mr *MockKeyManagerClientMockRecorder) GetSecret(ctx, storeName, id, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockKeyManagerClient)(nil).GetSecret), ctx, storeName, id, version)
}

// GetDeletedSecret mocks base method
func (m *MockKeyManagerClient) GetDeletedSecret(ctx context.Context, storeName, id string) (*types.SecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeletedSecret", ctx, storeName, id)
	ret0, _ := ret[0].(*types.SecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeletedSecret indicates an expected call of GetDeletedSecret
func (mr *MockKeyManagerClientMockRecorder) GetDeletedSecret(ctx, storeName, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeletedSecret", reflect.TypeOf((*MockKeyManagerClient)(nil).GetDeletedSecret), ctx, storeName, id)
}

// DeleteSecret mocks base method
func (m *MockKeyManagerClient) DeleteSecret(ctx context.Context, storeName, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", ctx, storeName, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret
func (mr *MockKeyManagerClientMockRecorder) DeleteSecret(ctx, storeName, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockKeyManagerClient)(nil).DeleteSecret), ctx, storeName, id)
}

// RestoreSecret mocks base method
func (m *MockKeyManagerClient) RestoreSecret(ctx context.Context, storeName, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreSecret", ctx, storeName, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreSecret indicates an expected call of RestoreSecret
func (mr *MockKeyManagerClientMockRecorder) RestoreSecret(ctx, storeName, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreSecret", reflect.TypeOf((*MockKeyManagerClient)(nil).RestoreSecret), ctx, storeName, id)
}

// DestroySecret mocks base method
func (m *MockKeyManagerClient) DestroySecret(ctx context.Context, storeName, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroySecret", ctx, storeName, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroySecret indicates an expected call of DestroySecret
func (mr *MockKeyManagerClientMockRecorder) DestroySecret(ctx, storeName, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroySecret", reflect.TypeOf((*MockKeyManagerClient)(nil).DestroySecret), ctx, storeName, id)
}

// ListSecrets mocks base method
func (m *MockKeyManagerClient) ListSecrets(ctx context.Context, storeName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecrets", ctx, storeName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecrets indicates an expected call of ListSecrets
func (mr *MockKeyManagerClientMockRecorder) ListSecrets(ctx, storeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecrets", reflect.TypeOf((*MockKeyManagerClient)(nil).ListSecrets), ctx, storeName)
}

// ListDeletedSecrets mocks base method
func (m *MockKeyManagerClient) ListDeletedSecrets(ctx context.Context, storeName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeletedSecrets", ctx, storeName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeletedSecrets indicates an expected call of ListDeletedSecrets
func (mr *MockKeyManagerClientMockRecorder) ListDeletedSecrets(ctx, storeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeletedSecrets", reflect.TypeOf((*MockKeyManagerClient)(nil).ListDeletedSecrets), ctx, storeName)
}

// CreateKey mocks base method
func (m *MockKeyManagerClient) CreateKey(ctx context.Context, storeName, id string, request *types.CreateKeyRequest) (*types.KeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKey", ctx, storeName, id, request)
	ret0, _ := ret[0].(*types.KeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKey indicates an expected call of CreateKey
func (mr *MockKeyManagerClientMockRecorder) CreateKey(ctx, storeName, id, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKey", reflect.TypeOf((*MockKeyManagerClient)(nil).CreateKey), ctx, storeName, id, request)
}

// ImportKey mocks base method
func (m *MockKeyManagerClient) ImportKey(ctx context.Context, storeName, id string, request *types.ImportKeyRequest) (*types.KeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportKey", ctx, storeName, id, request)
	ret0, _ := ret[0].(*types.KeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportKey indicates an expected call of ImportKey
func (mr *MockKeyManagerClientMockRecorder) ImportKey(ctx, storeName, id, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportKey", reflect.TypeOf((*MockKeyManagerClient)(nil).ImportKey), ctx, storeName, id, request)
}

// SignKey mocks base method
func (m *MockKeyManagerClient) SignKey(ctx context.Context, storeName, id string, request *types.SignBase64PayloadRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignKey", ctx, storeName, id, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignKey indicates an expected call of SignKey
func (mr *MockKeyManagerClientMockRecorder) SignKey(ctx, storeName, id, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignKey", reflect.TypeOf((*MockKeyManagerClient)(nil).SignKey), ctx, storeName, id, request)
}

// VerifyKeySignature mocks base method
func (m *MockKeyManagerClient) VerifyKeySignature(ctx context.Context, storeName string, request *types.VerifyKeySignatureRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyKeySignature", ctx, storeName, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyKeySignature indicates an expected call of VerifyKeySignature
func (mr *MockKeyManagerClientMockRecorder) VerifyKeySignature(ctx, storeName, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyKeySignature", reflect.TypeOf((*MockKeyManagerClient)(nil).VerifyKeySignature), ctx, storeName, request)
}

// GetKey mocks base method
func (m *MockKeyManagerClient) GetKey(ctx context.Context, storeName, id string) (*types.KeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey", ctx, storeName, id)
	ret0, _ := ret[0].(*types.KeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKey indicates an expected call of GetKey
func (mr *MockKeyManagerClientMockRecorder) GetKey(ctx, storeName, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockKeyManagerClient)(nil).GetKey), ctx, storeName, id)
}

// ListKeys mocks base method
func (m *MockKeyManagerClient) ListKeys(ctx context.Context, storeName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeys", ctx, storeName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeys indicates an expected call of ListKeys
func (mr *MockKeyManagerClientMockRecorder) ListKeys(ctx, storeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeys", reflect.TypeOf((*MockKeyManagerClient)(nil).ListKeys), ctx, storeName)
}

// DeleteKey mocks base method
func (m *MockKeyManagerClient) DeleteKey(ctx context.Context, storeName, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKey", ctx, storeName, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKey indicates an expected call of DeleteKey
func (mr *MockKeyManagerClientMockRecorder) DeleteKey(ctx, storeName, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKey", reflect.TypeOf((*MockKeyManagerClient)(nil).DeleteKey), ctx, storeName, id)
}

// GetDeletedKey mocks base method
func (m *MockKeyManagerClient) GetDeletedKey(ctx context.Context, storeName, id string) (*types.KeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeletedKey", ctx, storeName, id)
	ret0, _ := ret[0].(*types.KeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeletedKey indicates an expected call of GetDeletedKey
func (mr *MockKeyManagerClientMockRecorder) GetDeletedKey(ctx, storeName, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeletedKey", reflect.TypeOf((*MockKeyManagerClient)(nil).GetDeletedKey), ctx, storeName, id)
}

// ListDeletedKeys mocks base method
func (m *MockKeyManagerClient) ListDeletedKeys(ctx context.Context, storeName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeletedKeys", ctx, storeName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeletedKeys indicates an expected call of ListDeletedKeys
func (mr *MockKeyManagerClientMockRecorder) ListDeletedKeys(ctx, storeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeletedKeys", reflect.TypeOf((*MockKeyManagerClient)(nil).ListDeletedKeys), ctx, storeName)
}

// RestoreKey mocks base method
func (m *MockKeyManagerClient) RestoreKey(ctx context.Context, storeName, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreKey", ctx, storeName, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreKey indicates an expected call of RestoreKey
func (mr *MockKeyManagerClientMockRecorder) RestoreKey(ctx, storeName, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreKey", reflect.TypeOf((*MockKeyManagerClient)(nil).RestoreKey), ctx, storeName, id)
}

// DestroyKey mocks base method
func (m *MockKeyManagerClient) DestroyKey(ctx context.Context, storeName, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyKey", ctx, storeName, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyKey indicates an expected call of DestroyKey
func (mr *MockKeyManagerClientMockRecorder) DestroyKey(ctx, storeName, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyKey", reflect.TypeOf((*MockKeyManagerClient)(nil).DestroyKey), ctx, storeName, id)
}

// CreateEthAccount mocks base method
func (m *MockKeyManagerClient) CreateEthAccount(ctx context.Context, storeName string, request *types.CreateEthAccountRequest) (*types.EthAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEthAccount", ctx, storeName, request)
	ret0, _ := ret[0].(*types.EthAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEthAccount indicates an expected call of CreateEthAccount
func (mr *MockKeyManagerClientMockRecorder) CreateEthAccount(ctx, storeName, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEthAccount", reflect.TypeOf((*MockKeyManagerClient)(nil).CreateEthAccount), ctx, storeName, request)
}

// ImportEthAccount mocks base method
func (m *MockKeyManagerClient) ImportEthAccount(ctx context.Context, storeName string, request *types.ImportEthAccountRequest) (*types.EthAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportEthAccount", ctx, storeName, request)
	ret0, _ := ret[0].(*types.EthAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportEthAccount indicates an expected call of ImportEthAccount
func (mr *MockKeyManagerClientMockRecorder) ImportEthAccount(ctx, storeName, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportEthAccount", reflect.TypeOf((*MockKeyManagerClient)(nil).ImportEthAccount), ctx, storeName, request)
}

// UpdateEthAccount mocks base method
func (m *MockKeyManagerClient) UpdateEthAccount(ctx context.Context, storeName, address string, request *types.UpdateEthAccountRequest) (*types.EthAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEthAccount", ctx, storeName, address, request)
	ret0, _ := ret[0].(*types.EthAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEthAccount indicates an expected call of UpdateEthAccount
func (mr *MockKeyManagerClientMockRecorder) UpdateEthAccount(ctx, storeName, address, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEthAccount", reflect.TypeOf((*MockKeyManagerClient)(nil).UpdateEthAccount), ctx, storeName, address, request)
}

// SignMessage mocks base method
func (m *MockKeyManagerClient) SignMessage(ctx context.Context, storeName, account string, request *types.SignMessageRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignMessage", ctx, storeName, account, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignMessage indicates an expected call of SignMessage
func (mr *MockKeyManagerClientMockRecorder) SignMessage(ctx, storeName, account, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignMessage", reflect.TypeOf((*MockKeyManagerClient)(nil).SignMessage), ctx, storeName, account, request)
}

// SignTypedData mocks base method
func (m *MockKeyManagerClient) SignTypedData(ctx context.Context, storeName, address string, request *types.SignTypedDataRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignTypedData", ctx, storeName, address, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignTypedData indicates an expected call of SignTypedData
func (mr *MockKeyManagerClientMockRecorder) SignTypedData(ctx, storeName, address, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignTypedData", reflect.TypeOf((*MockKeyManagerClient)(nil).SignTypedData), ctx, storeName, address, request)
}

// SignTransaction mocks base method
func (m *MockKeyManagerClient) SignTransaction(ctx context.Context, storeName, address string, request *types.SignETHTransactionRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignTransaction", ctx, storeName, address, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignTransaction indicates an expected call of SignTransaction
func (mr *MockKeyManagerClientMockRecorder) SignTransaction(ctx, storeName, address, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignTransaction", reflect.TypeOf((*MockKeyManagerClient)(nil).SignTransaction), ctx, storeName, address, request)
}

// SignQuorumPrivateTransaction mocks base method
func (m *MockKeyManagerClient) SignQuorumPrivateTransaction(ctx context.Context, storeName, address string, request *types.SignQuorumPrivateTransactionRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignQuorumPrivateTransaction", ctx, storeName, address, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignQuorumPrivateTransaction indicates an expected call of SignQuorumPrivateTransaction
func (mr *MockKeyManagerClientMockRecorder) SignQuorumPrivateTransaction(ctx, storeName, address, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignQuorumPrivateTransaction", reflect.TypeOf((*MockKeyManagerClient)(nil).SignQuorumPrivateTransaction), ctx, storeName, address, request)
}

// SignEEATransaction mocks base method
func (m *MockKeyManagerClient) SignEEATransaction(ctx context.Context, storeName, address string, request *types.SignEEATransactionRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignEEATransaction", ctx, storeName, address, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignEEATransaction indicates an expected call of SignEEATransaction
func (mr *MockKeyManagerClientMockRecorder) SignEEATransaction(ctx, storeName, address, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignEEATransaction", reflect.TypeOf((*MockKeyManagerClient)(nil).SignEEATransaction), ctx, storeName, address, request)
}

// GetEthAccount mocks base method
func (m *MockKeyManagerClient) GetEthAccount(ctx context.Context, storeName, address string) (*types.EthAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEthAccount", ctx, storeName, address)
	ret0, _ := ret[0].(*types.EthAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEthAccount indicates an expected call of GetEthAccount
func (mr *MockKeyManagerClientMockRecorder) GetEthAccount(ctx, storeName, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEthAccount", reflect.TypeOf((*MockKeyManagerClient)(nil).GetEthAccount), ctx, storeName, address)
}

// ListEthAccounts mocks base method
func (m *MockKeyManagerClient) ListEthAccounts(ctx context.Context, storeName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEthAccounts", ctx, storeName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEthAccounts indicates an expected call of ListEthAccounts
func (mr *MockKeyManagerClientMockRecorder) ListEthAccounts(ctx, storeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEthAccounts", reflect.TypeOf((*MockKeyManagerClient)(nil).ListEthAccounts), ctx, storeName)
}

// DeleteEthAccount mocks base method
func (m *MockKeyManagerClient) DeleteEthAccount(ctx context.Context, storeName, address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEthAccount", ctx, storeName, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEthAccount indicates an expected call of DeleteEthAccount
func (mr *MockKeyManagerClientMockRecorder) DeleteEthAccount(ctx, storeName, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEthAccount", reflect.TypeOf((*MockKeyManagerClient)(nil).DeleteEthAccount), ctx, storeName, address)
}

// DestroyEthAccount mocks base method
func (m *MockKeyManagerClient) DestroyEthAccount(ctx context.Context, storeName, address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyEthAccount", ctx, storeName, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyEthAccount indicates an expected call of DestroyEthAccount
func (mr *MockKeyManagerClientMockRecorder) DestroyEthAccount(ctx, storeName, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyEthAccount", reflect.TypeOf((*MockKeyManagerClient)(nil).DestroyEthAccount), ctx, storeName, address)
}

// RestoreEthAccount mocks base method
func (m *MockKeyManagerClient) RestoreEthAccount(ctx context.Context, storeName, address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreEthAccount", ctx, storeName, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreEthAccount indicates an expected call of RestoreEthAccount
func (mr *MockKeyManagerClientMockRecorder) RestoreEthAccount(ctx, storeName, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreEthAccount", reflect.TypeOf((*MockKeyManagerClient)(nil).RestoreEthAccount), ctx, storeName, address)
}

// ECRecover mocks base method
func (m *MockKeyManagerClient) ECRecover(ctx context.Context, storeName string, request *types.ECRecoverRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ECRecover", ctx, storeName, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ECRecover indicates an expected call of ECRecover
func (mr *MockKeyManagerClientMockRecorder) ECRecover(ctx, storeName, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ECRecover", reflect.TypeOf((*MockKeyManagerClient)(nil).ECRecover), ctx, storeName, request)
}

// Verify mocks base method
func (m *MockKeyManagerClient) Verify(ctx context.Context, storeName string, request *types.VerifyRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ctx, storeName, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify
func (mr *MockKeyManagerClientMockRecorder) Verify(ctx, storeName, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockKeyManagerClient)(nil).Verify), ctx, storeName, request)
}

// VerifyMessage mocks base method
func (m *MockKeyManagerClient) VerifyMessage(ctx context.Context, storeName string, request *types.VerifyRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyMessage", ctx, storeName, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyMessage indicates an expected call of VerifyMessage
func (mr *MockKeyManagerClientMockRecorder) VerifyMessage(ctx, storeName, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyMessage", reflect.TypeOf((*MockKeyManagerClient)(nil).VerifyMessage), ctx, storeName, request)
}

// VerifyTypedData mocks base method
func (m *MockKeyManagerClient) VerifyTypedData(ctx context.Context, storeName string, request *types.VerifyTypedDataRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyTypedData", ctx, storeName, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyTypedData indicates an expected call of VerifyTypedData
func (mr *MockKeyManagerClientMockRecorder) VerifyTypedData(ctx, storeName, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyTypedData", reflect.TypeOf((*MockKeyManagerClient)(nil).VerifyTypedData), ctx, storeName, request)
}

// Call mocks base method
func (m *MockKeyManagerClient) Call(ctx context.Context, nodeID, method string, args ...interface{}) (*jsonrpc.ResponseMsg, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, nodeID, method}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(*jsonrpc.ResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call
func (mr *MockKeyManagerClientMockRecorder) Call(ctx, nodeID, method interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, nodeID, method}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockKeyManagerClient)(nil).Call), varargs...)
}
