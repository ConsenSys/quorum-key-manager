// Code generated by MockGen. DO NOT EDIT.
// Source: caller_priv.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
)

// MockPrivCaller is a mock of PrivCaller interface.
type MockPrivCaller struct {
	ctrl     *gomock.Controller
	recorder *MockPrivCallerMockRecorder
}

// MockPrivCallerMockRecorder is the mock recorder for MockPrivCaller.
type MockPrivCallerMockRecorder struct {
	mock *MockPrivCaller
}

// NewMockPrivCaller creates a new mock instance.
func NewMockPrivCaller(ctrl *gomock.Controller) *MockPrivCaller {
	mock := &MockPrivCaller{ctrl: ctrl}
	mock.recorder = &MockPrivCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrivCaller) EXPECT() *MockPrivCallerMockRecorder {
	return m.recorder
}

// DistributeRawTransaction mock base method.
func (m *MockPrivCaller) DistributeRawTransaction(arg0 context.Context, arg1 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DistributeRawTransaction", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DistributeRawTransaction indicates an expected call of DistributeRawTransaction.
func (mr *MockPrivCallerMockRecorder) DistributeRawTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistributeRawTransaction", reflect.TypeOf((*MockPrivCaller)(nil).DistributeRawTransaction), arg0, arg1)
}

// GetEeaTransactionCount mock base method.
func (m *MockPrivCaller) GetEeaTransactionCount(ctx context.Context, addr common.Address, privateFrom string, privateFor []string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEeaTransactionCount", ctx, addr, privateFrom, privateFor)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEeaTransactionCount indicates an expected call of GetEeaTransactionCount.
func (mr *MockPrivCallerMockRecorder) GetEeaTransactionCount(ctx, addr, privateFrom, privateFor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEeaTransactionCount", reflect.TypeOf((*MockPrivCaller)(nil).GetEeaTransactionCount), ctx, addr, privateFrom, privateFor)
}

// GetTransactionCount mock base method.
func (m *MockPrivCaller) GetTransactionCount(ctx context.Context, addr common.Address, privacyGroupID string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionCount", ctx, addr, privacyGroupID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionCount indicates an expected call of GetTransactionCount.
func (mr *MockPrivCallerMockRecorder) GetTransactionCount(ctx, addr, privacyGroupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionCount", reflect.TypeOf((*MockPrivCaller)(nil).GetTransactionCount), ctx, addr, privacyGroupID)
}
