// Code generated by MockGen. DO NOT EDIT.
// Source: caller.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	big "math/big"
	reflect "reflect"

	ethereum "github.com/ConsenSysQuorum/quorum-key-manager/pkg/ethereum"
	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
)

// MockCaller is a mock of Caller interface.
type MockCaller struct {
	ctrl     *gomock.Controller
	recorder *MockCallerMockRecorder
}

// MockCallerMockRecorder is the mock recorder for MockCaller.
type MockCallerMockRecorder struct {
	mock *MockCaller
}

// NewMockCaller creates a new mock instance.
func NewMockCaller(ctrl *gomock.Controller) *MockCaller {
	mock := &MockCaller{ctrl: ctrl}
	mock.recorder = &MockCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCaller) EXPECT() *MockCallerMockRecorder {
	return m.recorder
}

// EEA mocks base method.
func (m *MockCaller) EEA() ethereum.EEACaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EEA")
	ret0, _ := ret[0].(ethereum.EEACaller)
	return ret0
}

// EEA indicates an expected call of EEA.
func (mr *MockCallerMockRecorder) EEA() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EEA", reflect.TypeOf((*MockCaller)(nil).EEA))
}

// Eth mocks base method.
func (m *MockCaller) Eth() ethereum.EthCaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Eth")
	ret0, _ := ret[0].(ethereum.EthCaller)
	return ret0
}

// Eth indicates an expected call of Eth.
func (mr *MockCallerMockRecorder) Eth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eth", reflect.TypeOf((*MockCaller)(nil).Eth))
}

// Priv mocks base method.
func (m *MockCaller) Priv() ethereum.PrivCaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Priv")
	ret0, _ := ret[0].(ethereum.PrivCaller)
	return ret0
}

// Priv indicates an expected call of Priv.
func (mr *MockCallerMockRecorder) Priv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Priv", reflect.TypeOf((*MockCaller)(nil).Priv))
}

// MockEthCaller is a mock of EthCaller interface.
type MockEthCaller struct {
	ctrl     *gomock.Controller
	recorder *MockEthCallerMockRecorder
}

// MockEthCallerMockRecorder is the mock recorder for MockEthCaller.
type MockEthCallerMockRecorder struct {
	mock *MockEthCaller
}

// NewMockEthCaller creates a new mock instance.
func NewMockEthCaller(ctrl *gomock.Controller) *MockEthCaller {
	mock := &MockEthCaller{ctrl: ctrl}
	mock.recorder = &MockEthCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEthCaller) EXPECT() *MockEthCallerMockRecorder {
	return m.recorder
}

// ChainID mocks base method.
func (m *MockEthCaller) ChainID(arg0 context.Context) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainID", arg0)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChainID indicates an expected call of ChainID.
func (mr *MockEthCallerMockRecorder) ChainID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainID", reflect.TypeOf((*MockEthCaller)(nil).ChainID), arg0)
}

// EstimateGas mocks base method.
func (m *MockEthCaller) EstimateGas(arg0 context.Context, arg1 *ethereum.CallMsg) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateGas", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateGas indicates an expected call of EstimateGas.
func (mr *MockEthCallerMockRecorder) EstimateGas(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateGas", reflect.TypeOf((*MockEthCaller)(nil).EstimateGas), arg0, arg1)
}

// GasPrice mocks base method.
func (m *MockEthCaller) GasPrice(arg0 context.Context) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GasPrice", arg0)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GasPrice indicates an expected call of GasPrice.
func (mr *MockEthCallerMockRecorder) GasPrice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GasPrice", reflect.TypeOf((*MockEthCaller)(nil).GasPrice), arg0)
}

// GetTransactionCount mocks base method.
func (m *MockEthCaller) GetTransactionCount(arg0 context.Context, arg1 common.Address, arg2 ethereum.BlockNumber) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionCount", arg0, arg1, arg2)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionCount indicates an expected call of GetTransactionCount.
func (mr *MockEthCallerMockRecorder) GetTransactionCount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionCount", reflect.TypeOf((*MockEthCaller)(nil).GetTransactionCount), arg0, arg1, arg2)
}

// SendRawPrivateTransaction mocks base method.
func (m *MockEthCaller) SendRawPrivateTransaction(arg0 context.Context, arg1 []byte, arg2 *ethereum.PrivateArgs) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRawPrivateTransaction", arg0, arg1, arg2)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRawPrivateTransaction indicates an expected call of SendRawPrivateTransaction.
func (mr *MockEthCallerMockRecorder) SendRawPrivateTransaction(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRawPrivateTransaction", reflect.TypeOf((*MockEthCaller)(nil).SendRawPrivateTransaction), arg0, arg1, arg2)
}

// SendRawTransaction mocks base method.
func (m *MockEthCaller) SendRawTransaction(arg0 context.Context, arg1 []byte) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRawTransaction", arg0, arg1)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRawTransaction indicates an expected call of SendRawTransaction.
func (mr *MockEthCallerMockRecorder) SendRawTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRawTransaction", reflect.TypeOf((*MockEthCaller)(nil).SendRawTransaction), arg0, arg1)
}

// MockEEACaller is a mock of EEACaller interface.
type MockEEACaller struct {
	ctrl     *gomock.Controller
	recorder *MockEEACallerMockRecorder
}

// MockEEACallerMockRecorder is the mock recorder for MockEEACaller.
type MockEEACallerMockRecorder struct {
	mock *MockEEACaller
}

// NewMockEEACaller creates a new mock instance.
func NewMockEEACaller(ctrl *gomock.Controller) *MockEEACaller {
	mock := &MockEEACaller{ctrl: ctrl}
	mock.recorder = &MockEEACallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEEACaller) EXPECT() *MockEEACallerMockRecorder {
	return m.recorder
}

// SendRawTransaction mocks base method.
func (m *MockEEACaller) SendRawTransaction(arg0 context.Context, arg1 []byte) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRawTransaction", arg0, arg1)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRawTransaction indicates an expected call of SendRawTransaction.
func (mr *MockEEACallerMockRecorder) SendRawTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRawTransaction", reflect.TypeOf((*MockEEACaller)(nil).SendRawTransaction), arg0, arg1)
}

// MockPrivCaller is a mock of PrivCaller interface.
type MockPrivCaller struct {
	ctrl     *gomock.Controller
	recorder *MockPrivCallerMockRecorder
}

// MockPrivCallerMockRecorder is the mock recorder for MockPrivCaller.
type MockPrivCallerMockRecorder struct {
	mock *MockPrivCaller
}

// NewMockPrivCaller creates a new mock instance.
func NewMockPrivCaller(ctrl *gomock.Controller) *MockPrivCaller {
	mock := &MockPrivCaller{ctrl: ctrl}
	mock.recorder = &MockPrivCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrivCaller) EXPECT() *MockPrivCallerMockRecorder {
	return m.recorder
}

// DistributeRawTransaction mocks base method.
func (m *MockPrivCaller) DistributeRawTransaction(arg0 context.Context, arg1 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DistributeRawTransaction", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DistributeRawTransaction indicates an expected call of DistributeRawTransaction.
func (mr *MockPrivCallerMockRecorder) DistributeRawTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistributeRawTransaction", reflect.TypeOf((*MockPrivCaller)(nil).DistributeRawTransaction), arg0, arg1)
}

// GetEEATransactionCount mocks base method.
func (m *MockPrivCaller) GetEEATransactionCount(ctx context.Context, addr common.Address, privateFrom string, privateFor []string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEEATransactionCount", ctx, addr, privateFrom, privateFor)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEEATransactionCount indicates an expected call of GetEEATransactionCount.
func (mr *MockPrivCallerMockRecorder) GetEEATransactionCount(ctx, addr, privateFrom, privateFor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEEATransactionCount", reflect.TypeOf((*MockPrivCaller)(nil).GetEEATransactionCount), ctx, addr, privateFrom, privateFor)
}

// GetTransactionCount mocks base method.
func (m *MockPrivCaller) GetTransactionCount(ctx context.Context, addr common.Address, privacyGroupID string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionCount", ctx, addr, privacyGroupID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionCount indicates an expected call of GetTransactionCount.
func (mr *MockPrivCallerMockRecorder) GetTransactionCount(ctx, addr, privacyGroupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionCount", reflect.TypeOf((*MockPrivCaller)(nil).GetTransactionCount), ctx, addr, privacyGroupID)
}
