// Code generated by MockGen. DO NOT EDIT.
// Source: caller_eea.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
)

// MockEEACaller is a mock of EEACaller interface.
type MockEEACaller struct {
	ctrl     *gomock.Controller
	recorder *MockEEACallerMockRecorder
}

// MockEEACallerMockRecorder is the mock recorder for MockEEACaller.
type MockEEACallerMockRecorder struct {
	mock *MockEEACaller
}

// NewMockEEACaller creates a new mock instance.
func NewMockEEACaller(ctrl *gomock.Controller) *MockEEACaller {
	mock := &MockEEACaller{ctrl: ctrl}
	mock.recorder = &MockEEACallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEEACaller) EXPECT() *MockEEACallerMockRecorder {
	return m.recorder
}

// SendRawTransaction mocks base method.
func (m *MockEEACaller) SendRawTransaction(arg0 context.Context, arg1 []byte) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRawTransaction", arg0, arg1)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRawTransaction indicates an expected call of SendRawTransaction.
func (mr *MockEEACallerMockRecorder) SendRawTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRawTransaction", reflect.TypeOf((*MockEEACaller)(nil).SendRawTransaction), arg0, arg1)
}
