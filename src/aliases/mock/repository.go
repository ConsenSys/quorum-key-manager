// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/consensys/quorum-key-manager/src/aliases (interfaces: Repository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	aliasent "github.com/consensys/quorum-key-manager/src/aliases/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateAlias mocks base method.
func (m *MockRepository) CreateAlias(arg0 context.Context, arg1 string, arg2 aliasent.Alias) (*aliasent.Alias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlias", arg0, arg1, arg2)
	ret0, _ := ret[0].(*aliasent.Alias)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAlias indicates an expected call of CreateAlias.
func (mr *MockRepositoryMockRecorder) CreateAlias(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlias", reflect.TypeOf((*MockRepository)(nil).CreateAlias), arg0, arg1, arg2)
}

// DeleteAlias mocks base method.
func (m *MockRepository) DeleteAlias(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlias", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAlias indicates an expected call of DeleteAlias.
func (mr *MockRepositoryMockRecorder) DeleteAlias(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlias", reflect.TypeOf((*MockRepository)(nil).DeleteAlias), arg0, arg1, arg2)
}

// DeleteRegistry mocks base method.
func (m *MockRepository) DeleteRegistry(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegistry", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRegistry indicates an expected call of DeleteRegistry.
func (mr *MockRepositoryMockRecorder) DeleteRegistry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistry", reflect.TypeOf((*MockRepository)(nil).DeleteRegistry), arg0, arg1)
}

// GetAlias mocks base method.
func (m *MockRepository) GetAlias(arg0 context.Context, arg1, arg2 string) (*aliasent.Alias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlias", arg0, arg1, arg2)
	ret0, _ := ret[0].(*aliasent.Alias)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlias indicates an expected call of GetAlias.
func (mr *MockRepositoryMockRecorder) GetAlias(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlias", reflect.TypeOf((*MockRepository)(nil).GetAlias), arg0, arg1, arg2)
}

// ListAliases mocks base method.
func (m *MockRepository) ListAliases(arg0 context.Context, arg1 string) ([]aliasent.Alias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAliases", arg0, arg1)
	ret0, _ := ret[0].([]aliasent.Alias)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAliases indicates an expected call of ListAliases.
func (mr *MockRepositoryMockRecorder) ListAliases(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAliases", reflect.TypeOf((*MockRepository)(nil).ListAliases), arg0, arg1)
}

// UpdateAlias mocks base method.
func (m *MockRepository) UpdateAlias(arg0 context.Context, arg1 string, arg2 aliasent.Alias) (*aliasent.Alias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAlias", arg0, arg1, arg2)
	ret0, _ := ret[0].(*aliasent.Alias)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAlias indicates an expected call of UpdateAlias.
func (mr *MockRepositoryMockRecorder) UpdateAlias(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlias", reflect.TypeOf((*MockRepository)(nil).UpdateAlias), arg0, arg1, arg2)
}
