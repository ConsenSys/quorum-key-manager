// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/consensys/quorum-key-manager/src/aliases (interfaces: Backend)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	aliasent "github.com/consensys/quorum-key-manager/src/aliases/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// CreateAlias mocks base method.
func (m *MockBackend) CreateAlias(arg0 context.Context, arg1 string, arg2 aliasent.Alias) (*aliasent.Alias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlias", arg0, arg1, arg2)
	ret0, _ := ret[0].(*aliasent.Alias)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAlias indicates an expected call of CreateAlias.
func (mr *MockBackendMockRecorder) CreateAlias(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlias", reflect.TypeOf((*MockBackend)(nil).CreateAlias), arg0, arg1, arg2)
}

// DeleteAlias mocks base method.
func (m *MockBackend) DeleteAlias(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlias", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAlias indicates an expected call of DeleteAlias.
func (mr *MockBackendMockRecorder) DeleteAlias(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlias", reflect.TypeOf((*MockBackend)(nil).DeleteAlias), arg0, arg1, arg2)
}

// DeleteRegistry mocks base method.
func (m *MockBackend) DeleteRegistry(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegistry", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRegistry indicates an expected call of DeleteRegistry.
func (mr *MockBackendMockRecorder) DeleteRegistry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistry", reflect.TypeOf((*MockBackend)(nil).DeleteRegistry), arg0, arg1)
}

// GetAlias mocks base method.
func (m *MockBackend) GetAlias(arg0 context.Context, arg1, arg2 string) (*aliasent.Alias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlias", arg0, arg1, arg2)
	ret0, _ := ret[0].(*aliasent.Alias)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlias indicates an expected call of GetAlias.
func (mr *MockBackendMockRecorder) GetAlias(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlias", reflect.TypeOf((*MockBackend)(nil).GetAlias), arg0, arg1, arg2)
}

// ListAliases mocks base method.
func (m *MockBackend) ListAliases(arg0 context.Context, arg1 string) ([]aliasent.Alias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAliases", arg0, arg1)
	ret0, _ := ret[0].([]aliasent.Alias)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAliases indicates an expected call of ListAliases.
func (mr *MockBackendMockRecorder) ListAliases(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAliases", reflect.TypeOf((*MockBackend)(nil).ListAliases), arg0, arg1)
}

// ParseAlias mocks base method.
func (m *MockBackend) ParseAlias(arg0 string) (string, string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseAlias", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// ParseAlias indicates an expected call of ParseAlias.
func (mr *MockBackendMockRecorder) ParseAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAlias", reflect.TypeOf((*MockBackend)(nil).ParseAlias), arg0)
}

// ReplaceAliases mocks base method.
func (m *MockBackend) ReplaceAliases(arg0 context.Context, arg1 []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceAliases", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceAliases indicates an expected call of ReplaceAliases.
func (mr *MockBackendMockRecorder) ReplaceAliases(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceAliases", reflect.TypeOf((*MockBackend)(nil).ReplaceAliases), arg0, arg1)
}

// UpdateAlias mocks base method.
func (m *MockBackend) UpdateAlias(arg0 context.Context, arg1 string, arg2 aliasent.Alias) (*aliasent.Alias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAlias", arg0, arg1, arg2)
	ret0, _ := ret[0].(*aliasent.Alias)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAlias indicates an expected call of UpdateAlias.
func (mr *MockBackendMockRecorder) UpdateAlias(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlias", reflect.TypeOf((*MockBackend)(nil).UpdateAlias), arg0, arg1, arg2)
}
