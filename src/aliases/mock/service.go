// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/consensys/quorum-key-manager/src/aliases (interfaces: Service,Interactor,Parser)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	aliasent "github.com/consensys/quorum-key-manager/src/aliases/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateAlias mocks base method.
func (m *MockService) CreateAlias(arg0 context.Context, arg1 string, arg2 aliasent.Alias) (*aliasent.Alias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlias", arg0, arg1, arg2)
	ret0, _ := ret[0].(*aliasent.Alias)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAlias indicates an expected call of CreateAlias.
func (mr *MockServiceMockRecorder) CreateAlias(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlias", reflect.TypeOf((*MockService)(nil).CreateAlias), arg0, arg1, arg2)
}

// DeleteAlias mocks base method.
func (m *MockService) DeleteAlias(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlias", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAlias indicates an expected call of DeleteAlias.
func (mr *MockServiceMockRecorder) DeleteAlias(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlias", reflect.TypeOf((*MockService)(nil).DeleteAlias), arg0, arg1, arg2)
}

// DeleteRegistry mocks base method.
func (m *MockService) DeleteRegistry(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegistry", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRegistry indicates an expected call of DeleteRegistry.
func (mr *MockServiceMockRecorder) DeleteRegistry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistry", reflect.TypeOf((*MockService)(nil).DeleteRegistry), arg0, arg1)
}

// GetAlias mocks base method.
func (m *MockService) GetAlias(arg0 context.Context, arg1, arg2 string) (*aliasent.Alias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlias", arg0, arg1, arg2)
	ret0, _ := ret[0].(*aliasent.Alias)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlias indicates an expected call of GetAlias.
func (mr *MockServiceMockRecorder) GetAlias(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlias", reflect.TypeOf((*MockService)(nil).GetAlias), arg0, arg1, arg2)
}

// ListAliases mocks base method.
func (m *MockService) ListAliases(arg0 context.Context, arg1 string) ([]aliasent.Alias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAliases", arg0, arg1)
	ret0, _ := ret[0].([]aliasent.Alias)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAliases indicates an expected call of ListAliases.
func (mr *MockServiceMockRecorder) ListAliases(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAliases", reflect.TypeOf((*MockService)(nil).ListAliases), arg0, arg1)
}

// ParseAlias mocks base method.
func (m *MockService) ParseAlias(arg0 string) (string, string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseAlias", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// ParseAlias indicates an expected call of ParseAlias.
func (mr *MockServiceMockRecorder) ParseAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAlias", reflect.TypeOf((*MockService)(nil).ParseAlias), arg0)
}

// ReplaceAliases mocks base method.
func (m *MockService) ReplaceAliases(arg0 context.Context, arg1 []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceAliases", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceAliases indicates an expected call of ReplaceAliases.
func (mr *MockServiceMockRecorder) ReplaceAliases(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceAliases", reflect.TypeOf((*MockService)(nil).ReplaceAliases), arg0, arg1)
}

// UpdateAlias mocks base method.
func (m *MockService) UpdateAlias(arg0 context.Context, arg1 string, arg2 aliasent.Alias) (*aliasent.Alias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAlias", arg0, arg1, arg2)
	ret0, _ := ret[0].(*aliasent.Alias)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAlias indicates an expected call of UpdateAlias.
func (mr *MockServiceMockRecorder) UpdateAlias(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlias", reflect.TypeOf((*MockService)(nil).UpdateAlias), arg0, arg1, arg2)
}

// MockInteractor is a mock of Interactor interface.
type MockInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockInteractorMockRecorder
}

// MockInteractorMockRecorder is the mock recorder for MockInteractor.
type MockInteractorMockRecorder struct {
	mock *MockInteractor
}

// NewMockInteractor creates a new mock instance.
func NewMockInteractor(ctrl *gomock.Controller) *MockInteractor {
	mock := &MockInteractor{ctrl: ctrl}
	mock.recorder = &MockInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInteractor) EXPECT() *MockInteractorMockRecorder {
	return m.recorder
}

// CreateAlias mocks base method.
func (m *MockInteractor) CreateAlias(arg0 context.Context, arg1 string, arg2 aliasent.Alias) (*aliasent.Alias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlias", arg0, arg1, arg2)
	ret0, _ := ret[0].(*aliasent.Alias)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAlias indicates an expected call of CreateAlias.
func (mr *MockInteractorMockRecorder) CreateAlias(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlias", reflect.TypeOf((*MockInteractor)(nil).CreateAlias), arg0, arg1, arg2)
}

// DeleteAlias mocks base method.
func (m *MockInteractor) DeleteAlias(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlias", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAlias indicates an expected call of DeleteAlias.
func (mr *MockInteractorMockRecorder) DeleteAlias(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlias", reflect.TypeOf((*MockInteractor)(nil).DeleteAlias), arg0, arg1, arg2)
}

// DeleteRegistry mocks base method.
func (m *MockInteractor) DeleteRegistry(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegistry", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRegistry indicates an expected call of DeleteRegistry.
func (mr *MockInteractorMockRecorder) DeleteRegistry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistry", reflect.TypeOf((*MockInteractor)(nil).DeleteRegistry), arg0, arg1)
}

// GetAlias mocks base method.
func (m *MockInteractor) GetAlias(arg0 context.Context, arg1, arg2 string) (*aliasent.Alias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlias", arg0, arg1, arg2)
	ret0, _ := ret[0].(*aliasent.Alias)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlias indicates an expected call of GetAlias.
func (mr *MockInteractorMockRecorder) GetAlias(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlias", reflect.TypeOf((*MockInteractor)(nil).GetAlias), arg0, arg1, arg2)
}

// ListAliases mocks base method.
func (m *MockInteractor) ListAliases(arg0 context.Context, arg1 string) ([]aliasent.Alias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAliases", arg0, arg1)
	ret0, _ := ret[0].([]aliasent.Alias)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAliases indicates an expected call of ListAliases.
func (mr *MockInteractorMockRecorder) ListAliases(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAliases", reflect.TypeOf((*MockInteractor)(nil).ListAliases), arg0, arg1)
}

// UpdateAlias mocks base method.
func (m *MockInteractor) UpdateAlias(arg0 context.Context, arg1 string, arg2 aliasent.Alias) (*aliasent.Alias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAlias", arg0, arg1, arg2)
	ret0, _ := ret[0].(*aliasent.Alias)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAlias indicates an expected call of UpdateAlias.
func (mr *MockInteractorMockRecorder) UpdateAlias(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlias", reflect.TypeOf((*MockInteractor)(nil).UpdateAlias), arg0, arg1, arg2)
}

// MockParser is a mock of Parser interface.
type MockParser struct {
	ctrl     *gomock.Controller
	recorder *MockParserMockRecorder
}

// MockParserMockRecorder is the mock recorder for MockParser.
type MockParserMockRecorder struct {
	mock *MockParser
}

// NewMockParser creates a new mock instance.
func NewMockParser(ctrl *gomock.Controller) *MockParser {
	mock := &MockParser{ctrl: ctrl}
	mock.recorder = &MockParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParser) EXPECT() *MockParserMockRecorder {
	return m.recorder
}

// ParseAlias mocks base method.
func (m *MockParser) ParseAlias(arg0 string) (string, string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseAlias", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// ParseAlias indicates an expected call of ParseAlias.
func (mr *MockParserMockRecorder) ParseAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAlias", reflect.TypeOf((*MockParser)(nil).ParseAlias), arg0)
}

// ReplaceAliases mocks base method.
func (m *MockParser) ReplaceAliases(arg0 context.Context, arg1 []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceAliases", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceAliases indicates an expected call of ReplaceAliases.
func (mr *MockParserMockRecorder) ReplaceAliases(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceAliases", reflect.TypeOf((*MockParser)(nil).ReplaceAliases), arg0, arg1)
}
