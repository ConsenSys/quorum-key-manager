// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/consensys/quorum-key-manager/src/aliases (interfaces: Parser)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockParser is a mock of Parser interface.
type MockParser struct {
	ctrl     *gomock.Controller
	recorder *MockParserMockRecorder
}

// MockParserMockRecorder is the mock recorder for MockParser.
type MockParserMockRecorder struct {
	mock *MockParser
}

// NewMockParser creates a new mock instance.
func NewMockParser(ctrl *gomock.Controller) *MockParser {
	mock := &MockParser{ctrl: ctrl}
	mock.recorder = &MockParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParser) EXPECT() *MockParserMockRecorder {
	return m.recorder
}

// ParseAlias mocks base method.
func (m *MockParser) ParseAlias(arg0 string) (string, string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseAlias", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// ParseAlias indicates an expected call of ParseAlias.
func (mr *MockParserMockRecorder) ParseAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAlias", reflect.TypeOf((*MockParser)(nil).ParseAlias), arg0)
}

// ReplaceAliases mocks base method.
func (m *MockParser) ReplaceAliases(arg0 context.Context, arg1 []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceAliases", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceAliases indicates an expected call of ReplaceAliases.
func (mr *MockParserMockRecorder) ReplaceAliases(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceAliases", reflect.TypeOf((*MockParser)(nil).ReplaceAliases), arg0, arg1)
}
