// Code generated by MockGen. DO NOT EDIT.
// Source: node.go

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	jsonrpc "github.com/ConsenSysQuorum/quorum-key-manager/pkg/jsonrpc"
	gomock "github.com/golang/mock/gomock"
)

// MockNode is a mock of Node interface.
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *MockNodeMockRecorder
}

// MockNodeMockRecorder is the mock recorder for MockNode.
type MockNodeMockRecorder struct {
	mock *MockNode
}

// NewMockNode creates a new mock instance.
func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &MockNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNode) EXPECT() *MockNodeMockRecorder {
	return m.recorder
}

// ServeHTTP mocks base method.
func (m *MockNode) ServeHTTP(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeHTTP", arg0, arg1)
}

// ServeHTTP indicates an expected call of ServeHTTP.
func (mr *MockNodeMockRecorder) ServeHTTP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTP", reflect.TypeOf((*MockNode)(nil).ServeHTTP), arg0, arg1)
}

// SetRPCHandler mocks base method.
func (m *MockNode) SetRPCHandler(h jsonrpc.Handler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRPCHandler", h)
}

// SetRPCHandler indicates an expected call of SetRPCHandler.
func (mr *MockNodeMockRecorder) SetRPCHandler(h interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRPCHandler", reflect.TypeOf((*MockNode)(nil).SetRPCHandler), h)
}
