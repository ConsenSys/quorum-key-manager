// Code generated by MockGen. DO NOT EDIT.
// Source: database.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	database "github.com/consensys/quorum-key-manager/src/stores/store/database"
	models "github.com/consensys/quorum-key-manager/src/stores/store/database/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// ETH1Accounts mocks base method
func (m *MockDatabase) ETH1Accounts() database.ETH1Accounts {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETH1Accounts")
	ret0, _ := ret[0].(database.ETH1Accounts)
	return ret0
}

// ETH1Accounts indicates an expected call of ETH1Accounts
func (mr *MockDatabaseMockRecorder) ETH1Accounts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETH1Accounts", reflect.TypeOf((*MockDatabase)(nil).ETH1Accounts))
}

// Keys mocks base method
func (m *MockDatabase) Keys() database.Keys {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(database.Keys)
	return ret0
}

// Keys indicates an expected call of Keys
func (mr *MockDatabaseMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockDatabase)(nil).Keys))
}

// RunInTransaction mocks base method
func (m *MockDatabase) RunInTransaction(ctx context.Context, persistFunc func(database.Database) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunInTransaction", ctx, persistFunc)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunInTransaction indicates an expected call of RunInTransaction
func (mr *MockDatabaseMockRecorder) RunInTransaction(ctx, persistFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInTransaction", reflect.TypeOf((*MockDatabase)(nil).RunInTransaction), ctx, persistFunc)
}

// MockETH1Accounts is a mock of ETH1Accounts interface
type MockETH1Accounts struct {
	ctrl     *gomock.Controller
	recorder *MockETH1AccountsMockRecorder
}

// MockETH1AccountsMockRecorder is the mock recorder for MockETH1Accounts
type MockETH1AccountsMockRecorder struct {
	mock *MockETH1Accounts
}

// NewMockETH1Accounts creates a new mock instance
func NewMockETH1Accounts(ctrl *gomock.Controller) *MockETH1Accounts {
	mock := &MockETH1Accounts{ctrl: ctrl}
	mock.recorder = &MockETH1AccountsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockETH1Accounts) EXPECT() *MockETH1AccountsMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockETH1Accounts) Get(ctx context.Context, addr string) (*models.ETH1Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, addr)
	ret0, _ := ret[0].(*models.ETH1Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockETH1AccountsMockRecorder) Get(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockETH1Accounts)(nil).Get), ctx, addr)
}

// GetDeleted mocks base method
func (m *MockETH1Accounts) GetDeleted(ctx context.Context, addr string) (*models.ETH1Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeleted", ctx, addr)
	ret0, _ := ret[0].(*models.ETH1Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeleted indicates an expected call of GetDeleted
func (mr *MockETH1AccountsMockRecorder) GetDeleted(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeleted", reflect.TypeOf((*MockETH1Accounts)(nil).GetDeleted), ctx, addr)
}

// GetAll mocks base method
func (m *MockETH1Accounts) GetAll(ctx context.Context) ([]*models.ETH1Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*models.ETH1Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockETH1AccountsMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockETH1Accounts)(nil).GetAll), ctx)
}

// GetAllDeleted mocks base method
func (m *MockETH1Accounts) GetAllDeleted(ctx context.Context) ([]*models.ETH1Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDeleted", ctx)
	ret0, _ := ret[0].([]*models.ETH1Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDeleted indicates an expected call of GetAllDeleted
func (mr *MockETH1AccountsMockRecorder) GetAllDeleted(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDeleted", reflect.TypeOf((*MockETH1Accounts)(nil).GetAllDeleted), ctx)
}

// Add mocks base method
func (m *MockETH1Accounts) Add(ctx context.Context, account *models.ETH1Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockETH1AccountsMockRecorder) Add(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockETH1Accounts)(nil).Add), ctx, account)
}

// Update mocks base method
func (m *MockETH1Accounts) Update(ctx context.Context, account *models.ETH1Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockETH1AccountsMockRecorder) Update(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockETH1Accounts)(nil).Update), ctx, account)
}

// Delete mocks base method
func (m *MockETH1Accounts) Delete(ctx context.Context, addr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockETH1AccountsMockRecorder) Delete(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockETH1Accounts)(nil).Delete), ctx, addr)
}

// Restore mocks base method
func (m *MockETH1Accounts) Restore(ctx context.Context, account *models.ETH1Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restore indicates an expected call of Restore
func (mr *MockETH1AccountsMockRecorder) Restore(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockETH1Accounts)(nil).Restore), ctx, account)
}

// Purge mocks base method
func (m *MockETH1Accounts) Purge(ctx context.Context, addr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Purge", ctx, addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Purge indicates an expected call of Purge
func (mr *MockETH1AccountsMockRecorder) Purge(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Purge", reflect.TypeOf((*MockETH1Accounts)(nil).Purge), ctx, addr)
}

// MockKeys is a mock of Keys interface
type MockKeys struct {
	ctrl     *gomock.Controller
	recorder *MockKeysMockRecorder
}

// MockKeysMockRecorder is the mock recorder for MockKeys
type MockKeysMockRecorder struct {
	mock *MockKeys
}

// NewMockKeys creates a new mock instance
func NewMockKeys(ctrl *gomock.Controller) *MockKeys {
	mock := &MockKeys{ctrl: ctrl}
	mock.recorder = &MockKeysMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeys) EXPECT() *MockKeysMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockKeys) Get(ctx context.Context, id string) (*models.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*models.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockKeysMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKeys)(nil).Get), ctx, id)
}

// GetDeleted mocks base method
func (m *MockKeys) GetDeleted(ctx context.Context, id string) (*models.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeleted", ctx, id)
	ret0, _ := ret[0].(*models.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeleted indicates an expected call of GetDeleted
func (mr *MockKeysMockRecorder) GetDeleted(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeleted", reflect.TypeOf((*MockKeys)(nil).GetDeleted), ctx, id)
}

// GetAll mocks base method
func (m *MockKeys) GetAll(ctx context.Context) ([]*models.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*models.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockKeysMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockKeys)(nil).GetAll), ctx)
}

// GetAllDeleted mocks base method
func (m *MockKeys) GetAllDeleted(ctx context.Context) ([]*models.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDeleted", ctx)
	ret0, _ := ret[0].([]*models.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDeleted indicates an expected call of GetAllDeleted
func (mr *MockKeysMockRecorder) GetAllDeleted(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDeleted", reflect.TypeOf((*MockKeys)(nil).GetAllDeleted), ctx)
}

// Add mocks base method
func (m *MockKeys) Add(ctx context.Context, key *models.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockKeysMockRecorder) Add(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockKeys)(nil).Add), ctx, key)
}

// Update mocks base method
func (m *MockKeys) Update(ctx context.Context, key *models.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockKeysMockRecorder) Update(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockKeys)(nil).Update), ctx, key)
}

// Delete mocks base method
func (m *MockKeys) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockKeysMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKeys)(nil).Delete), ctx, id)
}

// Restore mocks base method
func (m *MockKeys) Restore(ctx context.Context, key *models.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restore indicates an expected call of Restore
func (mr *MockKeysMockRecorder) Restore(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockKeys)(nil).Restore), ctx, key)
}

// Purge mocks base method
func (m *MockKeys) Purge(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Purge", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Purge indicates an expected call of Purge
func (mr *MockKeysMockRecorder) Purge(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Purge", reflect.TypeOf((*MockKeys)(nil).Purge), ctx, id)
}
