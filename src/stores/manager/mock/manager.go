// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	manifest2 "github.com/ConsenSysQuorum/quorum-key-manager/src/manifests/types"
	entities2 "github.com/ConsenSysQuorum/quorum-key-manager/src/stores/store/entities"
	eth12 "github.com/ConsenSysQuorum/quorum-key-manager/src/stores/store/eth1"
	keys2 "github.com/ConsenSysQuorum/quorum-key-manager/src/stores/store/keys"
	secrets2 "github.com/ConsenSysQuorum/quorum-key-manager/src/stores/store/secrets"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// GetEth1Store mocks base method.
func (m *MockManager) GetEth1Store(ctx context.Context, name string) (eth12.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEth1Store", ctx, name)
	ret0, _ := ret[0].(eth12.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEth1Store indicates an expected call of GetEth1Store.
func (mr *MockManagerMockRecorder) GetEth1Store(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEth1Store", reflect.TypeOf((*MockManager)(nil).GetEth1Store), ctx, name)
}

// GetEth1StoreByAddr mocks base method.
func (m *MockManager) GetEth1StoreByAddr(ctx context.Context, addr common.Address) (eth12.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEth1StoreByAddr", ctx, addr)
	ret0, _ := ret[0].(eth12.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEth1StoreByAddr indicates an expected call of GetEth1StoreByAddr.
func (mr *MockManagerMockRecorder) GetEth1StoreByAddr(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEth1StoreByAddr", reflect.TypeOf((*MockManager)(nil).GetEth1StoreByAddr), ctx, addr)
}

// GetKeyStore mocks base method.
func (m *MockManager) GetKeyStore(ctx context.Context, name string) (keys2.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyStore", ctx, name)
	ret0, _ := ret[0].(keys2.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyStore indicates an expected call of GetKeyStore.
func (mr *MockManagerMockRecorder) GetKeyStore(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyStore", reflect.TypeOf((*MockManager)(nil).GetKeyStore), ctx, name)
}

// GetSecretStore mocks base method.
func (m *MockManager) GetSecretStore(ctx context.Context, name string) (secrets2.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretStore", ctx, name)
	ret0, _ := ret[0].(secrets2.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretStore indicates an expected call of GetSecretStore.
func (mr *MockManagerMockRecorder) GetSecretStore(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretStore", reflect.TypeOf((*MockManager)(nil).GetSecretStore), ctx, name)
}

// List mocks base method.
func (m *MockManager) List(ctx context.Context, kind manifest2.Kind) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, kind)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockManagerMockRecorder) List(ctx, kind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockManager)(nil).List), ctx, kind)
}

// ListAllAccounts mocks base method.
func (m *MockManager) ListAllAccounts(arg0 context.Context) ([]*entities2.ETH1Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllAccounts", arg0)
	ret0, _ := ret[0].([]*entities2.ETH1Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllAccounts indicates an expected call of ListAllAccounts.
func (mr *MockManagerMockRecorder) ListAllAccounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllAccounts", reflect.TypeOf((*MockManager)(nil).ListAllAccounts), arg0)
}
