// Code generated by MockGen. DO NOT EDIT.
// Source: stores.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	types "github.com/consensys/quorum-key-manager/src/auth/types"
	manifest "github.com/consensys/quorum-key-manager/src/infra/manifests/entities"
	stores "github.com/consensys/quorum-key-manager/src/stores"
	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStores is a mock of Stores interface
type MockStores struct {
	ctrl     *gomock.Controller
	recorder *MockStoresMockRecorder
}

// MockStoresMockRecorder is the mock recorder for MockStores
type MockStoresMockRecorder struct {
	mock *MockStores
}

// NewMockStores creates a new mock instance
func NewMockStores(ctrl *gomock.Controller) *MockStores {
	mock := &MockStores{ctrl: ctrl}
	mock.recorder = &MockStoresMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStores) EXPECT() *MockStoresMockRecorder {
	return m.recorder
}

// CreateEthereum mocks base method
func (m *MockStores) CreateEthereum(arg0 context.Context, storeName string, storeType manifest.StoreType, specs interface{}, allowedTenants []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEthereum", arg0, storeName, storeType, specs, allowedTenants)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEthereum indicates an expected call of CreateEthereum
func (mr *MockStoresMockRecorder) CreateEthereum(arg0, storeName, storeType, specs, allowedTenants interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEthereum", reflect.TypeOf((*MockStores)(nil).CreateEthereum), arg0, storeName, storeType, specs, allowedTenants)
}

// CreateKey mocks base method
func (m *MockStores) CreateKey(arg0 context.Context, storeName string, storeType manifest.StoreType, specs interface{}, allowedTenants []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKey", arg0, storeName, storeType, specs, allowedTenants)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateKey indicates an expected call of CreateKey
func (mr *MockStoresMockRecorder) CreateKey(arg0, storeName, storeType, specs, allowedTenants interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKey", reflect.TypeOf((*MockStores)(nil).CreateKey), arg0, storeName, storeType, specs, allowedTenants)
}

// CreateSecret mocks base method
func (m *MockStores) CreateSecret(arg0 context.Context, storeName string, storeType manifest.StoreType, specs interface{}, allowedTenants []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", arg0, storeName, storeType, specs, allowedTenants)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSecret indicates an expected call of CreateSecret
func (mr *MockStoresMockRecorder) CreateSecret(arg0, storeName, storeType, specs, allowedTenants interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockStores)(nil).CreateSecret), arg0, storeName, storeType, specs, allowedTenants)
}

// ImportEthereum mocks base method
func (m *MockStores) ImportEthereum(ctx context.Context, storeName string, userInfo *types.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportEthereum", ctx, storeName, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportEthereum indicates an expected call of ImportEthereum
func (mr *MockStoresMockRecorder) ImportEthereum(ctx, storeName, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportEthereum", reflect.TypeOf((*MockStores)(nil).ImportEthereum), ctx, storeName, userInfo)
}

// ImportKeys mocks base method
func (m *MockStores) ImportKeys(ctx context.Context, storeName string, userInfo *types.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportKeys", ctx, storeName, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportKeys indicates an expected call of ImportKeys
func (mr *MockStoresMockRecorder) ImportKeys(ctx, storeName, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportKeys", reflect.TypeOf((*MockStores)(nil).ImportKeys), ctx, storeName, userInfo)
}

// ImportSecrets mocks base method
func (m *MockStores) ImportSecrets(ctx context.Context, storeName string, userInfo *types.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportSecrets", ctx, storeName, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportSecrets indicates an expected call of ImportSecrets
func (mr *MockStoresMockRecorder) ImportSecrets(ctx, storeName, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportSecrets", reflect.TypeOf((*MockStores)(nil).ImportSecrets), ctx, storeName, userInfo)
}

// GetSecrets mocks base method
func (m *MockStores) GetSecrets(ctx context.Context, storeName string, userInfo *types.UserInfo) (stores.SecretStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecrets", ctx, storeName, userInfo)
	ret0, _ := ret[0].(stores.SecretStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecrets indicates an expected call of GetSecrets
func (mr *MockStoresMockRecorder) GetSecrets(ctx, storeName, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecrets", reflect.TypeOf((*MockStores)(nil).GetSecrets), ctx, storeName, userInfo)
}

// GetKeys mocks base method
func (m *MockStores) GetKeys(ctx context.Context, storeName string, userInfo *types.UserInfo) (stores.KeyStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeys", ctx, storeName, userInfo)
	ret0, _ := ret[0].(stores.KeyStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeys indicates an expected call of GetKeys
func (mr *MockStoresMockRecorder) GetKeys(ctx, storeName, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeys", reflect.TypeOf((*MockStores)(nil).GetKeys), ctx, storeName, userInfo)
}

// GetEthereum mocks base method
func (m *MockStores) GetEthereum(ctx context.Context, storeName string, userInfo *types.UserInfo) (stores.EthStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEthereum", ctx, storeName, userInfo)
	ret0, _ := ret[0].(stores.EthStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEthereum indicates an expected call of GetEthereum
func (mr *MockStoresMockRecorder) GetEthereum(ctx, storeName, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEthereum", reflect.TypeOf((*MockStores)(nil).GetEthereum), ctx, storeName, userInfo)
}

// GetEthStoreByAddr mocks base method
func (m *MockStores) GetEthStoreByAddr(ctx context.Context, addr common.Address, userInfo *types.UserInfo) (stores.EthStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEthStoreByAddr", ctx, addr, userInfo)
	ret0, _ := ret[0].(stores.EthStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEthStoreByAddr indicates an expected call of GetEthStoreByAddr
func (mr *MockStoresMockRecorder) GetEthStoreByAddr(ctx, addr, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEthStoreByAddr", reflect.TypeOf((*MockStores)(nil).GetEthStoreByAddr), ctx, addr, userInfo)
}

// List mocks base method
func (m *MockStores) List(ctx context.Context, storeType manifest.StoreType, userInfo *types.UserInfo) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, storeType, userInfo)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockStoresMockRecorder) List(ctx, storeType, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStores)(nil).List), ctx, storeType, userInfo)
}

// ListAllAccounts mocks base method
func (m *MockStores) ListAllAccounts(ctx context.Context, userInfo *types.UserInfo) ([]common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllAccounts", ctx, userInfo)
	ret0, _ := ret[0].([]common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllAccounts indicates an expected call of ListAllAccounts
func (mr *MockStoresMockRecorder) ListAllAccounts(ctx, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllAccounts", reflect.TypeOf((*MockStores)(nil).ListAllAccounts), ctx, userInfo)
}
