// Code generated by MockGen. DO NOT EDIT.
// Source: stores.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	types "github.com/consensys/quorum-key-manager/src/auth/types"
	"github.com/consensys/quorum-key-manager/src/infra/manifests/entities"
	stores "github.com/consensys/quorum-key-manager/src/stores"
	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStores is a mock of Stores interface
type MockStores struct {
	ctrl     *gomock.Controller
	recorder *MockStoresMockRecorder
}

// MockStoresMockRecorder is the mock recorder for MockStores
type MockStoresMockRecorder struct {
	mock *MockStores
}

// NewMockStores creates a new mock instance
func NewMockStores(ctrl *gomock.Controller) *MockStores {
	mock := &MockStores{ctrl: ctrl}
	mock.recorder = &MockStoresMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStores) EXPECT() *MockStoresMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockStores) Create(ctx context.Context, mnf *manifest.Manifest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, mnf)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockStoresMockRecorder) Create(ctx, mnf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStores)(nil).Create), ctx, mnf)
}

// GetSecretStore mocks base method
func (m *MockStores) GetSecretStore(ctx context.Context, storeName string, userInfo *types.UserInfo) (stores.SecretStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretStore", ctx, storeName, userInfo)
	ret0, _ := ret[0].(stores.SecretStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretStore indicates an expected call of GetSecretStore
func (mr *MockStoresMockRecorder) GetSecretStore(ctx, storeName, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretStore", reflect.TypeOf((*MockStores)(nil).GetSecretStore), ctx, storeName, userInfo)
}

// GetKeyStore mocks base method
func (m *MockStores) GetKeyStore(ctx context.Context, storeName string, userInfo *types.UserInfo) (stores.KeyStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyStore", ctx, storeName, userInfo)
	ret0, _ := ret[0].(stores.KeyStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyStore indicates an expected call of GetKeyStore
func (mr *MockStoresMockRecorder) GetKeyStore(ctx, storeName, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyStore", reflect.TypeOf((*MockStores)(nil).GetKeyStore), ctx, storeName, userInfo)
}

// GetEthStore mocks base method
func (m *MockStores) GetEthStore(ctx context.Context, storeName string, userInfo *types.UserInfo) (stores.EthStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEthStore", ctx, storeName, userInfo)
	ret0, _ := ret[0].(stores.EthStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEthStore indicates an expected call of GetEthStore
func (mr *MockStoresMockRecorder) GetEthStore(ctx, storeName, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEthStore", reflect.TypeOf((*MockStores)(nil).GetEthStore), ctx, storeName, userInfo)
}

// GetEthStoreByAddr mocks base method
func (m *MockStores) GetEthStoreByAddr(ctx context.Context, addr common.Address, userInfo *types.UserInfo) (stores.EthStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEthStoreByAddr", ctx, addr, userInfo)
	ret0, _ := ret[0].(stores.EthStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEthStoreByAddr indicates an expected call of GetEthStoreByAddr
func (mr *MockStoresMockRecorder) GetEthStoreByAddr(ctx, addr, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEthStoreByAddr", reflect.TypeOf((*MockStores)(nil).GetEthStoreByAddr), ctx, addr, userInfo)
}

// List mocks base method
func (m *MockStores) List(ctx context.Context, kind manifest.Kind, userInfo *types.UserInfo) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, kind, userInfo)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockStoresMockRecorder) List(ctx, kind, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStores)(nil).List), ctx, kind, userInfo)
}

// ListAllAccounts mocks base method
func (m *MockStores) ListAllAccounts(ctx context.Context, userInfo *types.UserInfo) ([]common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllAccounts", ctx, userInfo)
	ret0, _ := ret[0].([]common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllAccounts indicates an expected call of ListAllAccounts
func (mr *MockStoresMockRecorder) ListAllAccounts(ctx, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllAccounts", reflect.TypeOf((*MockStores)(nil).ListAllAccounts), ctx, userInfo)
}
