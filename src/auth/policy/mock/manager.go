// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	types "github.com/consensys/quorum-key-manager/src/auth/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// UserPolicies mocks base method
func (m *MockManager) UserPolicies(ctx context.Context, info *types.UserInfo) []types.Policy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserPolicies", ctx, info)
	ret0, _ := ret[0].([]types.Policy)
	return ret0
}

// UserPolicies indicates an expected call of UserPolicies
func (mr *MockManagerMockRecorder) GetUserPolicies(ctx, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserPolicies", reflect.TypeOf((*MockManager)(nil).UserPolicies), ctx, info)
}

// Policy mocks base method
func (m *MockManager) Policy(ctx context.Context, name string) (*types.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Policy", ctx, name)
	ret0, _ := ret[0].(*types.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Policy indicates an expected call of Policy
func (mr *MockManagerMockRecorder) Policy(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Policy", reflect.TypeOf((*MockManager)(nil).Policy), ctx, name)
}

// Permissions mocks base method
func (m *MockManager) Policies(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Permissions", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Permissions indicates an expected call of Permissions
func (mr *MockManagerMockRecorder) Policies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Permissions", reflect.TypeOf((*MockManager)(nil).Policies), arg0)
}

// Role mocks base method
func (m *MockManager) Group(ctx context.Context, name string) (*types.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Role", ctx, name)
	ret0, _ := ret[0].(*types.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Role indicates an expected call of Role
func (mr *MockManagerMockRecorder) Group(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Role", reflect.TypeOf((*MockManager)(nil).Group), ctx, name)
}

// Roles mocks base method
func (m *MockManager) Groups(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Roles", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Roles indicates an expected call of Roles
func (mr *MockManagerMockRecorder) Groups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Roles", reflect.TypeOf((*MockManager)(nil).Groups), arg0)
}
