// Code generated by MockGen. DO NOT EDIT.
// Source: db.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDB is a mock of DB interface
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// GetID mocks base method
func (m *MockDB) GetID(addr string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID", addr)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetID indicates an expected call of GetID
func (mr *MockDBMockRecorder) GetID(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockDB)(nil).GetID), addr)
}

// GetDeletedID mocks base method
func (m *MockDB) GetDeletedID(addr string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeletedID", addr)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeletedID indicates an expected call of GetDeletedID
func (mr *MockDBMockRecorder) GetDeletedID(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeletedID", reflect.TypeOf((*MockDB)(nil).GetDeletedID), addr)
}

// AddID mocks base method
func (m *MockDB) AddID(addr, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddID", addr, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddID indicates an expected call of AddID
func (mr *MockDBMockRecorder) AddID(addr, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddID", reflect.TypeOf((*MockDB)(nil).AddID), addr, id)
}

// AddDeletedID mocks base method
func (m *MockDB) AddDeletedID(addr, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDeletedID", addr, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDeletedID indicates an expected call of AddDeletedID
func (mr *MockDBMockRecorder) AddDeletedID(addr, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDeletedID", reflect.TypeOf((*MockDB)(nil).AddDeletedID), addr, id)
}

// RemoveID mocks base method
func (m *MockDB) RemoveID(addr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveID", addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveID indicates an expected call of RemoveID
func (mr *MockDBMockRecorder) RemoveID(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveID", reflect.TypeOf((*MockDB)(nil).RemoveID), addr)
}

// RemoveDeletedID mocks base method
func (m *MockDB) RemoveDeletedID(addr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDeletedID", addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDeletedID indicates an expected call of RemoveDeletedID
func (mr *MockDBMockRecorder) RemoveDeletedID(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDeletedID", reflect.TypeOf((*MockDB)(nil).RemoveDeletedID), addr)
}

// MockETH1Accounts is a mock of ETH1Accounts interface
type MockETH1Accounts struct {
	ctrl     *gomock.Controller
	recorder *MockETH1AccountsMockRecorder
}

// MockETH1AccountsMockRecorder is the mock recorder for MockETH1Accounts
type MockETH1AccountsMockRecorder struct {
	mock *MockETH1Accounts
}

// NewMockETH1Accounts creates a new mock instance
func NewMockETH1Accounts(ctrl *gomock.Controller) *MockETH1Accounts {
	mock := &MockETH1Accounts{ctrl: ctrl}
	mock.recorder = &MockETH1AccountsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockETH1Accounts) EXPECT() *MockETH1AccountsMockRecorder {
	return m.recorder
}

// GetID mocks base method
func (m *MockETH1Accounts) GetID(addr string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID", addr)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetID indicates an expected call of GetID
func (mr *MockETH1AccountsMockRecorder) GetID(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockETH1Accounts)(nil).GetID), addr)
}

// GetDeletedID mocks base method
func (m *MockETH1Accounts) GetDeletedID(addr string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeletedID", addr)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeletedID indicates an expected call of GetDeletedID
func (mr *MockETH1AccountsMockRecorder) GetDeletedID(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeletedID", reflect.TypeOf((*MockETH1Accounts)(nil).GetDeletedID), addr)
}

// AddID mocks base method
func (m *MockETH1Accounts) AddID(addr, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddID", addr, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddID indicates an expected call of AddID
func (mr *MockETH1AccountsMockRecorder) AddID(addr, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddID", reflect.TypeOf((*MockETH1Accounts)(nil).AddID), addr, id)
}

// AddDeletedID mocks base method
func (m *MockETH1Accounts) AddDeletedID(addr, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDeletedID", addr, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDeletedID indicates an expected call of AddDeletedID
func (mr *MockETH1AccountsMockRecorder) AddDeletedID(addr, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDeletedID", reflect.TypeOf((*MockETH1Accounts)(nil).AddDeletedID), addr, id)
}

// RemoveID mocks base method
func (m *MockETH1Accounts) RemoveID(addr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveID", addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveID indicates an expected call of RemoveID
func (mr *MockETH1AccountsMockRecorder) RemoveID(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveID", reflect.TypeOf((*MockETH1Accounts)(nil).RemoveID), addr)
}

// RemoveDeletedID mocks base method
func (m *MockETH1Accounts) RemoveDeletedID(addr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDeletedID", addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDeletedID indicates an expected call of RemoveDeletedID
func (mr *MockETH1AccountsMockRecorder) RemoveDeletedID(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDeletedID", reflect.TypeOf((*MockETH1Accounts)(nil).RemoveDeletedID), addr)
}
