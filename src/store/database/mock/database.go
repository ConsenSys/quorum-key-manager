// Code generated by MockGen. DO NOT EDIT.
// Source: database.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	database "github.com/ConsenSysQuorum/quorum-key-manager/src/store/database"
	entities "github.com/ConsenSysQuorum/quorum-key-manager/src/store/entities"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// ETH1Accounts mocks base method
func (m *MockDatabase) ETH1Accounts() database.ETH1Accounts {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETH1Accounts")
	ret0, _ := ret[0].(database.ETH1Accounts)
	return ret0
}

// ETH1Accounts indicates an expected call of ETH1Accounts
func (mr *MockDatabaseMockRecorder) ETH1Accounts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETH1Accounts", reflect.TypeOf((*MockDatabase)(nil).ETH1Accounts))
}

// MockETH1Accounts is a mock of ETH1Accounts interface
type MockETH1Accounts struct {
	ctrl     *gomock.Controller
	recorder *MockETH1AccountsMockRecorder
}

// MockETH1AccountsMockRecorder is the mock recorder for MockETH1Accounts
type MockETH1AccountsMockRecorder struct {
	mock *MockETH1Accounts
}

// NewMockETH1Accounts creates a new mock instance
func NewMockETH1Accounts(ctrl *gomock.Controller) *MockETH1Accounts {
	mock := &MockETH1Accounts{ctrl: ctrl}
	mock.recorder = &MockETH1AccountsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockETH1Accounts) EXPECT() *MockETH1AccountsMockRecorder {
	return m.recorder
}

// GetAccount mocks base method
func (m *MockETH1Accounts) GetAccount(ctx context.Context, addr string) (*entities.ETH1Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, addr)
	ret0, _ := ret[0].(*entities.ETH1Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockETH1AccountsMockRecorder) GetAccount(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockETH1Accounts)(nil).GetAccount), ctx, addr)
}

// GetDeletedAccount mocks base method
func (m *MockETH1Accounts) GetDeletedAccount(ctx context.Context, addr string) (*entities.ETH1Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeletedAccount", ctx, addr)
	ret0, _ := ret[0].(*entities.ETH1Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeletedAccount indicates an expected call of GetDeletedAccount
func (mr *MockETH1AccountsMockRecorder) GetDeletedAccount(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeletedAccount", reflect.TypeOf((*MockETH1Accounts)(nil).GetDeletedAccount), ctx, addr)
}

// GetAllAccounts mocks base method
func (m *MockETH1Accounts) GetAllAccounts(ctx context.Context) ([]*entities.ETH1Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAccounts", ctx)
	ret0, _ := ret[0].([]*entities.ETH1Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAccounts indicates an expected call of GetAllAccounts
func (mr *MockETH1AccountsMockRecorder) GetAllAccounts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAccounts", reflect.TypeOf((*MockETH1Accounts)(nil).GetAllAccounts), ctx)
}

// GetAllDeletedAccounts mocks base method
func (m *MockETH1Accounts) GetAllDeletedAccounts(ctx context.Context) ([]*entities.ETH1Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDeletedAccounts", ctx)
	ret0, _ := ret[0].([]*entities.ETH1Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDeletedAccounts indicates an expected call of GetAllDeletedAccounts
func (mr *MockETH1AccountsMockRecorder) GetAllDeletedAccounts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDeletedAccounts", reflect.TypeOf((*MockETH1Accounts)(nil).GetAllDeletedAccounts), ctx)
}

// AddAccount mocks base method
func (m *MockETH1Accounts) AddAccount(ctx context.Context, account *entities.ETH1Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccount", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAccount indicates an expected call of AddAccount
func (mr *MockETH1AccountsMockRecorder) AddAccount(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccount", reflect.TypeOf((*MockETH1Accounts)(nil).AddAccount), ctx, account)
}

// AddDeletedAccount mocks base method
func (m *MockETH1Accounts) AddDeletedAccount(ctx context.Context, account *entities.ETH1Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDeletedAccount", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDeletedAccount indicates an expected call of AddDeletedAccount
func (mr *MockETH1AccountsMockRecorder) AddDeletedAccount(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDeletedAccount", reflect.TypeOf((*MockETH1Accounts)(nil).AddDeletedAccount), ctx, account)
}

// RemoveAccount mocks base method
func (m *MockETH1Accounts) RemoveAccount(ctx context.Context, addr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAccount", ctx, addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAccount indicates an expected call of RemoveAccount
func (mr *MockETH1AccountsMockRecorder) RemoveAccount(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccount", reflect.TypeOf((*MockETH1Accounts)(nil).RemoveAccount), ctx, addr)
}

// RemoveDeletedAccount mocks base method
func (m *MockETH1Accounts) RemoveDeletedAccount(ctx context.Context, addr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDeletedAccount", ctx, addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDeletedAccount indicates an expected call of RemoveDeletedAccount
func (mr *MockETH1AccountsMockRecorder) RemoveDeletedAccount(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDeletedAccount", reflect.TypeOf((*MockETH1Accounts)(nil).RemoveDeletedAccount), ctx, addr)
}
