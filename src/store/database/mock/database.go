// Code generated by MockGen. DO NOT EDIT.
// Source: database.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// GetID mocks base method
func (m *MockDatabase) GetID(ctx context.Context, addr string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID", ctx, addr)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetID indicates an expected call of GetID
func (mr *MockDatabaseMockRecorder) GetID(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockDatabase)(nil).GetID), ctx, addr)
}

// GetDeletedID mocks base method
func (m *MockDatabase) GetDeletedID(ctx context.Context, addr string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeletedID", ctx, addr)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeletedID indicates an expected call of GetDeletedID
func (mr *MockDatabaseMockRecorder) GetDeletedID(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeletedID", reflect.TypeOf((*MockDatabase)(nil).GetDeletedID), ctx, addr)
}

// GetAll mocks base method
func (m *MockDatabase) GetAll(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockDatabaseMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDatabase)(nil).GetAll), ctx)
}

// GetAllDeleted mocks base method
func (m *MockDatabase) GetAllDeleted(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDeleted", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDeleted indicates an expected call of GetAllDeleted
func (mr *MockDatabaseMockRecorder) GetAllDeleted(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDeleted", reflect.TypeOf((*MockDatabase)(nil).GetAllDeleted), ctx)
}

// GetAllIDs mocks base method
func (m *MockDatabase) GetAllIDs(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllIDs", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllIDs indicates an expected call of GetAllIDs
func (mr *MockDatabaseMockRecorder) GetAllIDs(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllIDs", reflect.TypeOf((*MockDatabase)(nil).GetAllIDs), ctx)
}

// AddID mocks base method
func (m *MockDatabase) AddID(ctx context.Context, addr, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddID", ctx, addr, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddID indicates an expected call of AddID
func (mr *MockDatabaseMockRecorder) AddID(ctx, addr, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddID", reflect.TypeOf((*MockDatabase)(nil).AddID), ctx, addr, id)
}

// AddDeletedID mocks base method
func (m *MockDatabase) AddDeletedID(ctx context.Context, addr, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDeletedID", ctx, addr, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDeletedID indicates an expected call of AddDeletedID
func (mr *MockDatabaseMockRecorder) AddDeletedID(ctx, addr, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDeletedID", reflect.TypeOf((*MockDatabase)(nil).AddDeletedID), ctx, addr, id)
}

// RemoveID mocks base method
func (m *MockDatabase) RemoveID(ctx context.Context, addr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveID", ctx, addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveID indicates an expected call of RemoveID
func (mr *MockDatabaseMockRecorder) RemoveID(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveID", reflect.TypeOf((*MockDatabase)(nil).RemoveID), ctx, addr)
}

// RemoveDeletedID mocks base method
func (m *MockDatabase) RemoveDeletedID(ctx context.Context, addr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDeletedID", ctx, addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDeletedID indicates an expected call of RemoveDeletedID
func (mr *MockDatabaseMockRecorder) RemoveDeletedID(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDeletedID", reflect.TypeOf((*MockDatabase)(nil).RemoveDeletedID), ctx, addr)
}
