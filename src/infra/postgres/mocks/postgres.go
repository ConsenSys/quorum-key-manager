// Code generated by MockGen. DO NOT EDIT.
// Source: postgres.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	postgres "github.com/consensys/quorum-key-manager/src/infra/postgres"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// DeletePK mocks base method.
func (m *MockClient) DeletePK(ctx context.Context, model ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range model {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePK", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePK indicates an expected call of DeletePK.
func (mr *MockClientMockRecorder) DeletePK(ctx interface{}, model ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, model...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePK", reflect.TypeOf((*MockClient)(nil).DeletePK), varargs...)
}

// ForceDeletePK mocks base method.
func (m *MockClient) ForceDeletePK(ctx context.Context, model ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range model {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ForceDeletePK", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForceDeletePK indicates an expected call of ForceDeletePK.
func (mr *MockClientMockRecorder) ForceDeletePK(ctx interface{}, model ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, model...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceDeletePK", reflect.TypeOf((*MockClient)(nil).ForceDeletePK), varargs...)
}

// Insert mocks base method.
func (m *MockClient) Insert(ctx context.Context, model ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range model {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Insert", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockClientMockRecorder) Insert(ctx interface{}, model ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, model...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockClient)(nil).Insert), varargs...)
}

// RunInTransaction mocks base method.
func (m *MockClient) RunInTransaction(ctx context.Context, persist func(postgres.Client) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunInTransaction", ctx, persist)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunInTransaction indicates an expected call of RunInTransaction.
func (mr *MockClientMockRecorder) RunInTransaction(ctx, persist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInTransaction", reflect.TypeOf((*MockClient)(nil).RunInTransaction), ctx, persist)
}

// Select mocks base method.
func (m *MockClient) Select(ctx context.Context, model ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range model {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockClientMockRecorder) Select(ctx interface{}, model ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, model...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockClient)(nil).Select), varargs...)
}

// SelectDeleted mocks base method.
func (m *MockClient) SelectDeleted(ctx context.Context, model ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range model {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectDeleted", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectDeleted indicates an expected call of SelectDeleted.
func (mr *MockClientMockRecorder) SelectDeleted(ctx interface{}, model ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, model...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectDeleted", reflect.TypeOf((*MockClient)(nil).SelectDeleted), varargs...)
}

// SelectDeletedPK mocks base method.
func (m *MockClient) SelectDeletedPK(ctx context.Context, model ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range model {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectDeletedPK", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectDeletedPK indicates an expected call of SelectDeletedPK.
func (mr *MockClientMockRecorder) SelectDeletedPK(ctx interface{}, model ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, model...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectDeletedPK", reflect.TypeOf((*MockClient)(nil).SelectDeletedPK), varargs...)
}

// SelectPK mocks base method.
func (m *MockClient) SelectPK(ctx context.Context, model ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range model {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectPK", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectPK indicates an expected call of SelectPK.
func (mr *MockClientMockRecorder) SelectPK(ctx interface{}, model ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, model...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectPK", reflect.TypeOf((*MockClient)(nil).SelectPK), varargs...)
}

// SelectWhere mocks base method.
func (m *MockClient) SelectWhere(ctx context.Context, model interface{}, where string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, model, where}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectWhere", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectWhere indicates an expected call of SelectWhere.
func (mr *MockClientMockRecorder) SelectWhere(ctx, model, where interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, model, where}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectWhere", reflect.TypeOf((*MockClient)(nil).SelectWhere), varargs...)
}

// UpdatePK mocks base method.
func (m *MockClient) UpdatePK(ctx context.Context, model ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range model {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePK", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePK indicates an expected call of UpdatePK.
func (mr *MockClientMockRecorder) UpdatePK(ctx interface{}, model ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, model...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePK", reflect.TypeOf((*MockClient)(nil).UpdatePK), varargs...)
}
