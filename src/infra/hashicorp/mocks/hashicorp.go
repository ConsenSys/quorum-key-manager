// Code generated by MockGen. DO NOT EDIT.
// Source: hashicorp.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	api "github.com/hashicorp/vault/api"
	reflect "reflect"
)

// MockVaultClient is a mock of VaultClient interface
type MockVaultClient struct {
	ctrl     *gomock.Controller
	recorder *MockVaultClientMockRecorder
}

// MockVaultClientMockRecorder is the mock recorder for MockVaultClient
type MockVaultClientMockRecorder struct {
	mock *MockVaultClient
}

// NewMockVaultClient creates a new mock instance
func NewMockVaultClient(ctrl *gomock.Controller) *MockVaultClient {
	mock := &MockVaultClient{ctrl: ctrl}
	mock.recorder = &MockVaultClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVaultClient) EXPECT() *MockVaultClientMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockVaultClient) Read(path string, data map[string][]string) (*api.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", path, data)
	ret0, _ := ret[0].(*api.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockVaultClientMockRecorder) Read(path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockVaultClient)(nil).Read), path, data)
}

// Write mocks base method
func (m *MockVaultClient) Write(path string, data map[string]interface{}) (*api.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", path, data)
	ret0, _ := ret[0].(*api.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockVaultClientMockRecorder) Write(path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockVaultClient)(nil).Write), path, data)
}

// WritePost mocks base method
func (m *MockVaultClient) WritePost(path string, data map[string][]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WritePost", path, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WritePost indicates an expected call of WritePost
func (mr *MockVaultClientMockRecorder) WritePost(path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WritePost", reflect.TypeOf((*MockVaultClient)(nil).WritePost), path, data)
}

// Delete mocks base method
func (m *MockVaultClient) Delete(path string, data map[string][]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", path, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockVaultClientMockRecorder) Delete(path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVaultClient)(nil).Delete), path, data)
}

// List mocks base method
func (m *MockVaultClient) List(path string) (*api.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", path)
	ret0, _ := ret[0].(*api.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockVaultClientMockRecorder) List(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVaultClient)(nil).List), path)
}

// SetToken mocks base method
func (m *MockVaultClient) SetToken(token string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetToken", token)
}

// SetToken indicates an expected call of SetToken
func (mr *MockVaultClientMockRecorder) SetToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetToken", reflect.TypeOf((*MockVaultClient)(nil).SetToken), token)
}

// UnwrapToken mocks base method
func (m *MockVaultClient) UnwrapToken(token string) (*api.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnwrapToken", token)
	ret0, _ := ret[0].(*api.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnwrapToken indicates an expected call of UnwrapToken
func (mr *MockVaultClientMockRecorder) UnwrapToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnwrapToken", reflect.TypeOf((*MockVaultClient)(nil).UnwrapToken), token)
}

// Mount mocks base method
func (m *MockVaultClient) Mount(path string, mountInfo *api.MountInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mount", path, mountInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mount indicates an expected call of Mount
func (mr *MockVaultClientMockRecorder) Mount(path, mountInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mount", reflect.TypeOf((*MockVaultClient)(nil).Mount), path, mountInfo)
}

// HealthCheck mocks base method
func (m *MockVaultClient) HealthCheck() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck")
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck
func (mr *MockVaultClientMockRecorder) HealthCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockVaultClient)(nil).HealthCheck))
}
