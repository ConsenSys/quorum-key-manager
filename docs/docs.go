// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "Business Source License 1.1",
            "url": "https://mariadb.com/bsl11/"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/stores/{storeName}/eth1": {
            "post": {
                "description": "This will create a new ECDSA Secp256k1 key represented by an ethereum account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create ethereum account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store name identifier",
                        "name": "storeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Create ethereum account request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateEth1AccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Created ethereum account",
                        "schema": {
                            "$ref": "#/definitions/types.Eth1AccountResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "types.CreateEth1AccountRequest": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "example": "my-account"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "types.Eth1AccountResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "example": "0x664895b5fE3ddf049d2Fb508cfA03923859763C6"
                },
                "compressedPublicKey": {
                    "type": "string",
                    "example": "1abae27a0cbfb02945720425d3b80c7e09728534"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "deletedAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "destroyedAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "disabled": {
                    "type": "boolean",
                    "example": false
                },
                "expireAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "id": {
                    "type": "string",
                    "example": "my-key-id"
                },
                "publicKey": {
                    "type": "string",
                    "example": "048e66b3e549818ea2cb354fb70749f6c8de8fa484f7530fc447d5fe80a1c424e4f5ae648d648c980ae7095d1efad87161d83886ca4b6c498ac22a93da5099014a"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "BasicAuth": {
            "type": "basic"
        },
        "OAuth2AccessCode": {
            "type": "oauth2",
            "flow": "accessCode",
            "authorizationUrl": "https://example.com/oauth/authorize",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": " Grants read and write access to administrative information"
            }
        },
        "OAuth2Application": {
            "type": "oauth2",
            "flow": "application",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": " Grants read and write access to administrative information",
                "write": " Grants write access"
            }
        },
        "OAuth2Implicit": {
            "type": "oauth2",
            "flow": "implicit",
            "authorizationUrl": "https://example.com/oauth/authorize",
            "scopes": {
                "admin": " Grants read and write access to administrative information",
                "write": " Grants write access"
            }
        },
        "OAuth2Password": {
            "type": "oauth2",
            "flow": "password",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": " Grants read and write access to administrative information",
                "read": " Grants read access",
                "write": " Grants write access"
            }
        }
    },
    "x-extension-openapi": {
        "example": "value on a json format"
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.1",
	Host:        "localhost:8080",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "Quorum Key Manager API",
	Description: "Quorum Key Manager API server documentation.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
