basePath: /
definitions:
  types.CreateEth1AccountRequest:
    properties:
      id:
        example: my-account
        type: string
      tags:
        additionalProperties:
          type: string
        type: object
    required:
    - id
    type: object
  types.Eth1AccountResponse:
    properties:
      address:
        example: 0x664895b5fE3ddf049d2Fb508cfA03923859763C6
        type: string
      compressedPublicKey:
        example: 1abae27a0cbfb02945720425d3b80c7e09728534
        type: string
      createdAt:
        example: "2020-07-09T12:35:42.115395Z"
        type: string
      deletedAt:
        example: "2020-07-09T12:35:42.115395Z"
        type: string
      destroyedAt:
        example: "2020-07-09T12:35:42.115395Z"
        type: string
      disabled:
        example: false
        type: boolean
      expireAt:
        example: "2020-07-09T12:35:42.115395Z"
        type: string
      id:
        example: my-key-id
        type: string
      publicKey:
        example: 048e66b3e549818ea2cb354fb70749f6c8de8fa484f7530fc447d5fe80a1c424e4f5ae648d648c980ae7095d1efad87161d83886ca4b6c498ac22a93da5099014a
        type: string
      tags:
        additionalProperties:
          type: string
        type: object
      updatedAt:
        example: "2020-07-09T12:35:42.115395Z"
        type: string
    type: object
  types.ImportEth1AccountRequest:
    properties:
      id:
        example: my-imported-account
        type: string
      privateKey:
        example: 56202652FDFFD802B7252A456DBD8F3ECC0352BBDE76C23B40AFE8AEBD714E2E
        type: string
      tags:
        additionalProperties:
          type: string
        type: object
    required:
    - id
    - privateKey
    type: object
  types.SignHexPayloadRequest:
    properties:
      data:
        description: required to be hex value
        example: "0xfeee"
        type: string
    required:
    - data
    type: object
  types.UpdateEth1AccountRequest:
    properties:
      tags:
        additionalProperties:
          type: string
        type: object
    type: object
host: localhost:8080
info:
  contact: {}
  description: Quorum Key Manager API server documentation.
  license:
    name: Business Source License 1.1
    url: https://mariadb.com/bsl11/
  title: Quorum Key Manager API
  version: "0.1"
paths:
  /stores/{storeName}/eth1:
    post:
      consumes:
      - application/json
      description: Creates a new ECDSA Secp256k1 key representing an ethereum account
      parameters:
      - description: Target Store Name
        in: path
        name: storeName
        required: true
        type: string
      - description: Create ethereum account request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.CreateEth1AccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Created ethereum account
          schema:
            $ref: '#/definitions/types.Eth1AccountResponse'
      summary: Create ethereum account
  /stores/{storeName}/eth1/{address}:
    patch:
      consumes:
      - application/json
      description: Update ethereum account metadata
      parameters:
      - description: Target Store Name
        in: path
        name: storeName
        required: true
        type: string
      - description: Ethereum address to update
        in: path
        name: address
        required: true
        type: string
      - description: Update ethereum account metadata request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.UpdateEth1AccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Update ethereum account
          schema:
            $ref: '#/definitions/types.Eth1AccountResponse'
      summary: Update ethereum account
  /stores/{storeName}/eth1/{address}/sign:
    patch:
      consumes:
      - application/json
      description: Sign random hex payload with stored ethereum account
      parameters:
      - description: Target Store Name
        in: path
        name: storeName
        required: true
        type: string
      - description: Ethereum address to update
        in: path
        name: address
        required: true
        type: string
      - description: Sign payload request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.SignHexPayloadRequest'
      produces:
      - text/plain
      responses:
        "200":
          description: Signed payload data
          schema:
            type: string
      summary: Sign payload with ethereum account
  /stores/{storeName}/eth1/import:
    post:
      consumes:
      - application/json
      description: Import an ECDSA Secp256k1 key representing an ethereum account
      parameters:
      - description: Target Store Name
        in: path
        name: storeName
        required: true
        type: string
      - description: Create ethereum account request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.ImportEth1AccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Created ethereum account
          schema:
            $ref: '#/definitions/types.Eth1AccountResponse'
      summary: Import ethereum account
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
x-extension-openapi:
  example: value on a json format
