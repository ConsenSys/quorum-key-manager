{"swagger":"2.0","info":{"description":"Quorum Key Manager API server documentation.","title":"Quorum Key Manager API","contact":{},"license":{"name":"Business Source License 1.1","url":"https://mariadb.com/bsl11/"},"version":"21.7.0-alpha.3"},"host":"https://consensys.github.io/quorum-key-manager","basePath":"/","paths":{"/registries/{registry_name}":{"delete":{"description":"Delete a registry and all its keys","tags":["Registries"],"summary":"Delete a registry","parameters":[{"type":"string","description":"registry identifier","name":"registry_name","in":"path","required":true}],"responses":{"204":{"description":"Deleted successfully"},"400":{"description":"Invalid request format","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"404":{"description":"Registry not found","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}}},"/registries/{registry_name}/aliases":{"get":{"description":"Get all the aliases in a registry","produces":["application/json"],"tags":["Aliases"],"summary":"Get all the aliases in a registry","parameters":[{"type":"string","description":"registry identifier","name":"registry_name","in":"path","required":true},{"type":"string","description":"alias identifier","name":"alias_key","in":"path","required":true}],"responses":{"200":{"description":"a list of Aliases","schema":{"type":"array","items":{"$ref":"#/definitions/types.Alias"}}},"400":{"description":"Invalid request format","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}}},"/registries/{registry_name}/aliases/{alias_key}":{"get":{"description":"Get an alias of a key from a dedicated alias registry","produces":["application/json"],"tags":["Aliases"],"summary":"Get an alias","parameters":[{"type":"string","description":"registry identifier","name":"registry_name","in":"path","required":true},{"type":"string","description":"alias identifier","name":"alias_key","in":"path","required":true}],"responses":{"200":{"description":"Alias data","schema":{"$ref":"#/definitions/types.AliasResponse"}},"400":{"description":"Invalid request format","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"404":{"description":"Alias not found","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}},"put":{"description":"Update an alias of a key from a dedicated alias registry","consumes":["application/json"],"produces":["application/json"],"tags":["Aliases"],"summary":"Update an alias","parameters":[{"type":"string","description":"registry identifier","name":"registry_name","in":"path","required":true},{"type":"string","description":"alias identifier","name":"alias_key","in":"path","required":true},{"description":"Update Alias Request","name":"request","in":"body","required":true,"schema":{"$ref":"#/definitions/types.AliasRequest"}}],"responses":{"200":{"description":"Alias data","schema":{"$ref":"#/definitions/types.AliasResponse"}},"400":{"description":"Invalid request format","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"404":{"description":"Alias not found","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}},"post":{"description":"Create an alias of a key in a dedicated alias registry","consumes":["application/json"],"produces":["application/json"],"tags":["Aliases"],"summary":"Creates an alias","parameters":[{"type":"string","description":"registry identifier","name":"registry_name","in":"path","required":true},{"type":"string","description":"alias identifier","name":"alias_key","in":"path","required":true},{"description":"Create Alias Request","name":"request","in":"body","required":true,"schema":{"$ref":"#/definitions/types.AliasRequest"}}],"responses":{"200":{"description":"Alias data","schema":{"$ref":"#/definitions/types.AliasResponse"}},"400":{"description":"Invalid request format","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}},"delete":{"description":"Delete an alias of a key from a dedicated alias registry","tags":["Aliases"],"summary":"Delete an alias","parameters":[{"type":"string","description":"registry identifier","name":"registry_name","in":"path","required":true},{"type":"string","description":"alias identifier","name":"alias_key","in":"path","required":true}],"responses":{"204":{"description":"Deleted successfully"},"400":{"description":"Invalid request format","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"404":{"description":"Alias not found","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}}},"/stores/{storeName}/ethereum":{"get":{"description":"List Ethereum account's addresses allocated in the selected Store","consumes":["application/json"],"produces":["application/json"],"tags":["Ethereum"],"summary":"List Ethereum accounts","parameters":[{"type":"string","description":"Store Identifier","name":"storeName","in":"path","required":true},{"type":"boolean","description":"filter by only deleted accounts","name":"deleted","in":"query"},{"type":"string","description":"Chain UUID","name":"chain_uuid","in":"query"},{"type":"integer","description":"page size","name":"limit","in":"query"},{"type":"integer","description":"page number","name":"page","in":"query"}],"responses":{"200":{"description":"Ethereum Account list","schema":{"type":"array","items":{"$ref":"#/definitions/handlers.PageResponse"}}},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"403":{"description":"Forbidden","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}},"post":{"description":"Create a new ECDSA Secp256k1 key representing an Ethereum Account","consumes":["application/json"],"produces":["application/json"],"tags":["Ethereum"],"summary":"Create Ethereum Account","parameters":[{"type":"string","description":"Store Identifier","name":"storeName","in":"path","required":true},{"description":"Create Ethereum Account request","name":"request","in":"body","required":true,"schema":{"$ref":"#/definitions/types.CreateEthAccountRequest"}}],"responses":{"200":{"description":"Created Ethereum Account","schema":{"$ref":"#/definitions/types.EthAccountResponse"}},"400":{"description":"Invalid request format","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"403":{"description":"Forbidden","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"404":{"description":"Store not found","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}}},"/stores/{storeName}/ethereum/ec-recover":{"post":{"description":"Recover an Ethereum transaction sender from a signature","consumes":["application/json"],"produces":["text/plain"],"tags":["Ethereum Utils"],"summary":"EC Recover","parameters":[{"type":"string","description":"Store Identifier","name":"storeName","in":"path","required":true},{"type":"string","description":"Ethereum address","name":"address","in":"path","required":true},{"description":"Ethereum recover request","name":"request","in":"body","required":true,"schema":{"$ref":"#/definitions/types.ECRecoverRequest"}}],"responses":{"200":{"description":"Recovered sender address","schema":{"type":"string"}},"400":{"description":"Invalid request format","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}}},"/stores/{storeName}/ethereum/import":{"post":{"description":"Import an ECDSA Secp256k1 key representing an Ethereum account","consumes":["application/json"],"produces":["application/json"],"tags":["Ethereum"],"summary":"Import Ethereum Account","parameters":[{"type":"string","description":"Store Identifier","name":"storeName","in":"path","required":true},{"description":"Create Ethereum Account request","name":"request","in":"body","required":true,"schema":{"$ref":"#/definitions/types.ImportEthAccountRequest"}}],"responses":{"200":{"description":"Created Ethereum Account","schema":{"$ref":"#/definitions/types.EthAccountResponse"}},"400":{"description":"Invalid request format","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"403":{"description":"Forbidden","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"404":{"description":"Store not found","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}}},"/stores/{storeName}/ethereum/verify-message":{"post":{"description":"Verify the signature of a message signed using standard format EIP-191","consumes":["application/json"],"tags":["Ethereum Utils"],"summary":"Verify message signature (EIP-191)","parameters":[{"type":"string","description":"Store Identifier","name":"storeName","in":"path","required":true},{"type":"string","description":"Ethereum address","name":"address","in":"path","required":true},{"description":"Ethereum signature verify request","name":"request","in":"body","required":true,"schema":{"$ref":"#/definitions/types.VerifyRequest"}}],"responses":{"204":{"description":"Successful verification"},"422":{"description":"Cannot verify signature","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}}},"/stores/{storeName}/ethereum/verify-typed-data":{"post":{"description":"Verify the signature of an Ethereum typed data using format defined at EIP-712","consumes":["application/json"],"tags":["Ethereum Utils"],"summary":"Verify typed data signature (EIP-712)","parameters":[{"type":"string","description":"Store Identifier","name":"storeName","in":"path","required":true},{"type":"string","description":"Ethereum address","name":"address","in":"path","required":true},{"description":"Typed data request to verify","name":"request","in":"body","required":true,"schema":{"$ref":"#/definitions/types.VerifyTypedDataRequest"}}],"responses":{"204":{"description":"Successful verification"},"422":{"description":"Cannot verify signature","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}}},"/stores/{storeName}/ethereum/{address}":{"get":{"description":"Fetch an Ethereum Account data by its address","consumes":["application/json"],"produces":["application/json"],"tags":["Ethereum"],"summary":"Get Ethereum Account","parameters":[{"type":"string","description":"Store Identifier","name":"storeName","in":"path","required":true},{"type":"string","description":"Ethereum address","name":"address","in":"path","required":true},{"type":"boolean","description":"filter by only deleted accounts","name":"deleted","in":"query"}],"responses":{"200":{"description":"Ethereum Account data","schema":{"$ref":"#/definitions/types.EthAccountResponse"}},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"403":{"description":"Forbidden","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"404":{"description":"Store/Account not found","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}},"delete":{"description":"Soft delete an Ethereum Account, can be recovered","consumes":["application/json"],"tags":["Ethereum"],"summary":"Delete Ethereum Account","parameters":[{"type":"string","description":"Store Identifier","name":"storeName","in":"path","required":true},{"type":"string","description":"Ethereum address","name":"address","in":"path","required":true}],"responses":{"204":{"description":"Deleted successfully"},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"403":{"description":"Forbidden","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"404":{"description":"Store/Account not found","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}},"patch":{"description":"Update Ethereum Account metadata","consumes":["application/json"],"produces":["application/json"],"tags":["Ethereum"],"summary":"Update Ethereum Account","parameters":[{"type":"string","description":"Store Identifier","name":"storeName","in":"path","required":true},{"type":"string","description":"Ethereum address","name":"address","in":"path","required":true},{"description":"Update Ethereum Account metadata request","name":"request","in":"body","required":true,"schema":{"$ref":"#/definitions/types.UpdateEthAccountRequest"}}],"responses":{"200":{"description":"Update Ethereum Account","schema":{"$ref":"#/definitions/types.EthAccountResponse"}},"400":{"description":"Invalid request format","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"403":{"description":"Forbidden","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"404":{"description":"Store/Account not found","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}}},"/stores/{storeName}/ethereum/{address}/destroy":{"delete":{"description":"Hard delete an Ethereum Account, cannot be recovered","consumes":["application/json"],"tags":["Ethereum"],"summary":"Destroy Ethereum Account","parameters":[{"type":"string","description":"Store Identifier","name":"storeName","in":"path","required":true},{"type":"string","description":"Ethereum address","name":"address","in":"path","required":true}],"responses":{"204":{"description":"Destroyed successfully"},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"403":{"description":"Forbidden","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"404":{"description":"Store/Account not found","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}}},"/stores/{storeName}/ethereum/{address}/restore":{"put":{"description":"Recover a soft-deleted Ethereum Account","consumes":["application/json"],"tags":["Ethereum"],"summary":"Restore Ethereum Account","parameters":[{"type":"string","description":"Store Identifier","name":"storeName","in":"path","required":true},{"type":"string","description":"Ethereum address","name":"address","in":"path","required":true}],"responses":{"204":{"description":"Restored successfully"},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"403":{"description":"Forbidden","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"404":{"description":"Store/Account not found","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}}},"/stores/{storeName}/ethereum/{address}/sign-eea-transaction":{"post":{"description":"Sign an EEA transaction using the selected Ethereum Account","consumes":["application/json"],"produces":["text/plain"],"tags":["Ethereum"],"summary":"Sign EEA transaction","parameters":[{"type":"string","description":"Store Identifier","name":"storeName","in":"path","required":true},{"type":"string","description":"Ethereum address","name":"address","in":"path","required":true},{"description":"Sign EEA transaction request","name":"request","in":"body","required":true,"schema":{"$ref":"#/definitions/types.SignEEATransactionRequest"}}],"responses":{"200":{"description":"Signed EEA transaction signature","schema":{"type":"string"}},"400":{"description":"Invalid request format","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"403":{"description":"Forbidden","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"404":{"description":"Store/Account not found","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}}},"/stores/{storeName}/ethereum/{address}/sign-message":{"post":{"description":"Sign a message, following EIP-191, using an existing Ethereum Account","consumes":["application/json"],"produces":["text/plain"],"tags":["Ethereum"],"summary":"Sign a message (EIP-191)","parameters":[{"type":"string","description":"Store Identifier","name":"storeName","in":"path","required":true},{"type":"string","description":"Ethereum address","name":"address","in":"path","required":true},{"description":"Sign message request","name":"request","in":"body","required":true,"schema":{"$ref":"#/definitions/types.SignMessageRequest"}}],"responses":{"200":{"description":"Signed payload signature","schema":{"type":"string"}},"400":{"description":"Invalid request format","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"403":{"description":"Forbidden","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"404":{"description":"Store/Account not found","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}}},"/stores/{storeName}/ethereum/{address}/sign-quorum-private-transaction":{"post":{"description":"Sign a Quorum private transaction using the selected Ethereum Account","consumes":["application/json"],"produces":["text/plain"],"tags":["Ethereum"],"summary":"Sign Quorum private transaction","parameters":[{"type":"string","description":"Store Identifier","name":"storeName","in":"path","required":true},{"type":"string","description":"Ethereum address","name":"address","in":"path","required":true},{"description":"Sign Quorum transaction request","name":"request","in":"body","required":true,"schema":{"$ref":"#/definitions/types.SignQuorumPrivateTransactionRequest"}}],"responses":{"200":{"description":"Signed Quorum private transaction signature","schema":{"type":"string"}},"400":{"description":"Invalid request format","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"403":{"description":"Forbidden","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"404":{"description":"Store/Account not found","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}}},"/stores/{storeName}/ethereum/{address}/sign-transaction":{"post":{"description":"Sign an Ethereum transaction using the selected Ethereum Account","consumes":["application/json"],"produces":["text/plain"],"tags":["Ethereum"],"summary":"Sign Ethereum transaction","parameters":[{"type":"string","description":"Store Identifier","name":"storeName","in":"path","required":true},{"type":"string","description":"Ethereum address","name":"address","in":"path","required":true},{"description":"Sign Ethereum transaction request","name":"request","in":"body","required":true,"schema":{"$ref":"#/definitions/types.SignETHTransactionRequest"}}],"responses":{"200":{"description":"Signed transaction signature","schema":{"type":"string"}},"400":{"description":"Invalid request format","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"403":{"description":"Forbidden","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"404":{"description":"Store/Account not found","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}}},"/stores/{storeName}/ethereum/{address}/sign-typed-data":{"post":{"description":"Sign Typed Data, following EIP-712, using selected Ethereum Account","consumes":["application/json"],"produces":["text/plain"],"tags":["Ethereum"],"summary":"Sign Typed Data (EIP-712)","parameters":[{"type":"string","description":"Store Identifier","name":"storeName","in":"path","required":true},{"type":"string","description":"Ethereum address","name":"address","in":"path","required":true},{"description":"Sign typed data request","name":"request","in":"body","required":true,"schema":{"$ref":"#/definitions/types.SignTypedDataRequest"}}],"responses":{"200":{"description":"Signed typed data signature","schema":{"type":"string"}},"400":{"description":"Invalid request format","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"403":{"description":"Forbidden","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"404":{"description":"Store/Account not found","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}}},"/stores/{storeName}/keys":{"get":{"description":"List key's identifiers allocated on selected Store","consumes":["application/json"],"produces":["application/json"],"tags":["Keys"],"summary":"List Key ids","parameters":[{"type":"string","description":"Store identifier","name":"storeName","in":"path","required":true},{"type":"integer","description":"page size","name":"limit","in":"query"},{"type":"integer","description":"page number","name":"page","in":"query"},{"type":"boolean","description":"filter by only deleted keys","name":"deleted","in":"query"}],"responses":{"200":{"description":"List of key ids","schema":{"type":"array","items":{"$ref":"#/definitions/handlers.PageResponse"}}},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"403":{"description":"Forbidden","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}}},"/stores/{storeName}/keys/verify-signature":{"post":{"description":"Verify if signature data was signed by a specific key","consumes":["application/json"],"produces":["application/json"],"tags":["Keys"],"summary":"Verify key signature","parameters":[{"type":"string","description":"Store identifier","name":"storeName","in":"path","required":true},{"type":"string","description":"Key identifier","name":"id","in":"path","required":true},{"description":"Verify signature request","name":"request","in":"body","required":true,"schema":{"$ref":"#/definitions/types.VerifyKeySignatureRequest"}}],"responses":{"204":{"description":"Successful verification"},"422":{"description":"Cannot verify signature","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}}},"/stores/{storeName}/keys/{id}":{"get":{"description":"Retrieve a key pair by its identifier","consumes":["application/json"],"produces":["application/json"],"tags":["Keys"],"summary":"Get key by ID","parameters":[{"type":"string","description":"Store identifier","name":"storeName","in":"path","required":true},{"type":"string","description":"Key identifier","name":"id","in":"path","required":true},{"type":"boolean","description":"filter by only deleted keys","name":"deleted","in":"query"}],"responses":{"200":{"description":"Key data","schema":{"$ref":"#/definitions/types.KeyResponse"}},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"403":{"description":"Forbidden","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"404":{"description":"Store/Key not found","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}},"post":{"description":"Create a new key pair using the specified Ecliptic Curve and Signing algorithm","consumes":["application/json"],"produces":["application/json"],"tags":["Keys"],"summary":"Create new Key","parameters":[{"type":"string","description":"Key Identifier","name":"id","in":"path","required":true},{"type":"string","description":"Store identifier","name":"storeName","in":"path","required":true},{"description":"Create key request","name":"request","in":"body","required":true,"schema":{"$ref":"#/definitions/types.CreateKeyRequest"}}],"responses":{"200":{"description":"Key data","schema":{"$ref":"#/definitions/types.KeyResponse"}},"400":{"description":"Invalid request format","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"403":{"description":"Forbidden","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"404":{"description":"Store not found","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}},"delete":{"description":"Delete a key by its id. Key can be recovered","consumes":["application/json"],"produces":["application/json"],"tags":["Keys"],"summary":"Soft-delete Key","parameters":[{"type":"string","description":"Store identifier","name":"storeName","in":"path","required":true},{"type":"string","description":"Key identifier","name":"id","in":"path","required":true}],"responses":{"204":{"description":"Deleted successfully"},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"403":{"description":"Forbidden","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"404":{"description":"Store/Key not found","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}},"patch":{"description":"Update the key tags of a specific key by its id","consumes":["application/json"],"produces":["application/json"],"tags":["Keys"],"summary":"Update a key","parameters":[{"type":"string","description":"Store identifier","name":"storeName","in":"path","required":true},{"type":"string","description":"Key identifier","name":"id","in":"path","required":true},{"description":"Update key request","name":"request","in":"body","required":true,"schema":{"$ref":"#/definitions/types.UpdateKeyRequest"}}],"responses":{"200":{"description":"Key data","schema":{"$ref":"#/definitions/types.KeyResponse"}},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"403":{"description":"Forbidden","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"404":{"description":"Store/Key not found","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}}},"/stores/{storeName}/keys/{id}/destroy":{"delete":{"description":"Permanently delete a key by id","consumes":["application/json"],"produces":["application/json"],"tags":["Keys"],"summary":"Destroy a Key","parameters":[{"type":"string","description":"Store identifier","name":"storeName","in":"path","required":true},{"type":"string","description":"Key identifier","name":"id","in":"path","required":true}],"responses":{"204":{"description":"Destroyed successfully"},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"403":{"description":"Forbidden","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"404":{"description":"Store/Key not found","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}}},"/stores/{storeName}/keys/{id}/import":{"post":{"description":"Import a private Key using the specified Ecliptic Curve and Signing algorithm","consumes":["application/json"],"produces":["application/json"],"tags":["Keys"],"summary":"Import Key","parameters":[{"type":"string","description":"Key Identifier","name":"id","in":"path","required":true},{"type":"string","description":"Store identifier","name":"storeName","in":"path","required":true},{"description":"Create key request","name":"request","in":"body","required":true,"schema":{"$ref":"#/definitions/types.ImportKeyRequest"}}],"responses":{"200":{"description":"Key data","schema":{"$ref":"#/definitions/types.KeyResponse"}},"400":{"description":"Invalid request format","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"403":{"description":"Forbidden","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"404":{"description":"Store not found","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}}},"/stores/{storeName}/keys/{id}/restore":{"put":{"description":"Restore a soft-deleted key by its id","consumes":["application/json"],"produces":["application/json"],"tags":["Keys"],"summary":"Restore a soft-deleted key","parameters":[{"type":"string","description":"Store identifier","name":"storeName","in":"path","required":true},{"type":"string","description":"Key identifier","name":"id","in":"path","required":true}],"responses":{"204":{"description":"Restored successfully"},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"403":{"description":"Forbidden","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"404":{"description":"Store/Key not found","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}}},"/stores/{storeName}/keys/{id}/sign":{"post":{"description":"Sign a random payload using the selected key pair","consumes":["application/json"],"produces":["application/json"],"tags":["Keys"],"summary":"Sign random payload","parameters":[{"type":"string","description":"Store identifier","name":"storeName","in":"path","required":true},{"type":"string","description":"Key identifier","name":"id","in":"path","required":true},{"description":"Signing request","name":"request","in":"body","required":true,"schema":{"$ref":"#/definitions/types.SignBase64PayloadRequest"}}],"responses":{"200":{"description":"signature in base64","schema":{"type":"string"}},"400":{"description":"Invalid request format","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"403":{"description":"Forbidden","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"404":{"description":"Store/Key not found","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}}},"/stores/{storeName}/secrets":{"get":{"description":"List of secret's ids allocated in the selected Store","consumes":["application/json"],"produces":["application/json"],"tags":["Secrets"],"summary":"List secrets","parameters":[{"type":"boolean","description":"filter by deleted accounts","name":"deleted","in":"query"},{"type":"string","description":"Store identifier","name":"storeName","in":"path","required":true},{"type":"integer","description":"page size","name":"limit","in":"query"},{"type":"integer","description":"page number","name":"page","in":"query"}],"responses":{"200":{"description":"List of Secret IDs","schema":{"type":"array","items":{"$ref":"#/definitions/handlers.PageResponse"}}},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"403":{"description":"Forbidden","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"404":{"description":"Store not found","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}}},"/stores/{storeName}/secrets/{id}":{"get":{"description":"Retrieve secret information by ID","consumes":["application/json"],"produces":["application/json"],"tags":["Secrets"],"summary":"Get a secret by id","parameters":[{"type":"string","description":"Store identifier","name":"storeName","in":"path","required":true},{"type":"string","description":"Secret identifier","name":"id","in":"path","required":true},{"type":"string","description":"secret version","name":"version","in":"query"},{"type":"boolean","description":"filter by only deleted accounts","name":"deleted","in":"query"}],"responses":{"200":{"description":"Secret object","schema":{"$ref":"#/definitions/types.SecretResponse"}},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"403":{"description":"Forbidden","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"404":{"description":"Store/Secret not found","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}},"post":{"description":"Create new secret on selected Store","consumes":["application/json"],"produces":["application/json"],"tags":["Secrets"],"summary":"Create a secret","parameters":[{"type":"string","description":"Secret identifier","name":"id","in":"path","required":true},{"type":"string","description":"Store identifier","name":"storeName","in":"path","required":true},{"description":"Create Secret request","name":"request","in":"body","required":true,"schema":{"$ref":"#/definitions/types.SetSecretRequest"}}],"responses":{"200":{"description":"Secret data","schema":{"$ref":"#/definitions/types.SecretResponse"}},"400":{"description":"Invalid request format","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"403":{"description":"Forbidden","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"404":{"description":"Store not found","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}},"delete":{"description":"Soft delete secret by id. It can be recovered","consumes":["application/json"],"produces":["application/json"],"tags":["Secrets"],"summary":"Delete a secret by id","parameters":[{"type":"string","description":"Store identifier","name":"storeName","in":"path","required":true},{"type":"string","description":"Secret identifier","name":"id","in":"path","required":true}],"responses":{"204":{"description":"Deleted successfully"},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"403":{"description":"Forbidden","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"404":{"description":"Store/Secret not found","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}}},"/stores/{storeName}/secrets/{id}/destroy":{"delete":{"description":"Permanently delete a secret by ID","consumes":["application/json"],"produces":["application/json"],"tags":["Secrets"],"summary":"Destroy a secret by ID","parameters":[{"type":"string","description":"Secret identifier","name":"storeName","in":"path","required":true},{"type":"string","description":"Key identifier","name":"id","in":"path","required":true}],"responses":{"204":{"description":"Destroyed successfully"},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"403":{"description":"Forbidden","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"404":{"description":"Store/Secret not found","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}}},"/stores/{storeName}/secrets/{id}/restore":{"put":{"description":"Restore a previously soft-deleted secret by ID","consumes":["application/json"],"produces":["application/json"],"tags":["Secrets"],"summary":"Restore a soft-deleted secret","parameters":[{"type":"string","description":"Store identifier","name":"storeName","in":"path","required":true},{"type":"string","description":"Secret identifier","name":"id","in":"path","required":true}],"responses":{"204":{"description":"Restored successfully"},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"403":{"description":"Forbidden","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"404":{"description":"Store/Secret not found","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}},"500":{"description":"Internal server error","schema":{"$ref":"#/definitions/handlers.ErrorResponse"}}}}}},"definitions":{"entities.Annotation":{"type":"object","properties":{"aws_account_id":{"type":"string"},"aws_arn":{"type":"string"},"aws_cloud_hsm_cluster_id":{"type":"string"},"aws_custom_key_store_id":{"type":"string"},"aws_key_id":{"type":"string"}}},"handlers.ErrorResponse":{"type":"object","properties":{"code":{"type":"string","example":"IR001"},"message":{"type":"string","example":"error message"}}},"handlers.PagePagingResponse":{"type":"object","properties":{"next":{"type":"string","example":"http://quorum-key-manager.com/stores/your-store/secrets?page=3"},"previous":{"type":"string","example":"http://quorum-key-manager.com/stores/your-store/secrets?page=1"}}},"handlers.PageResponse":{"type":"object","properties":{"data":{"type":"array","items":{"type":"string"},"example":["item1","item2","item3"]},"paging":{"$ref":"#/definitions/handlers.PagePagingResponse"}}},"types.Alias":{"type":"object","properties":{"key":{"type":"string"},"value":{"type":"string"}}},"types.AliasRequest":{"type":"object","properties":{"value":{"type":"string"}}},"types.AliasResponse":{"type":"object","properties":{"value":{"type":"string"}}},"types.CreateEthAccountRequest":{"type":"object","properties":{"keyId":{"type":"string","example":"my-key-account"},"tags":{"type":"object","additionalProperties":{"type":"string"}}}},"types.CreateKeyRequest":{"type":"object","required":["curve","signingAlgorithm"],"properties":{"curve":{"type":"string","example":"secp256k1"},"signingAlgorithm":{"type":"string","example":"ecdsa"},"tags":{"type":"object","additionalProperties":{"type":"string"}}}},"types.DomainSeparator":{"type":"object","required":["chainID","name","version"],"properties":{"chainID":{"type":"integer","example":1},"name":{"type":"string","example":"MyDApp"},"salt":{"type":"string","example":"some-random-string"},"verifyingContract":{"type":"string","example":"0x905B88EFf8Bda1543d4d6f4aA05afef143D27E18"},"version":{"type":"string","example":"v1.0.0"}}},"types.ECRecoverRequest":{"type":"object","required":["data","signature"],"properties":{"data":{"type":"string","example":"0xfeaeee..."},"signature":{"type":"string","example":"0x6019a3c8..."}}},"types.EthAccountResponse":{"type":"object","properties":{"address":{"type":"string","example":"0x664895b5fE3ddf049d2Fb508cfA03923859763C6"},"compressedPublicKey":{"type":"string","example":"0x6019a3c8..."},"createdAt":{"type":"string","example":"2020-07-09T12:35:42.115395Z"},"deletedAt":{"type":"string","example":"2020-07-09T12:35:42.115395Z"},"disabled":{"type":"boolean","example":false},"keyId":{"type":"string","example":"my-key-id"},"publicKey":{"type":"string","example":"0x1abae27a0cbfb02945720425d3b80c7e09728534"},"tags":{"type":"object","additionalProperties":{"type":"string"}},"updatedAt":{"type":"string","example":"2020-07-09T12:35:42.115395Z"}}},"types.ImportEthAccountRequest":{"type":"object","required":["privateKey"],"properties":{"keyId":{"type":"string","example":"my-imported-key-account"},"privateKey":{"type":"string","example":"0x56202652FDFFD802B7252A456DBD8F3ECC0352BBDE76C23B40AFE8AEBD714E2E"},"tags":{"type":"object","additionalProperties":{"type":"string"}}}},"types.ImportKeyRequest":{"type":"object","required":["curve","privateKey","signingAlgorithm"],"properties":{"curve":{"type":"string","example":"secp256k1"},"privateKey":{"type":"string","example":"bXkgc2lnbmVkIG1lc3NhZ2U="},"signingAlgorithm":{"type":"string","example":"ecdsa"},"tags":{"type":"object","additionalProperties":{"type":"string"}}}},"types.KeyResponse":{"type":"object","properties":{"annotations":{"$ref":"#/definitions/entities.Annotation"},"createdAt":{"type":"string","example":"2020-07-09T12:35:42.115395Z"},"curve":{"type":"string","example":"secp256k1"},"deletedAt":{"type":"string","example":"2020-07-09T12:35:42.115395Z"},"disabled":{"type":"boolean","example":false},"id":{"type":"string","example":"my-key"},"publicKey":{"type":"string","example":"Cjix/fS3WdqKGKabagBNYwcClan5aImoFpnjSF0cqJs="},"signingAlgorithm":{"type":"string","example":"ecdsa"},"tags":{"type":"object","additionalProperties":{"type":"string"}},"updatedAt":{"type":"string","example":"2020-07-09T12:35:42.115395Z"}}},"types.SecretResponse":{"type":"object","properties":{"createdAt":{"type":"string","example":"2020-07-09T12:35:42.115395Z"},"deletedAt":{"type":"string","example":"2020-07-09T12:35:42.115395Z"},"disabled":{"type":"boolean","example":false},"id":{"type":"string","example":"my-secret"},"tags":{"type":"object","additionalProperties":{"type":"string"}},"updatedAt":{"type":"string","example":"2020-07-09T12:35:42.115395Z"},"value":{"type":"string","example":"my-value"},"version":{"type":"string","example":"1"}}},"types.SetSecretRequest":{"type":"object","required":["value"],"properties":{"tags":{"type":"object","additionalProperties":{"type":"string"}},"value":{"type":"string","example":"my-value"}}},"types.SignBase64PayloadRequest":{"type":"object","required":["data"],"properties":{"data":{"type":"string","example":"bXkgc2lnbmVkIG1lc3NhZ2U="}}},"types.SignEEATransactionRequest":{"type":"object","required":["chainID","privateFrom"],"properties":{"chainID":{"type":"string","example":"0x1 (mainnet)"},"data":{"type":"string","example":"0xfeaeee..."},"nonce":{"type":"string","example":"0x1"},"privacyGroupId":{"type":"string","example":"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo="},"privateFor":{"type":"array","items":{"type":"string"},"example":["A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=","B1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo="]},"privateFrom":{"type":"string","example":"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo="},"to":{"type":"string","example":"0x905B88EFf8Bda1543d4d6f4aA05afef143D27E18"}}},"types.SignETHTransactionRequest":{"type":"object","required":["chainID","gasLimit","gasPrice"],"properties":{"chainID":{"type":"string","example":"0x1 (mainnet)"},"data":{"type":"string","example":"0xfeaeee..."},"gasLimit":{"type":"string","example":"0x5208"},"gasPrice":{"type":"string","example":"0x0"},"nonce":{"type":"string","example":"0x1"},"to":{"type":"string","example":"0x905B88EFf8Bda1543d4d6f4aA05afef143D27E18"},"value":{"type":"string","example":"0xfeaeae"}}},"types.SignMessageRequest":{"type":"object","required":["message"],"properties":{"message":{"type":"string","example":"0xfeade..."}}},"types.SignQuorumPrivateTransactionRequest":{"type":"object","required":["gasLimit","gasPrice"],"properties":{"data":{"type":"string","example":"0xfeaeee..."},"gasLimit":{"type":"string","example":"0x5208"},"gasPrice":{"type":"string","example":"0x0"},"nonce":{"type":"string","example":"0x1"},"to":{"type":"string","example":"0x905B88EFf8Bda1543d4d6f4aA05afef143D27E18"},"value":{"type":"string","example":"0x1"}}},"types.SignTypedDataRequest":{"type":"object","required":["domainSeparator","message","messageType","types"],"properties":{"domainSeparator":{"$ref":"#/definitions/types.DomainSeparator"},"message":{"type":"object","additionalProperties":true},"messageType":{"type":"string","example":"Mail"},"types":{"type":"object","additionalProperties":{"type":"array","items":{"$ref":"#/definitions/types.Type"}}}}},"types.Type":{"type":"object","required":["name","type"],"properties":{"name":{"type":"string","example":"fieldName"},"type":{"type":"string","example":"string"}}},"types.UpdateEthAccountRequest":{"type":"object","properties":{"tags":{"type":"object","additionalProperties":{"type":"string"}}}},"types.UpdateKeyRequest":{"type":"object","properties":{"tags":{"type":"object","additionalProperties":{"type":"string"}}}},"types.VerifyKeySignatureRequest":{"type":"object","required":["curve","data","publicKey","signature","signingAlgorithm"],"properties":{"curve":{"type":"string","example":"secp256k1"},"data":{"type":"string","example":"bXkgc2lnbmVkIG1lc3NhZ2U="},"publicKey":{"type":"string","example":"Cjix/fS3WdqKGKabagBNYwcClan5aImoFpnjSF0cqJs="},"signature":{"type":"string","example":"tjThYhKSFSKKvsR8Pji6EJ+FYAcf8TNUdAQnM7MSwZEEaPvFhpr1SuGpX5uOcYUrb3pBA8cLk8xcbKtvZ56qWA=="},"signingAlgorithm":{"type":"string","example":"ecdsa"}}},"types.VerifyRequest":{"type":"object","required":["address","data","signature"],"properties":{"address":{"type":"string","example":"0x905B88EFf8Bda1543d4d6f4aA05afef143D27E18"},"data":{"type":"string","example":"0xfeaeee..."},"signature":{"type":"string","example":"0x6019a3c8..."}}},"types.VerifyTypedDataRequest":{"type":"object","required":["address","data","signature"],"properties":{"address":{"type":"string","example":"0x905B88EFf8Bda1543d4d6f4aA05afef143D27E18"},"data":{"type":"string"},"signature":{"type":"string","example":"0x6019a3c8..."}}}},"securityDefinitions":{"ApiKeyAuth":{"type":"apiKey","name":"Authorization","in":"header"},"BasicAuth":{"type":"basic"},"OAuth2Application":{"type":"oauth2","flow":"application","tokenUrl":"https://example.com/oauth/token","scopes":{"admin":" Grants read and write access to administrative information","write":" Grants write access"}}},"x-extension-openapi":{"example":"value on a json format"}}