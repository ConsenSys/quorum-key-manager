{
 "openapi": "3.0.0",
 "info": {
  "title": "Crypto-as-a-Service (CaaS)",
  "version": "2.13.14",
  "contact": {
   "name": "Application Security - Illuminati",
   "email": "AppSec_Illuminati@mastercard.com"
  },
  "description": "## Introduction\n\nWelcome to the CaaS OpenAPI (Swagger) specification and documentation site. Below you will find a complete specification for the CaaS API along with documentation and examples of how to use each endpoint. If you have any questions as you work through this document, please reach out to <a href=\"mailto:CS-CaaS@mastercard.com\">CaaS Support</a> for assistance.\n\n## Request Identifier\n\nEvery call to CaaS will return a value to you called `requestID`. This value is very important when reaching out to our team for support. As you can imagine, CaaS processes millions of transactions **per day** so finding data in the logs without it is almost impossible. This means that you should always log `requestID`. It is not considered sensitive data and it is safe to log, so please make sure you log it.\n\nA typical `requestID` looks like this: `1507556821334:cas4stl1:21629:j8k79dmw:11542`\n\n## Max Payload Size Allowed\n\nCaaS has payload size restrictions that must not be exceeded. The maximum number of bytes allowed is `1048576`. Exceeding this threshold will result in an error (i.e. `ERROR Payload content length greater than maximum allowed: 1048576`).\n\n## Availability\n\nEach endpoint in this documentation has a marker for where this service is available. This will denote it's availability `On-Premise` and the `Cloud`. Some endpoints that are available under `Cloud` may have some limitations on what is supported versus the `On-Premise` implementation. Please see the specific endpoint documentation details for more information regarding limitations.\n\n## Error Handling\n\nIf you are only getting a status code in your logs for a 500 error, your application may be throwing away the details by default, and you will need to change the way you handle response errors. Your logs should capture the response body when there’s an error. The response from CaaS will include a generic error message (no PCI data) that describes the cause of the failure.\n\nFor example, if you are using the Spring RestTemplate, take a look at [this documentation](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/DefaultResponseErrorHandler.html) (specifically the default implementation of the ResponseErrorHandler interface). This error handler checks for the status code on the ClientHttpResponse. Any code with series `HttpStatus.Series.CLIENT_ERROR` or `HttpStatus.Series.SERVER_ERROR` is considered to be an error. You may need to override the `handleError(ClientHttpResponse response)` method. Here you get the entire response object, and `getBody()` will provide you with the `requestId` and error details that CaaS provides in the response. Log that info, then provide it to CaaS Support when you report a problem.\n\n### HTTP Status Codes\n\n- `200` - Your request was successful.\n- `400` - Your request is invalid or malformed. You should double-check the documentation and make sure you're sending a valid JSON document containing all required fields for this request.\n- `401` - Your client is not authenticated. You likely forgot to pass a client certificate when calling CaaS.\n- `403` - You are not authorized to perform this function. Either you have no permission to use this endpoint, or you attempted to use a key which you are not authorized to use.\n- `404` - The API endpoint you're attemping to call either doesn't support this HTTP method or doesn't actually exist.\n- `500` - Your request could not be processed because there was either an internal error, or some backend component returned an error. Please check the `message` for further details.\\\n- `502` - The CaaS worker process is hung and needs to be restarted to resolve the error.\n- `503` - The server is temporarily unable to service your request due to maintenance downtime or capacity problems. Please try again later.\n\n### Error Object\n\n- `statusCode` (integer) - Mirrors the HTTP status code as a convenience.\n- `error` (string) - The string representation of the HTTP status code.\n- `requestId` (string) - The unique request identifier generated by CaaS for this request.\n- `message` (string) - An **optional** string that is usually (but not always) sent by CaaS to contain a human-readable message explaining the error in more detail.\n- `data` (object) - An **optional** object with further data relating to the request. This is rarely used.\n\n## Base URL\n\nCaaS is available in all of the environments below. Every API endpoint documented here should be prefixed by the correct base URL for that environment:\n\n### Direct Connection Base URL's\n\n| Environment | Location | URL |\n|------------------------|------------------------|-----------------------------------------------|\n| Development (MTLS) | St. Louis, MO (USA) | https://dev.caas.mastercard.int:16181/v2/ |\n| Development (Non-MTLS) | St. Louis, MO (USA) | https://dev.caas.mastercard.int:16180/v2/ |\n| Stage | St. Louis, MO (USA) | https://stage.caas.mastercard.int:16181/v2/ |\n| Perf | St. Louis, MO (USA) | https://perf.caas.mastercard.int:16181/v2/ |\n| MTF | St. Louis, MO (USA) | https://mtf.caas.stl.mastercard.int:16181/v2/ |\n| MTF | Kansas City, MO (USA) | https://mtf.caas.ksc.mastercard.int:16181/v2/ |\n| ITF | St. Louis, MO (USA) | https://itf.caas.mastercard.int:16181/v2/ |\n| Production | St. Louis, MO (USA) | https://caas.stl.mastercard.int:16181/v2/ |\n| Production | Kansas City, MO (USA) | https://caas.ksc.mastercard.int:16181/v2/ |\n| Production | Zaventem, Belgium (EU) | https://caas.bel.mastercard.int:16181/v2/ |\n| MTF-Dubai | Dubai, MEA (EDW)\t\t | https://mtf.caas.dxb.mastercard.int:16181/v2/ |\n| Production-Dubai | Dubai, MEA (EDW)\t\t | https://caas.dxb.mastercard.int:16181/v2/ |\n| Production-Dubai | Abu Dhabi, MEA (EDW)\t | https://caas.auh.mastercard.int:16181/v2/ |\n| MTF-Pune | Pune, India (IOS)\t | https://mtf.caas.pnq.mastercard.int:16181/v2/ |\n| Production-Pune | Pune, India (IOS)\t | https://caas.pnq.mastercard.int:16181/v2/ |\n| Production-Noida | Noida, India (IOS)\t | https://caas.del.mastercard.int:16181/v2/ |\n\n### ESB Base URL's\n\n| Environment | URL |\n|-------------|--------------------------------------------------|\n| Development | https://dev.dp.stl.mastercard.int:30202/caas/v2/ |\n| Stage | https://esb.mclocal.int:30202/caas/v2/ |\n| Perf | https://esb.mclocal.int:30202/caasperf/v2/ |\n| MTF | https://mtf.esb.mclocal.int:30202/caas/v2/ |\n| ITF | https://itf.esb.mclocal.int:30202/caas/v2/ |\n| Production | https://esb.mclocal.int:30202/caas/v2/ |\n\n## Transport Security\n\nCaaS requires that all connections happen over mutually-authenticated SSL (MSSL). As part of the onboarding process, you will provide a list of client DNs that will be added to the CaaS database. CaaS performs coarse-grained access control for each function to ensure your application has the correct access.\n\nFor the most part, as long as your HTTP client is configured to send a client certificate, you shouldn't have any issues interacting with CaaS. If you are experiencing SSL handshake errors when attempting to connect to CaaS, the most likely cause is a missing certificate (either it wasn't supplied by your client, or the one you supplied is new and hasn't been added to the CaaS database).\n\n## Binary Encoding\n\nWhen dealing with byte-string data within a request or response body, CaaS supports both `base64` and `hex` encoding. Encoding levels can be set uniquely for both the request and the response using the following headers:\n\n| Header Name | Possible Values | Description |\n|---------------------|-------------------|--------------------------------------------------------------|\n| `CaaS-Encoding-In` | `base64` or `hex` | Controls how CaaS should parse incoming binary data |\n| `CaaS-Encoding-Out` | `base64` or `hex` | Controls how CaaS should format binary data in its responses |\n\nThese headers mean that it is possible for you to send CaaS `hex`-encoded data and retrieve your response using `base64` (and vice-versa). They operate independently of one another. If either of these headers is un-specified, a default value of `base64` is assumed.\n\n## Data Types\n\nAs you read the API documentation, you will notice several data types defined for each operation. These data types should be translated as follows:\n\n- **string** - A simple UTF-8 encoded JSON string value (example: `\"test string\"`).\n- **integer** - A numeric type represented as a valid JSON number (example: `1234`).\n- **buffer** - An array of bytes, represented by an encoded string value. The string should be encoded using `base64` or `hex`, and it is treated as outlined in the **Binary Encoding** section directly above.\n\n## Troubleshooting\n\n### 502/503 Errors\n\n- ```502``` Error\n\n This is the result of a timeout. Currently, CaaS requests time out after ```30 seconds```. Reach out to <a href=\"mailto:CS-CaaS@mastercard.com\">CaaS Support</a> for assistance.\n\n ```bash\n caas tail apache | grep \" 502 \"\n 10.158.172.65 - - [21/Aug/2017:01:24:19 -0500] POST /v2/common/batch HTTP/1.1 502 410 - Apache-HttpClient/4.5.2 (Java/1.7.0_85) userid=- sec=30 usec=30030739 fwd=10.158.172.65,- route=23\n 10.158.172.65 - - [21/Aug/2017:01:24:34 -0500] POST /v2/core/wrapped-decrypt HTTP/1.1 502 426 - Apache-HttpClient/4.5.1 (Java/1.8.0_102) userid=- sec=30 usec=30030675 fwd=10.158.172.65,- route=23\n 10.158.172.65 - - [21/Aug/2017:01:24:42 -0500] POST /v2/core/encrypt/aes HTTP/1.1 502 418 - Apache-HttpClient/4.5.1 (Java/1.8.0_102) userid=- sec=30 usec=30030574 fwd=10.158.172.65,- route=23\n 10.157.80.55 - - [21/Aug/2017:01:24:53 -0500] POST /v2/core/sign/rsa-sha256? HTTP/1.1 502 426 - Apache-HttpClient/4.5.3 (Java/1.8.0_05) userid=- sec=30 usec=30030764 fwd=10.157.80.55,- route=23\n ```\n\n- ```503``` Error\n\n This may experienced this error when the service becomes unavailable. Reach out to <a href=\"mailto:CS-CaaS@mastercard.com\">CaaS Support</a> for assistance.\n\n ```html\n HTTP/1.1 503 Service Unavailable\n Date: Thu, 24 Aug 2017 14:51:14 GMT\n Server: Apache\n Content-Length: 299\n Connection: close\n Content-Type: text/html; charset=iso-8859-1\n\n <title>503 Service Unavailable</title>\n </head>\n <body>\n <h1>Service Unavailable</h1>\n <p>The server is temporarily unable to service your\n request due to maintenance downtime or capacity\n problems. Please try again later.</p>\n </body>\n </html>\n ```\n\n---\n\n### CK_RV Errors\n\n- CK_RV: DATA_LEN_RANGE\n\n This happens when a cipher is sent that is not padded correctly (Does not meet the block boundary).\n\n ```json\n {\n \"batchRequestId\": \"14\",\n \"path\": \"/core/decrypt/aes\",\n \"statusCode\": 500,\n \"payload\": {\n \"statusCode\": 500,\n \"error\": \"Internal Server Error\",\n \"message\": \"[Shield]: Decryption failed. (OP: decrypt, CK_RV: DATA_LEN_RANGE)\",\n \"requestId\": \"1441287264257:cas4stl2:23868:ie3151ch:16043\"\n }\n }\n ```\n- CK_RV: DEVICE_MEMORY\n\n The Thales hardserver has run out of memory. A full restart will be required of jboss/apache/hardserver/caas.\n\n ```bash\n [2015-05-21T13:56:20.079Z] ERROR: caas-plus/47935 on cas2ksc6: Error while performing wrapped decrypt (req_id=1432216580071-47935-72511, commonLogEventType=00000, err.code=49)\n PKCS11Error: [Shield]: Unwrapping the key failed. (CK_RV: DEVICE_MEMORY)\n at Object.args.(anonymous function) (/apps_01/caas-plus/v1.3/node_modules/shield/lib/pkcs11.js:33:33)\n ```\n\n- CK_RV: GENERAL_ERROR\n\n If this is the case, check the full request that is being sent. Maybe the key is wrong, maybe the padding length is wrong.\n\n ```bash\n [2017-01-23T12:27:43.531Z] ERROR: caas-plus/29361 on cas5stl1: Error while performing wrapped decrypt (requestId=1485174463489:cas5stl1:29361:iy4gz3ai:40929, err.code=5)\n PKCS11Error: [Shield]: Invalid padding length. Cannot decrypt data. Did you give me the wrong key? (OP: decrypt, CK_RV: GENERAL_ERROR)\n at /apps_01/caas-plus/v2/node_modules/@mc/shield/lib/session.js:1107:31\n at next (/apps_01/caas-plus/v2/node_modules/@mc/shield/node_modules/vasync/lib/vasync.js:593:14)\n at args.(anonymous function) (/apps_01/caas-plus/v2/node_modules/@mc/shield/lib/pkcs11.js:48:29)\n [2017-01-23T12:27:43.533Z] ERROR: caas-plus/29361 on cas5stl1: [Shield]: Invalid padding length. Cannot decrypt data. Did you give me the wrong key? (OP: decrypt, CK_RV: GENERAL_ERROR) (requestId=1485174463489:cas5stl1:29361:iy4gz3ai:40929, type=response, method=post, path=/core/wrapped-decrypt, started=2017-01-23T12:27:43.489Z, elapsed=44, status=500, requestSize=1707)\n requestHeaders: {\n \"host\": \"localhost15\",\n ```\n\n In this case, make sure that the key alias that is being sent is a valid key. *Please note that key aliases are case sensitive. Also, check to make sure this is a public key. Verify will look for a public key or a certificate.\n\n ```bash\n [2015-10-28T18:34:33.376Z] WARN: caas-plus/13300 on cas5stl1: Cache miss. Checking DB. (requestId=1446057273371:cas5stl1:13300:ig8fiftp:11314)\n [2015-10-28T18:34:33.398Z] ERROR: caas-plus/13300 on cas5stl1: Error while performing verify operation (requestId=1446057273371:cas5stl1:13300:ig8fiftp:11314, err.code=5)\n PKCS11Error: [Shield]: No objects could be found with that alias. (OP: findObjects, CK_RV: GENERAL_ERROR)\n at Object.args.(anonymous function) (/apps_01/caas-plus/v2/node_modules/shield/lib/pkcs11.js:33:33)\n [2015-10-28T18:34:33.399Z] INFO: caas-plus/13300 on cas5stl1: Response (requestId=1446057273371:cas5stl1:13300:ig8fiftp:11314, type=response, method=post, path=/core/verify/rsa-sha256, started=2015-10-28T18:34:33.371Z, elapsed=28, status=200, requestSize=426)\n requestHeaders: {\n ```\n\n In this final instance, these should be private keys. The key does not match what is expected.\n\n ```bash\n [2016-07-26T05:33:09.298Z] ERROR: caas-plus/43217 on cas4stl1: Error while performing decrypt operation (requestId=1469511189237:cas4stl1:43217:ir2b5l7t:20470, err.code=5)\n PKCS11Error: [Shield]: No objects could be found with that alias. (OP: findObject, CK_RV: GENERAL_ERROR)\n at args.(anonymous function) (/apps_01/caas-plus/v2/node_modules/shield/lib/pkcs11.js:45:35)\n [2016-07-26T05:33:09.299Z] ERROR: caas-plus/43217 on cas4stl1: [Shield]: No objects could be found with that alias. (OP: findObject, CK_RV: GENERAL_ERROR) (requestId=1469511189237:cas4stl1:43217:ir2b5l7t:20470, type=response, method=post, path=/core/decrypt/aes, started=2016-07-26T05:33:09.237Z, elapsed=62, status=500, requestSize=1052)\n requestHeaders: {\n \"host\": \"localhost10\",\n ```\n\n __The key will also need to be operator cardset protected for CaaS to be aware of it. Softcard protected keys\n will not be visible.__\n\n- CK_RV: KEY_FUNCTION_NOT_PERMITTED\n\n Check the key that is being used as it might not have the appropriate permissions.\n\n ```bash\n [2015-05-27T19:55:06.629Z] ERROR: caas-plus/23133 on cas4stl12: Error while performing hash pan operation (requestId=1432756506617:cas4stl12:23133:i9bgqmn1:25090, commonLogEventType=00000, err.code=104)\n PKCS11Error: [Shield]: Signature generation failed. (CK_RV: KEY_FUNCTION_NOT_PERMITTED)\n at Object.args.(anonymous function) (/apps_01/caas-plus/v2/node_modules/shield/lib/pkcs11.js:33:33)\n [2015-05-27T19:55:06.632Z] ERROR: caas-plus/23133 on cas4stl12: [Shield]: Signature generation failed. (CK_RV: KEY_FUNCTION_NOT_PERMITTED) (requestId=1432756506617:cas4stl12:23133:i9bgqmn1:25090, type=response, method=post, path=/core/hash/pan, started=2015-05-27T19:55:06.617Z, elapsed=14, status=500, requestSize=62, commonLogEventType=00000)\n requestHeaders: {\n \"host\": \"localhost30\",\n \"accept\": \"application/json\",\n \"content-type\": \"application/json\",\n ```\n\n- CK_RV: MECHANISM_INVALID\n\n This is normally a case of using the wrong kind of key for the operation. ECC vs AES vs RSA vs HMAC.\n\n ```bash\n [2016-08-29T18:44:34.585Z] ERROR: caas-plus/24269 on cas0stl1: Error while performing encrypt operation (requestId=1472496274570:cas0stl1:24269:isg5ehgj:11206, err.code=112)\n PKCS11Error: [Shield]: Signature generation failed. (OP: sign, CK_RV: MECHANISM_INVALID)\n at args.(anonymous function) (/apps_01/caas-plus/v2/node_modules/shield/lib/pkcs11.js:45:35)\n [2016-08-29T18:44:34.587Z] ERROR: caas-plus/24269 on cas0stl1: [Shield]: Signature generation failed. (OP: sign, CK_RV: MECHANISM_INVALID) (requestId=1472496274570:cas0stl1:24269:isg5ehgj:11206, type=response, method=post, path=/core/encrypt/jwe, started=2016-08-29T18:44:34.570Z, elapsed=17, status=500, requestSize=860)\n requestHeaders: {\n \"host\": \"localhost7\",\n ```\n\n- CK_RV: SIGNATURE_INVALID\n\n The first time we ran into this, a bad alias was being sent. In this case the alias being used had sixteen trailing spaces. The second time was an ecc-p256 key created with Bouncy Castle which our code was not verifying correctly. A rsa-2048 key was used instead. The third time it looks like it was signing with one key and trying to verify with a different key. If this is for TAV troubleshooting, you can read CaaS - Troubleshooting TAV but the short version is if the keys are valid and the problem is an invalid signature, please create an activity in Remedy and route that ACT to DPTOI MDES Wallet Onboarding Group.\n\n ```bash\n [2015-06-08T18:01:24.533Z] ERROR: caas-plus/12916 on cas2ksc4: Error while performing hmac verify, (req_id=1433786484526-12916-24672, commonLogEventType=00000, err.code=192)\n PKCS11Error: [Shield]: Signature could not be verified. (CK_RV: SIGNATURE_INVALID)\n at Object.args.(anonymous function) (/apps_01/caas-plus/v1.3/node_modules/shield/lib/pkcs11.js:33:33)\n ```\n\n- CK_RV: WRAPPED_KEY_INVALID\n\n Email in the request being sent. Make sure that you are encrypting with the same key you are trying to decrypt with. Make sure you are using all base64 or all hex in the request. We can do either but it has to be consistent. In the following example the cipher and iv are base64 but the wrappedKey is hex.\n\n ```bash\n [2015-07-30T17:57:07.733Z] ERROR: caas-plus/12981 on cas4stl2: Error while performing wrapped decrypt (requestId=1438279027715:cas4stl2:12981:icm0db6j:29347, commonLogEventType=00000, err.code=272)\n PKCS11Error: [Shield]: Unwrapping the key failed. (CK_RV: WRAPPED_KEY_INVALID)\n at Object.args.(anonymous function) (/apps_01/caas-plus/v2/node_modules/shield/lib/pkcs11.js:33:33)\n [2015-07-30T17:57:07.735Z] ERROR: caas-plus/12981 on cas4stl2: [Shield]: Unwrapping the key failed. (CK_RV: WRAPPED_KEY_INVALID) (requestId=1438279027715:cas4stl2:12981:icm0db6j:29347, type=response, method=post, path=/core/wrapped-decrypt, started=2015-07-30T17:57:07.715Z, elapsed=19, status=500, requestSize=3097, commonLogEventType=00000)\n ```\n\n ```json\n {\n \"cipher\": \"NjA0MD...\"\n \"unwrappingKeyAlias\":\"80321-m....yption-key\",\n \"oaepHashingAlgorithm\": \"SHA256\",\n \"wrappedKey\": \"5c2369f4...\"\n \"iv\": \"YQt5ZC...\"\n }\n ```\n\n __Questions:__\n\n 1. What request is being sent to perform wrapped encrypt?\n - What is the rsa wrapping key that is being used?\n - Is a wrappingKeyAlias being provided?\n - Is a wrappingKeyFingerprint being provided? If so does it match up to an existing key?\n - Is an iv specified?\n - Is an oaepHashingAlgorithm specified? (SHA256, SHA512, Default PKCS non-OAEP)\n - Is an algorithmMode specified? (ECB, GCM, Default CBC)\n - Is a tagLength or aad provided for GCM mode?\n 2. What request is being sent to perform wrapped decrypt?\n - What is the rsa wrapping key that is being used?\n - Is an unwrappingKeyAlias provided? Does it match the one used to encrypt?\n - Is an unwrappingKeyFingerprint provided? Does it match the one used to encrypt?\n - Is an iv specified? Does it match to the one used to encrypt?\n - Is an oaepHashingAlgorithm specified? Does it match the one used to encrypt?\n - Is an algorithmMode specified? Does it match the one used to encrypt?\n - Is a tagLength or aad provided for GCM mode? Does it match the one used to encrypt?\n\n If you are using Bouncy Castle provider and OAEP padding, you will need to use Sun provider and/or PKCS1 padding.\n\n---\n\n### Client Troubleshooting\n\n- Client is not authorized to access this key\n\n ```bash\n [2016-12-13T14:17:07.536Z] ERROR: caas-plus/25626 on cas4stl1: Client is not authorized to access this key. (requestId=1481638627519:cas4stl1:25626:iwmer3qg:38472, type=response, method=post, path=/core/decrypt/aes, started=2016-12-13T14:17:07.519Z, elapsed=16, status=403, requestSize=52974)\n ```\n\n This error is returned by hydra on ```getKeyByFingerprint``` and ```getKeyByMetadata```. Make certain you are using the correct fingerprint or the correct metadata. Check the api guide to see what usage is. Core decrypt for example will ignore a key alias even if one is provided If it is not a valid service, escalate to DPS. They can add it if needed and then onboarding will need to be reran.\n\n ```bash\n # Example Cache Miss\n\n [2015-11-05T15:44:55.042Z] ERROR: caas-plus/15731 on cas4stl1: Error querying cache: getCertCredential (requestId=1446738295033:cas4stl1:15731:igkwmqb7:21586)\n Error: Client is not authorized to access this service.\n at Object.exports.unauthorized (/apps_01/caas-plus/v2/lib/common/errors.js:77:17)\n at Command.<anonymous> (/apps_01/caas-plus/v2/lib/common/cache.js:153:34)\n ```\n\n---\n\n### General Errors\n\n- ERR Error running script\n\n This is a bug in onboarding where key aliases are not pre-pended with ```\"key:\"```\n\n ```bash\n [2016-06-16T08:52:47.664Z] ERROR: caas-plus/16793 on cas5stl1: ERR Error running script (call to f_aafa3ec8cb70b0e09b437b980103cde3fd89eb18): @user_script:45: user_script:45: attempt to concatenate local 'alias' (a nil value) (requestId=1466067167641:cas5stl1:16793:ipfy1opf:19548, type=response, method=post, path=/core/wrapped-decrypt, started=2016-06-16T08:52:47.641Z, elapsed=22, status=500, requestSize=907)\n ```\n\n- Error Reading cert chain file\n\n The chain being looked for does not exist.\n\n ```bash\n [2015-05-14T14:33:06.279Z] WARN: caas-plus/30390 on cas4stl1: Error reading cert chain file undefined (requestId=1431613986271:cas4stl1:30390:i95uohvk:30074, commonLogEventType=00000)\n [2015-05-14T14:33:06.280Z] ERROR: caas-plus/30390 on cas4stl1: Error encountered during get certificate chain (requestId=1431613986271:cas4stl1:30390:i95uohvk:30074, commonLogEventType=00000)\n Error: Error reading certificate chain\n at Object.exports.create (/apps_01/caas-plus/v2/node_modules/boom/lib/index.js:21:17)\n at Object.exports.crypto (/apps_01/caas-plus/v2/lib/common/errors.js:7:17)\n at /apps_01/caas-plus/v2/lib/kms/kms-service.js:227:36\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:544:30\n at internals.Any._validateWithOptions (/apps_01/caas-plus/v2/node_modules/joi/lib/any.js:645:16)\n at root.validate (/apps_01/caas-plus/v2/node_modules/joi/lib/index.js:102:23)\n at async.waterfall.properties.payload (/apps_01/caas-plus/v2/lib/kms/kms-service.js:193:17)\n at fn (/apps_01/caas-plus/v2/node_modules/async/lib/async.js:641:34)\n at Object._onImmediate (/apps_01/caas-plus/v2/node_modules/async/lib/async.js:557:34)\n at processImmediate [as _immediateCallback] (timers.js:354:\n\n # Second Example\n [2016-02-04T16:04:05.901Z] WARN: caas-plus/34583 on cas4stl1: Error reading cert chain file /apps_data_01/security/certificate_chain/70703-stage-citisgaus-mts-mastercard-com.ec.pem (requestId=1454601845894:cas4stl1:34583:ik7cd0nd:19785)\n ```\n\n- Error while performing data prep\n\n The Thales layer does not like the request, this usually means the JSON request is bad. Check what is being sent and see if there any issues with it.\n\n ```bash\n [2015-10-30T15:47:09.813Z] ERROR: caas-plus/22412 on cas4stl9: Error while performing data prep (requestId=1446220029807:cas4stl9:22412:ifu0kl1i:14295)\n Error: Could not read JSON: Could not resolve type id 'TripleDESKeyId' into a subtype of\n at Object.exports.thales (/apps_01/caas-plus/v2/lib/common/errors.js:17:17)\n at /apps_01/caas-plus/v2/lib/emv/emv-service.js:254:34\n at fn (/apps_01/caas-plus/v2/node_modules/async/lib/async.js:717:34)\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:1170:16\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:172:37\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:677:43\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:173:37\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:1166:30\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:647:51\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:697:13\n ```\n\n- Invalid content-type header\n\n In this example there was a semicolon following application/json which is causing the error.\n\n ```bash\n [2015-07-21T20:11:40.341Z] ERROR: caas-plus/10166 on cas4stl2: Invalid content-type header (requestId=1437509500336:cas4stl2:10166:ic6g1pas:31442, type=response, method=post, path=/core/wrapped-decrypt, started=2015-07-21T20:11:40.336Z, elapsed=5, status=400, requestSize=5185, commonLogEventType=00000)\n requestHeaders:\n { \"host\": \"localhost17\", \"content-type\": \"application/json;\", \"x-dynatrace\": \"FW1;793002418;-1970158446;3299;8;-1299492499;594474;2\", \"user-agent\": \"Java/1.6.0_45\", \"accept\": \"text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2\", \"via\": \"1.1 FQAAAHJEIwA-\", \"x-client-ip\": \"10.158.148.21\", \"x-global-transaction-id\": \"847125969\", \"x-client-cert-dn\": \"/C=US/ST=Missouri/L=Saint Louis/O=MasterCard WorldWide - Common ProdInfra SSL/OU=Client02/CN=stage.masterpassclient.mastercard.int\", \"forwarded-client-cert-dn\": \"CN=stage.dp.stl.mastercard.int,OU=client 07,O=MasterCard WorldWide - Common ProdInfra SSL,L=Saint Louis,ST=Missouri,C=US\", \"x-forwarded-for\": \"10.158.172.65\", \"x-forwarded-host\": \"stage.caas.mastercard.int:16181\", \"x-forwarded-server\": \"stage.caas.mastercard.int\", \"connection\": \"Keep-Alive\", \"content-length\": \"5185\" }–\n responseHeaders: {\n \"content-type\": \"application/json;[2015-07-21T20:11:40.341Z] ERROR: caas-plus/10166 on cas4stl2: Invalid content-type header (requestId=1437509500336:cas4stl2:10166:ic6g1pas:31442, type=response, method=post, path=/core/wrapped-decrypt, started=2015-07-21T20:11:40.336Z, elapsed=5, status=400, requestSize=5185, commonLogEventType=00000)\n requestHeaders:\n { \"host\": \"localhost17\", \"content-type\": \"application/json;\", \"x-dynatrace\": \"FW1;793002418;-1970158446;3299;8;-1299492499;594474;2\", \"user-agent\": \"Java/1.6.0_45\", \"accept\": \"text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2\", \"via\": \"1.1 FQAAAHJEIwA-\", \"x-client-ip\": \"10.158.148.21\", \"x-global-transaction-id\": \"847125969\", \"x-client-cert-dn\": \"/C=US/ST=Missouri/L=Saint Louis/O=MasterCard WorldWide - Common ProdInfra SSL/OU=Client02/CN=stage.masterpassclient.mastercard.int\", \"forwarded-client-cert-dn\": \"CN=stage.dp.stl.mastercard.int,OU=client 07,O=MasterCard WorldWide - Common ProdInfra SSL,L=Saint Louis,ST=Missouri,C=US\", \"x-forwarded-for\": \"10.158.172.65\", \"x-forwarded-host\": \"stage.caas.mastercard.int:16181\", \"x-forwarded-server\": \"stage.caas.mastercard.int\", \"connection\": \"Keep-Alive\", \"content-length\": \"5185\" }–\n responseHeaders:\n { \"content-type\": \"application/json; charset=utf-8\", \"cache-control\": \"no-cache\", \"content-length\": 138 }\n ```\n\n### Key Errors\n\n- Child \"Key\" fails because \"key\" must be a string\n\n First, check the request and the certificate. If the request is base64 encoded the fingerprint needs to also be base64 encoded.\n\n ```bash\n [2016-01-08T15:15:11.841Z] ERROR: caas-plus/19103 on cas5stl1: Error while performing wrapped decrypt (requestId=1452266111825:cas5stl1:19103:ij51ea35:10561)\n ValidationError: child \"key\" fails because [\"key\" must be a string]\n at Object.internals.Err.toString.exports.process (/apps_01/caas-plus/v2/node_modules/joi/lib/errors.js:140:19)\n at internals.Any.applyFunctionToChildren.internals.Any._validateWithOptions (/apps_01/caas-plus/v2/node_modules/joi/lib/any.js:654:27)\n at root.validate (/apps_01/caas-plus/v2/node_modules/joi/lib/index.js:102:23)\n at Reader.getKey (/apps_01/caas-plus/v2/node_modules/hydra/lib/reader.js:85:26)\n at /apps_01/caas-plus/v2/node_modules/hydra/lib/reader.js:159:14\n at tryCatcher (/apps_01/caas-plus/v2/node_modules/ioredis/node_modules/bluebird/js/main/util.js:26:23)\n at Promise.successAdapter (/apps_01/caas-plus/v2/node_modules/ioredis/node_modules/bluebird/js/main/nodeify.js:23:30)\n ```\n\n- Child \"wrappedKey\" fails because [\"wrappedKey\" is required]\n\n In this case, check the request that is being sent.\n\n ```bash\n [2017-01-12T21:38:08.650Z] ERROR: caas-plus/24375 on cas5stl1: child \"wrappedKey\" fails because [\"wrappedKey\" is required] (requestId=1484257088623:cas5stl1:24375:ixup92jm:14324, type=response, method=post, path=/core/wrapped-decrypt, started=2017-01-12T21:38:08.623Z, elapsed=27, status=400, requestSize=35)\n requestHeaders: {\n \"host\": \"localhost30\",\n ```\n\n- Missing ASN for required tag, modulus and given data\n\n This is a case of them sending a public key with pkcs#8 instead of pkcs#1 formatting.\n\n ```bash\n [2015-08-05T15:08:20.023Z] ERROR: caas-plus/15784 on cas4stl1: (requestId=1438787300017:cas4stl1:15784:icr4s2re:30113, type=response, method=post, path=/core/wrapped-encrypt/aes-128, started=2015-08-05T15:08:20.017Z, elapsed=6, status=500, requestSize=1277, commonLogEventType=00000)\n Missing ASN for required tag, modulus and given data is { tagInfo:\n { type: 'cons',\n class: 'univ',\n tagType: 'Low',\n tagOnlyVal: '10000',\n tagCode: 48,\n title: 'sequence' },\n length: 13,\n start: 4,\n subgroups:\n [ { tagInfo:\n { type: 'prim',\n class: 'univ',\n tagType: 'Low',\n tagOnlyVal: '00110',\n tagCode: 6,\n title: 'object' },\n content: 'rsaEncryption',\n length: 9,\n start: 6 },\n { tagInfo:\n { type: 'prim',\n class: 'univ',\n tagType: 'Low',\n tagOnlyVal: '00101',\n tagCode: 5,\n title: 'null' },\n content: '',\n length: 0,\n start: 17 } ] }\n ```\n\n ```bash\n ## ASN1PARSE\n 0:d=0 hl=4 l= 290 cons: SEQUENCE\n 4:d=1 hl=2 l= 13 cons: SEQUENCE\n 6:d=2 hl=2 l= 9 prim: OBJECT :rsaEncryption\n 17:d=2 hl=2 l= 0 prim: NULL\n 19:d=1 hl=4 l= 271 prim: BIT STRING\n ```\n\n You will either need to send in pkcs#1 or ask for a feature request for us to support ```pkcs#8```.\n\n- No key with that alias could be found\n\n In this case it means that the key may not exist within the filesystem or database. In this example, no it does not. You will need to send in an onboarding request.\n\n ```bash\n [2015-06-15T23:47:02.828Z] ERROR: caas-plus/21741 on cas5stl1: Error while performing hmac verify, (req_id=1434412022773-21741-12353, commonLogEventType=00000)\n err: {\n \"code\": \"error.invalid.key.alias\",\n \"host\": \"cas5stl1\",\n \"message\": \"No key with that alias could be found.\",\n \"statusCode\": 409,\n \"name\": \"InvalidKeyAliasError\"\n }\n ```\n\n- No objects could be found with that alias\n\n This means that the key may or may not exist. If the key exists, CaaS needs a soft restart which happens automatically every four hours. The key will also need to be operator cardset protected for CaaS to be aware of it. Softcard protected keys will not be visible. If this is the case, ask KMS to reissue as cardset protected.\n\n ```bash\n [2015-05-26T13:36:38.841Z] ERROR: caas-plus/9374 on cas4stl1: Error while performing ECDH1 derive and decrypt (requestId=1432647398826:cas4stl1:9374:i9vln8dm:26997, commonLogEventType=00000, err.code=5)\n PKCS11Error: [Shield]: No objects could be found with that alias. (CK_RV: GENERAL_ERROR)\n at Object.args.(anonymous function) (/apps_01/caas-plus/v2/node_modules/shield/lib/pkcs11.js:33:33)\n ```\n\n---\n\n### Principal not authorized to work with this alias\n\n```bash\n[2015-05-15T15:47:57.713Z] INFO: caas-plus/13935 on cas4stl2: Request (req_id=1431704877712-13935-11861, type=request, method=post, path=/core/v1.0/decrypt/aes.json, commonLogEventType=00000)\n req_headers: {\n \"host\": \"localhost12\",\n \"accept\": \"application/json,text/xml\",\n \"content-type\": \"application/json\",\n \"bridgeuniqid\": \"jb4stl150189354696972428\",\n \"user-agent\": \"Apache-HttpClient/4.3.5 (java 1.5)\",\n \"via\": \"1.1 BwAAAPtiDQA-\",\n \"x-client-ip\": \"10.158.148.20\",\n \"x-global-transaction-id\": \"66178589\",\n \"x-client-cert-dn\": \"/C=US/ST=Missouri/L=Saint Louis/O=MasterCard WorldWide - Common ProdInfra SSL/OU=Client 00/CN=mdesmcc.client.mclocal.int\",\n \"forwarded-client-cert-dn\": \"CN=stage.dp.stl.mastercard.int,OU=client 03,O=Mastercard Worldwide,L=Saint Louis,ST=Missouri,C=US\",\n \"x-forwarded-for\": \"10.158.172.65\",\n \"x-forwarded-host\": \"stage.caas.mastercard.int:16181\",\n \"x-forwarded-server\": \"stage.caas.mastercard.int\",\n \"connection\": \"Keep-Alive\",\n \"content-length\": \"141\"\n }\n[2015-05-15T15:47:57.717Z] WARN: caas-plus/13935 on cas4stl2: Cache miss. Checking DB. (req_id=1431704877712-13935-11861, commonLogEventType=00000)\n[2015-05-15T15:47:57.736Z] ERROR: caas-plus/13935 on cas4stl2: Error while performing decrypyt operation (req_id=1431704877712-13935-11861, commonLogEventType=00000)\n err: {\n \"code\": \"error.client.unauthorized\",\n \"host\": \"cas4stl2\",\n \"message\": \"Principal not authorized to work with this alias\",\n \"statusCode\": 401,\n \"name\": \"UnAuthorizedAliasError\",\n \"isBoom\": true,\n \"data\": null,\n \"output\": {\n \"statusCode\": 401,\n \"payload\": {\n \"message\": \"Principal not authorized to work with this alias\",\n \"code\": \"error.client.unauthorized\",\n \"requestId\": \"1431704877712-13935-11861\",\n \"host\": \"cas4stl2\"\n },\n \"headers\": {}\n }\n }\n```\n\nThe principal is:\n\n```json\n\"x-client-cert-dn\": \"/C=US/ST=Missouri/L=Saint Louis/O=MasterCard WorldWide - Common ProdInfra SSL/OU=Client 00/CN=mdesmcc.client.mclocal.int\",\n```\n\nVerify it is a valid key and that the credential_key table has the correct access.\n\n```bash\n[2015-05-15T15:47:57.717Z] WARN: caas-plus/13935 on cas4stl2: Cache miss. Checking DB. (req_id=1431704877712-13935-11861, commonLogEventType=00000)\n```\n\nThis cache miss on a decrypt operation indicates that the cipher is not using a valid key. If there isn't a cache miss you can validate that the principal has access to the key. Check the request this is being sent. It will have in it ```{\"cipher\":\"<bunch of cipher text>\"}```\n\n__Example:__\n\n```bash\nContent-Type: application/json15\nConnection: Keep-Alive\n{\"cipher\": \"RUVDMEQyMjI2NzkwRTJDNhC9tBfzjeUvgdJ7Snate4gcvTYjQGGZGP9p8qUPUfz1jXVgPxQwVMAjHbblB3Tnfyc=\"}\n```\n\n---\n\n### SEE Machine Errors\n\n\n- ```SEE_CERT_INVALID```\n\n ```bash\n [2015-06-12T15:10:05.904Z] ERROR: caas-plus/21344 on cas4stl5: Error performing GP operation. (requestId=1434121805894:cas4stl5:21344:iah7x88b:49524, commonLogEventType=00000)\n Error: Thales error code: SEE_CERT_INVALID\n at Object.exports.create (/apps_01/caas-plus/v2/node_modules/boom/lib/index.js:21:17)\n at Object.exports.thales (/apps_01/caas-plus/v2/lib/common/errors.js:17:17)\n at Object.internals.manipulateResponse (/apps_01/caas-plus/v2/lib/gp/gp-service.js:30:21)\n at /apps_01/caas-plus/v2/lib/gp/gp-service.js:43:26\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:522:46\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:251:17\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:148:21\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:248:21\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:612:34\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:513:25\n [2015-06-12T15:10:05.907Z] ERROR: caas-p (requestId=1434121805894:cas4stl5:21344:iah7x88b:49524, type=response, method=post, path=/gp/establish-secure-session-casd, started=2015-06-12T15:10:05.894Z, elapsed=12, status=500, requestSize=1378, commonLogEventType=00000)\n requestHeaders: {\n \"host\": \"localhost24\",\n \"accept\": \"application/json,text/xml\",\n \"content-type\": \"application/json\",\n ```\n\n A request with a casdPkCert in it is being sent:\n\n ```json\n \"casdPkCert\": \"7F2181D0931000000000000000000000000000000001420200025F200200039501825F240420131231450200045F3781804D7E0752D32EE209B3910EF60B2AEF52E40EE6349B53A3A045671B0E5E23289DE3B7C9601777D502285D30875BE2078C2B0BB4AFC820A40F95C39CB4576AE108D6C6F101CBECBE9544EC7762264DBD0F0E90618C4EEDAAF478B2F95CAE29CCDBDA1C22A58C4CD06C4C1A83B37237665A72371CABAF7BAD1D1B9F4EB22E77A8235F3820EDB7FED76B485DE45BEB829A3D4730848A366D3324C3027032FF8D16A1E44D8D\",\n ```\n\n Parse the certificate to see if it is valid, which it probably is not.\n\n- ```SEE_MARSHAL_ERROR```\n\n ```bash\n [2015-07-30T17:12:19.233Z] ERROR: caas-plus/9810 on cas1stl1: Error performing GP operation. (requestId=1438276337629:cas1stl1:9810:icqfsgmx:10077, commonLogEventType=00000)\n Error: Thales error code: SEE_MARSHAL_ERROR\n at Object.exports.create (/apps_01/caas-plus/v2/node_modules/boom/lib/index.js:21:17)\n at Object.exports.thales (/apps_01/caas-plus/v2/lib/common/errors.js:17:17)\n at /apps_01/caas-plus/v2/lib/gp/gp-service.js:55:36\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:666:51\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:744:13\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:46:16\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:255:21\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:37:16\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:741:17\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:642:25\n [2015-07-30T17:12:19.235Z] ERROR: caas-plus/9810 on cas1stl1: Thales error code: SEE_MARSHAL_ERROR (requestId=1438276337629:cas1stl1:9810:icqfsgmx:10077, type=response, method=post, path=/gp/establish-secure-session-casd, started=2015-07-30T17:12:17.629Z, elapsed=1606, status=500, requestSize=1517, commonLogEventType=00000)\n ```\n\n Check the request being sent. In this case we had the wrong version of the EAR file on the server after an upgrade.\n\n- ```SEE_PARTIAL_BATCH_FAIL```\n\n ```bash\n [2015-08-10T11:31:20.718Z] ERROR: caas-plus/13579 on cas5stl1: Error while performing data prep (requestId=1439206280623:cas5stl1:13579:icz9fdv3:11156, commonLogEventType=00000)\n Error: Thales error code: SEE_PARTIAL_BATCH_FAIL\n at Object.exports.create (/apps_01/caas-plus/v2/node_modules/boom/lib/index.js:21:17)\n at Object.exports.thales (/apps_01/caas-plus/v2/lib/common/errors.js:17:17)\n at Object.internals.reformatResponse (/apps_01/caas-plus/v2/lib/emv/emv-service.js:111:23)\n at /apps_01/caas-plus/v2/lib/emv/emv-service.js:257:34\n at fn (/apps_01/caas-plus/v2/node_modules/async/lib/async.js:638:34)\n at Object._onImmediate (/apps_01/caas-plus/v2/node_modules/async/lib/async.js:554:34)\n at processImmediate [as _immediateCallback] (timers.js:354:15)\n [2015-08-10T11:31:20.720Z] ERROR: caas-plus/13579 on cas5stl1: Thales error code: SEE_PARTIAL_BATCH_FAIL (requestId=1439206280623:cas5stl1:13579:icz9fdv3:11156, type=response, method=post, path=/emv/data-prep, started=2015-08-10T11:31:20.623Z, elapsed=97, status=500, requestSize=2862, commonLogEventType=00000)\n requestHeaders: {\n ```\n\n A key identifier that is not valid for the example error above is being used.\n\n- ```SEE_RGKCERT_INVALID```\n\n ```bash\n [2015-10-06T04:14:06.488Z] ERROR: caas-plus/3888 on cas5stl1: Error performing GP operation. (requestId=1444104846472:cas5stl1:3888:if88f6f4:13123)\n Error: Thales error code: SEE_RGKCERT_INVALID\n at Object.exports.thales (/apps_01/caas-plus/v2/lib/common/errors.js:17:17)\n at /apps_01/caas-plus/v2/lib/gp/gp-service.js:55:36\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:647:51\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:697:13\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:52:16\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:267:21\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:44:16\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:694:17\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:173:37\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:623:25\n [2015-10-06T04:14:06.493Z] ERROR: caas-plus/3888 on cas5stl1: Thales error code: SEE_RGKCERT_INVALID (requestId=1444104846472:cas5stl1:3888:if88f6f4:13123, type=response, method=post, path=/gp/establish-secure-session-casd, started=2015-10-06T04:14:06.472Z, elapsed=20, status=500, requestSize=1700)\n requestHeaders: {\n \"host\": \"localhost31\",\n \"accept\": \"application/json,text/xml\",\n ```\n\n Check the request that is being sent.\n\n- ```SEE_TX_FAIL```\n\n __Access Denied__\n\n ```bash\n [2015-08-18T22:32:50.336Z] ERROR: caas-plus/32394 on cas5stl1: Error performing GP operation. (requestId=1439937170303:cas5stl1:32394:idbvrm1o:10668, commonLogEventType=00000)\n Error: Thales error code: SEE_TX_FAIL\n at Object.exports.create (/apps_01/caas-plus/v2/node_modules/boom/lib/index.js:21:17)\n at Object.exports.thales (/apps_01/caas-plus/v2/lib/common/errors.js:17:17)\n at /apps_01/caas-plus/v2/lib/gp/gp-service.js:55:36\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:666:51\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:744:13\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:46:16\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:255:21\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:37:16\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:741:17\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:642:25\n [2015-08-18T22:32:50.339Z] ERROR: caas-plus/32394 on cas5stl1: Thales error code: SEE_TX_FAIL (requestId=1439937170303:cas5stl1:32394:idbvrm1o:10668, type=response, method=post, path=/gp/establish-secure-session-casd, started=2015-08-18T22:32:50.303Z, elapsed=35, status=500, requestSize=4103, commonLogEventType=00000)\n requestHeaders: {\n \"host\": \"localhost1\",\n \"accept\": \"application/json,text/xml\",\n ```\n\n This might mean that the key was set up with the incorrect permissions where the SEE machine cannot view it. Email KMS to get that corrected.\n\n - __606 export_fips_key Rijndael__\n\n Here's another SEE_TX_FAIL:\n\n ```bash\n 2016-07-12 01:02:06,050 WARN [com.thales.esecurity.asg.mastercard.cryptoapi.cryptoservice.NShieldCryptoService] (http-127.0.0.1-25017-8) SEEJob result: 606 export_fips_key Rijndael 30d7eac6b86991f15cd6779d18e816fc8ae0981f {job: 2, source: \"source/see/keycache.c:431\"}\n 2016-07-12 01:02:06,052 ERROR [com.thales.esecurity.asg.mastercard.cryptoapi.CryptoAPIImpl] (http-127.0.0.1-25017-8) MCBP batch processing failed\n com.thales.esecurity.asg.mastercard.cryptoapi.exceptions.BuffaloExceptionSEEJob: Unexpected transaction failure\n at com.thales.esecurity.asg.mastercard.cryptoapi.cryptoservice.NShieldCryptoService.sendMarshalledSignedJob(NShieldCryptoService.java:810)\n at com.thales.esecurity.asg.mastercard.cryptoapi.cryptoservice.NShieldCryptoService.transactTicket(NShieldCryptoService.java:626)\n at com.thales.esecurity.asg.mastercard.cryptoapi.cryptoservice.NShieldCryptoService.ticketKey(NShieldCryptoService.java:499)\n ```\n\n Confirm with KMS that you have copied over the right key material. For this example, they had the right acl's but the wrong blobs. This will probably need a complete restart of all servers with the replaced key material but it may be only servers where the key material has been used.\n---\n### Thales Errors\n\n- Thales error code: ```FATAL_HSM_ERROR```\n\n If you see a permission denied error that means something probably has the wrong permissions.\n\n ```bash\n [2015-09-03T20:40:59.202Z] ERROR: caas-plus/10002 on cas5stl1: Error while performing data prep (requestId=1441312858210:cas5stl1:10002:ie4o8jax:10012, commonLogEventType=00000)\n Error: Thales error code: FATAL_HSM_ERROR\n at Object.exports.create (/apps_01/caas-plus/v2/node_modules/boom/lib/index.js:21:17)\n at Object.exports.thales (/apps_01/caas-plus/v2/lib/common/errors.js:17:17)\n at Object.internals.reformatResponse (/apps_01/caas-plus/v2/lib/emv/emv-service.js:111:23)\n at /apps_01/caas-plus/v2/lib/emv/emv-service.js:257:34\n at fn (/apps_01/caas-plus/v2/node_modules/async/lib/async.js:752:34)\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:1252:16\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:697:43\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:1248:30\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:666:51\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:744:13\n [2015-09-03T20:40:59.204Z] ERROR: caas-plus/10002 on cas5stl1: Thales error code: FATAL_HSM_ERROR (requestId=1441312858210:cas5stl1:10002:ie4o8jax:10012, type=response, method=post, path=/emv/data-prep, started=2015-09-03T20:40:58.210Z, elapsed=994, status=500, requestSize=4152, commonLogEventType=00000)\n requestHeaders: {\n \"host\": \"localhost12\",\n \"content-type\": \"application/json\",\n \"forwarded-client-cert-dn\": \"CN=caas.mastercard.int,OU=Internal Prod Client 00,O=MasterCard WorldWide - CentralAuth,DC=mastercard,DC=net\",\n \"x-forwarded-for\": \"172.19.176.207\",\n ```\n\n- Thales error code: ```KEY_IDENT_NOT_FOUND```\n\n In this case there is a key or cert. missing.\n\n ```bash\n [2015-11-04T13:17:50.513Z] ERROR: caas-plus/18898 on cas2ksc6: Error while performing data prep (requestId=1446643070419:cas2ksc6:18898:ig6arv6p:76251)\n Error: Thales error code: KEY_IDENT_NOT_FOUND\n at Object.exports.thales (/apps_01/caas-plus/v2/lib/common/errors.js:17:17)\n at Object.internals.reformatResponse(/apps_01/caas-plus/v2/lib/emv/emv-service.js:111:23)\n [2015-11-04T13:17:50.516Z] ERROR: caas-plus/18898 on cas2ksc6: Thales error code: KEY_IDENT_NOT_FOUND (requestId=1446643070419:cas2ksc6:18898:ig6arv6p:76251, type=response, method=post, path=/emv/data-prep, started=2015-11-04T13:17:50.419Z, elapsed=97, status=500, requestSize=3919)\n requestHeaders: {\n \"host\": \"localhost15\",\n \"accept\": \"application/json,text/xml\",\n \"content-type\": \"application/json\",\n ```\n\n- Thales error code: ```SEE_AID_CHECK_FAILED```\n\n An invalid AID value is being used. Make sure that a valid one is being sent.\n\n ```bash\n [2016-11-29T15:22:06.738Z] ERROR: caas-plus/17090 on cas4stl1: Error performing GP operation. (requestId=1480432926716:cas4stl1:17090:iw2iqfft:35167)\n Error: Thales error code: SEE_AID_CHECK_FAILED\n at Object.exports.thales (/apps_01/caas-plus/v2/lib/common/errors.js:12:17)\n at /apps_01/caas-plus/v2/lib/gp/gp-service.js:55:36\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:676:51\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:726:13\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:52:16\n [2016-11-29T15:22:06.741Z] ERROR: caas-plus/17090 on cas4stl1: Thales error code: SEE_AID_CHECK_FAILED (requestId=1480432926716:cas4stl1:17090:iw2iqfft:35167, type=response, method=post, path=/gp/establish-secure-session-casd, started=2016-11-29T15:22:06.716Z, elapsed=24, status=500, requestSize=1441)\n requestHeaders: {\n \"host\": \"localhost21\",\n \"accept\": \"application/json,text/xml\",\n ```\n\n- Thales error code: ```SEE_CERT_INVALID```\n\n This most likely means that the certificate is invalid. Make sure that a valid certificate is being used.\n\n ```bash\n [2016-10-11T01:05:28.980Z] ERROR: caas-plus/18071 on cas2stl8: Error performing GP operation. (requestId=1476147928835:cas2stl8:18071:iu4bzfga:15809)\n Error: Thales error code: SEE_CERT_INVALID\n at Object.exports.thales (/apps_01/caas-plus/v2/lib/common/errors.js:12:17)\n at /apps_01/caas-plus/v2/lib/gp/gp-service.js:55:36\n [2016-10-11T01:05:28.982Z] ERROR: caas-plus/18071 on cas2stl8: Thales error code: SEE_CERT_INVALID (requestId=1476147928835:cas2stl8:18071:iu4bzfga:15809, type=response, method=post, path=/gp/establish-secure-session-casd, started=2016-10-11T01:05:28.835Z, elapsed=147, status=500, requestSize=1491)\n requestHeaders: {\n \"host\": \"localhost30\",\n ```\n\n- Thales error code: ```SEE_CERT_SIG_INVALID```\n\n This means the certificate that is being specified with ``/gp/establish-secure-session-casd`` is incorrect. This can be fixed by contacting Dave Sylvester or Ritche Gumahin to troubleshoot the MDES end.\n\n ```json\n \"msg\":\"Thales error code: SEE_CERT_SIG_INVALID\",\"time\":\"2017-01-13T11:12:13.553Z\",\"v\":0}\n\n {\"name\":\"caas-plus\",\"hostname\":\"cas5stl1\",\"pid\":38464,\"requestId\":\"1484305933440:cas5stl1:38464:ixvnfeyc:10713\",\"level\":50,\"err\":{\"message\":\"Thales error code: SEE_CERT_SIG_INVALID\",\"name\":\"Error\",\"stack\":\"Error: Thales error code: SEE_CERT_SIG_INVALID\\n at Object.exports.thales (/apps_01/caas-plus/v2/lib/common/errors.js:12:17)\\n at /apps_01/caas-plus/v2/lib/gp/gp-service.js:55:36\\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:676:51\\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:726:13\\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:52:16\\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:264:21\\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:44:16\\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:723:17\\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:167:37\\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:652:25\\n at /apps_01/caas-plus/v2/lib/common/thales-client.js:53:20\\n at /apps_01/caas-plus/v2/node_modules/wreck/lib/index.js:486:20\\n at finish (/apps_01/caas-plus/v2/node_modules/wreck/lib/index.js:332:16)\\n at wrapped (/apps_01/caas-plus/v2/node_modules/hoek/lib/index.js:871:20)\\n at onReaderFinish (/apps_01/caas-plus/v2/node_modules/wreck/lib/index.js:378:16)\\n at g (events.js:260:16)\\n at emitNone (events.js:72:20)\\n at emit (events.js:166:7)\\n at finishMaybe (_stream_writable.js:481:14)\\n at endWritable (_stream_writable.js:491:3)\\n at Writable.end (_stream_writable.js:456:5)\\n at IncomingMessage.onend (_stream_readable.js:498:10)\"},\"msg\":\"Error performing GP operation.\",\"time\":\"2017-01-13T11:12:13.549Z\",\"v\":0}\n ```\n\n- Thales error code: ```SEE_KEK_NOT_CACHED```\n\n __SPECIAL HANDLING__\n\n There is a current issue with the Thales devices where if the server has been up more than ~30 days there is a chance the cache will fill up and new keys cannot be added. Thales is still investigating root cause and resolution. If an application team reports that new keys are getting this error, please perform a full restart of all servers in that environment. This can be done with an incident during a TRT or it could be a break-fix after the fact Remedy change.\n\n http://dps.dev.mastercard.net/releases/impl/fullRestart/fullRestart.Prod.html for Production\n\n http://dps.dev.mastercard.net/releases/impl/fullRestart/ for other environments\n\n ```bash\n [2017-01-18T03:17:31.893Z] ERROR: caas-plus/17752 on cas2stl1: Thales error code: SEE_KEK_NOT_CACHED (requestId=1484709448423:cas2stl1:17752:iy1vco3y:17565, type=response, method=post, path=/emv/data-prep, started=2017-01-18T03:17:28.423Z, elapsed=3469, status=500, requestSize=4238)\n requestHeaders: {\n \"host\": \"localhost22\",\n [2017-01-18T16:20:57.207Z] ERROR: caas-plus/8701 on cas2stl1: Error while performing data prep (requestId=1484756454632:cas2stl1:8701:iy2t5xxl:12937)\n Error: Thales error code: SEE_KEK_NOT_CACHED\n at Object.exports.thales (/apps_01/caas-plus/v2/lib/common/errors.js:12:17)\n at Object.internals.reformatResponse (/apps_01/caas-plus/v2/lib/emv/emv-service.js:111:23)\n at /apps_01/caas-plus/v2/lib/emv/emv-service.js:232:34\n at fn (/apps_01/caas-plus/v2/node_modules/async/lib/async.js:746:34)\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:1213:16\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:166:37\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:706:43\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:167:37\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:1209:30\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:676:51\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:726:13\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:52:16\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:264:21\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:44:16\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:723:17\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:167:37\n at /apps_01/caas-plus/v2/node_modules/async/lib/async.js:652:25\n at /apps_01/caas-plus/v2/lib/common/thales-client.js:53:20\n at /apps_01/caas-plus/v2/node_modules/wreck/lib/index.js:486:20\n at finish (/apps_01/caas-plus/v2/node_modules/wreck/lib/index.js:332:16)\n at wrapped (/apps_01/caas-plus/v2/node_modules/hoek/lib/index.js:871:20)\n at onReaderFinish (/apps_01/caas-plus/v2/node_modules/wreck/lib/index.js:378:16)\n ```\n\n This generally means the key isn't present on the server. You will need to request a ```DPAN``` range. We do not have ```FPAN``` keys on our servers.\n---"
 },
 "tags": [
  {
   "name": "Certificates",
   "description": "CaaS provides the following API methods for working with RSA certificates."
  },
  {
   "name": "Common",
   "description": "There are some APIs which are for general use and don’t really fall within a specific category. This “common” section outlines those methods."
  },
  {
   "name": "Core: Encrypt & Decrypt",
   "description": "CaaS exposes several core cryptographic functions for encryption and decryption."
  },
  {
   "name": "Core: Data Integrity",
   "description": "CaaS exposes several core cryptographic functions for data integrity."
  },
  {
   "name": "Core: Key Management",
   "description": "CaaS exposes several core cryptographic functions for key management."
  },
  {
   "name": "Core: Other",
   "description": "CaaS exposes several core cryptographic functions for general purpose use."
  },
  {
   "name": "EMV",
   "description": "This API enables both CaaS and MDES to create a secure transaction flow for ```devices``` similar to the flows for physical cards. CaaS proxies EMV functionality to the Thales service running in jboss at ```/SERWebService/EMVPrepData.json``` to accomplish this.\n"
  },
  {
   "name": "Public",
   "description": "These API’s are considered general purpose for public use. They can be handle in troubleshooting"
  },
  {
   "name": "SEE"
  },
  {
   "name": "Self Service",
   "description": "These API’s are useful for performing certain self-service functions to obtain information about your current on-boarding status with CaaS."
  },
  {
   "name": "GP",
   "description": "GP Functionality"
  },
  {
   "name": "KMS",
   "description": "Key Management Service"
  }
 ],
 "paths": {
  "/cert/rsa/generate-keypair-and-csr": {
   "post": {
    "operationId": "generateRSAKeyPairAndCSR",
    "tags": [
     "Certificates"
    ],
    "summary": "Generate RSA Key Pair and CSR",
    "description": "**Availability:** [`On-Premise`]\n",
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/GenRSAandCSRReq"
       }
      }
     }
    },
    "responses": {
     "200": {
      "description": "Returns key details and CSR.",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/GenRSAandCSRRes"
        }
       }
      }
     }
    }
   }
  },
  "/cert/ecc/generate-keypair-and-csr": {
   "post": {
    "operationId": "generateECCKeyPairAndCSR",
    "tags": [
     "Certificates"
    ],
    "summary": "Generate ECC Key Pair and CSR",
    "description": "**Availability:** [`On-Premise`]\n",
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/GenECCandCSRReq"
       }
      }
     }
    },
    "responses": {
     "200": {
      "description": "Returns key details and CSR.",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/GenECCandCSRRes"
        }
       }
      }
     }
    }
   }
  },
  "/common/batch": {
   "post": {
    "operationId": "batch",
    "tags": [
     "Common"
    ],
    "summary": "Send Batch Request",
    "description": "**Availability:** [`On-Premise`, `Cloud`]\n\n**IMPORTANT PERFORMANCE NOTE:** Internally, CaaS will execute each of your requests in sequence,\nserially (one at a time) leveraging a single worker process for the entire batch. In practice,\nthis means that in most cases, using this API will be slower than simply sending multiple\nindividual requests. This API is simply provided for convenience, not to increase performance.\n",
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/Batch"
       }
      }
     }
    },
    "responses": {
     "200": {
      "description": "Returns the response for each of the sent requests.",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/BatchRes"
        }
       }
      }
     }
    }
   }
  },
  "/core/encrypt/aes": {
   "post": {
    "operationId": "aesEncrypt",
    "tags": [
     "Core: Encrypt & Decrypt"
    ],
    "summary": "Encrypt (AES)",
    "description": "**Availability:** [`On-Premise`, `Cloud`]\n",
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/EncrAESReq"
       }
      }
     }
    },
    "responses": {
     "200": {
      "description": "Returns the cipher text.",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/EncrAESRes"
        }
       }
      }
     }
    }
   }
  },
  "/core/decrypt/aes": {
   "post": {
    "operationId": "aesDecrypt",
    "tags": [
     "Core: Encrypt & Decrypt"
    ],
    "summary": "Decrypt (AES)",
    "description": "**Availability:** [`On-Premise`, `Cloud`]\n",
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/DecrAESReq"
       }
      }
     }
    },
    "responses": {
     "200": {
      "description": "Returns the message.",
      "content": {
       "application/json": {
        "schema": {}
       }
      }
     }
    }
   }
  },
  "/core/encrypt/aes/advanced": {
   "post": {
    "operationId": "aesAdvancedEncrypt",
    "tags": [
     "Core: Encrypt & Decrypt"
    ],
    "summary": "Advanced Encrypt (AES)",
    "description": "**Availability:** [`On-Premise`, `Cloud`]\n\n**IMPORTANT NOTE ABOUT CLOUD AVAILABILITY:** `wrappedKey` is **only** supported for `Cloud` implementation(s) when the `algoritmMode` is `CBC`. Other `algorithmMode`s are not support for `Cloud` implementation(s). Instead, `alias` will need to be used. However, both `wrappedKey` and `alias` are available for the `On-Premise` implementation.\n\nIf GCM mode is used and the environment is `On-Premise` then the key must be imported as key_simple. Please work with KMS if the key needs to be reimported as key_simple.\n",
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/AdvEncrAESReq"
       }
      }
     }
    },
    "responses": {
     "200": {
      "description": "Returns the cipher text.",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/AdvEncrAESRes"
        }
       }
      }
     }
    }
   }
  },
  "/core/decrypt/aes/advanced": {
   "post": {
    "operationId": "aesAdvancedDecrypt",
    "tags": [
     "Core: Encrypt & Decrypt"
    ],
    "summary": "Advanced Decrypt (AES)",
    "description": "**Availability:** [`On-Premise`, `Cloud`]\n\n**IMPORTANT NOTE ABOUT CLOUD AVAILABILITY:** `wrappedKey` is **only** supported for `Cloud` implementation(s) when the `algoritmMode` is `CBC`. Other `algorithmMode`s are not support for `Cloud` implementation(s). Instead, `alias` will need to be used. However, both `wrappedKey` and `alias` are available for the `On-Premise` implementation.\n",
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/AdvDecrAESReq"
       }
      }
     }
    },
    "responses": {
     "200": {
      "description": "Returns the message.",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/AdvDecrAESRes"
        }
       }
      }
     }
    }
   }
  },
  "/core/encrypt/rsa/advanced": {
   "post": {
    "operationId": "rsaAdvancedEncrypt",
    "tags": [
     "Core: Encrypt & Decrypt"
    ],
    "summary": "Advanced Encrypt (RSA)",
    "description": "**Availability:** [`On-Premise`, `Cloud`]\n",
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/AdvEncrRSAReq"
       }
      }
     }
    },
    "responses": {
     "200": {
      "description": "Returns the cipher text.",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/AdvEncrRSARes"
        }
       }
      }
     }
    }
   }
  },
  "/core/decrypt/rsa/advanced": {
   "post": {
    "operationId": "rsaAdvancedDecrypt",
    "tags": [
     "Core: Encrypt & Decrypt"
    ],
    "summary": "Advanced Decrypt (RSA)",
    "description": "**Availability:** [`On-Premise`, `Cloud`]\n\n**IMPORTANT NOTE ABOUT CLOUD AVAILABILITY:** `encryptedPrivateKey` is not currently supported in the `Cloud` implementation(s). Instead, `alias` or `fingerprint` will need to be used. However, `alias`, `fingerprint`, and `encryptedPrivateKey` are available for the `On-Premise` implementation.\n",
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/AdvDecrRSAReq"
       }
      }
     }
    },
    "responses": {
     "200": {
      "description": "Returns the message.",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/AdvDecrRSARes"
        }
       }
      }
     }
    }
   }
  },
  "/core/encrypt/jwe": {
   "post": {
    "operationId": "jweEncrypt",
    "tags": [
     "Core: Encrypt & Decrypt"
    ],
    "summary": "Encrypt (JWE)",
    "description": "**Availability:** [`On-Premise`]\n\n**IMPORTANT NOTE:** Users should use ```key_simple``` instead of ```key_pkcs11``` for ```AES GCM``` cases.\n",
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/JWEEncReq"
       }
      }
     }
    },
    "responses": {
     "200": {
      "description": "Returns the cipher text.",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/JWEEncRes"
        }
       }
      }
     }
    }
   }
  },
  "/core/decrypt/jwe": {
   "post": {
    "operationId": "jweDecrypt",
    "tags": [
     "Core: Encrypt & Decrypt"
    ],
    "summary": "Decrypt (JWE)",
    "description": "**Availability:** [`On-Premise`]\n\n**IMPORTANT NOTE:** Users should use ```key_simple``` instead of ```key_pkcs11``` for ```AES GCM``` cases.\n",
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/JWEDecrReq"
       }
      }
     }
    },
    "responses": {
     "200": {
      "description": "Returns the message.",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/JWEDecrRes"
        }
       }
      }
     }
    }
   }
  },
  "/core/encrypt/jwe/advanced": {
   "post": {
    "operationId": "jweAdvancedEncrypt",
    "tags": [
     "Core: Encrypt & Decrypt"
    ],
    "summary": "Advanced Encrypt (JWE)",
    "description": "**Availability:** [`On-Premise`, `Cloud`]\n\n**IMPORTANT NOTE ABOUT CLOUD AVAILABILITY:** `A128CBC-HS256` and `A256CBC-HS512` are not supported for `Cloud` implementation(s). `A128GCM` or `A256GCM` will need to be used. However, both `A128CBC-HS256` and `A256CBC-HS512` are available for the `On-Premise` implementation.\n\nImplementation of JWE Encrypt as defined in [RFC7516](https://tools.ietf.org/html/rfc7516). This is different than th current implementation of ```/encrypt/jwe```. For example the cipher is returned in **base6url** encoding, the key size for aes-cbc and hmac-sha512 the key size is expected to be 64 bytes, the only agorithm options for key wrapping are\\: ```RSA1_5``` ```RSA-OAEP``` ```RSA-OAEP-256``` (This is also reflected in the other allowed ```wrappingKeyOptions```), and the ability to include additional headers as per the spec.\n",
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/JWEAdvEncrReq"
       }
      }
     }
    },
    "responses": {
     "200": {
      "description": "Returns the message.",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/JWEAdvEncrRes"
        }
       }
      }
     }
    }
   }
  },
  "/core/decrypt/jwe/advanced": {
   "post": {
    "operationId": "jweAdvancedDecrypt",
    "tags": [
     "Core: Encrypt & Decrypt"
    ],
    "summary": "Advanced Decrypt (JWE)",
    "description": "**Availability:** [`On-Premise`, `Cloud`]\n\n**IMPORTANT NOTE ABOUT CLOUD AVAILABILITY:** `encryptedPrivateKey` is not supported for `Cloud` implementation(s). Instead, `privateKey` will need to be used. However, both `encryptedPrivateKey` and `privateKey` are available for the `On-Premise` implementation.\n\n**ANOTHER IMPORTANT NOTE ABOUT CLOUD AVAILABILITY:** `A128CBC-HS256` and `A256CBC-HS512` are not supported for `Cloud` implementation(s). `A128GCM` or `A256GCM` will need to be used. However, both `A128CBC-HS256` and `A256CBC-HS512` are available for the `On-Premise` implementation.\n\nImplementation of JWE Decrypt as defined in [RFC7516](https://tools.ietf.org/html/rfc7516). This is **different** than the current implementation of ```/decrypt/jwe```. For example, if the cipher includes additional headers, they will also be returned (see response example). The ```unwrappingKeyOptions``` see a similar change to that of the ```wrappingKeyOptions``` for ```/encrypt/jwe/advanced``` since the only supported algorithms are\\: ```RSA1_5``` ```RSA-OAEP``` ```RSA-OAEP-256```. Ciphers are expected to be **base64url** encoded.\n",
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/JWEAdvDecrReq"
       }
      }
     }
    },
    "responses": {
     "200": {
      "description": "Returns the message.",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/JWEAvdDecrRes"
        }
       }
      }
     }
    }
   }
  },
  "/core/derive/{encryptionAlgorithm}": {
   "post": {
    "operationId": "deriveAndEncrypt",
    "tags": [
     "Core: Encrypt & Decrypt"
    ],
    "summary": "Derive and Encrypt",
    "description": "**Availability:** [`On-Premise`]\n\nIn the URL above, algorithm must be one of the following supported *encAlgorithms*.\n",
    "parameters": [
     {
      "in": "path",
      "name": "encryptionAlgorithm",
      "required": true,
      "schema": {
       "$ref": "#/components/schemas/CoreDerEncAESAlgo"
      }
     }
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/DerEncrReq"
       }
      }
     }
    },
    "responses": {
     "200": {
      "description": "Returns the encrypted cipher text.",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/DerEncrRes"
        }
       }
      }
     }
    }
   }
  },
  "/core/derive/{decryptionAlgorithm}": {
   "post": {
    "operationId": "deriveAndDecrypt",
    "tags": [
     "Core: Encrypt & Decrypt"
    ],
    "summary": "Derive and Decrypt",
    "description": "**Availability:** [`On-Premise`]\n\nIn the URL above, algorithm must be one of the following supported *decAlgorithms*.\n",
    "parameters": [
     {
      "in": "path",
      "name": "decryptionAlgorithm",
      "required": true,
      "schema": {
       "$ref": "#/components/schemas/CoreDerDecAESAlgo"
      }
     }
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/DerDecrReq"
       }
      }
     }
    },
    "responses": {
     "200": {
      "description": "Returns the decrypted message.",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/DerDecrRes"
        }
       }
      }
     }
    }
   }
  },
  "/core/wrapped-encrypt/{algorithm}": {
   "post": {
    "operationId": "wrappedEncrypt",
    "tags": [
     "Core: Encrypt & Decrypt"
    ],
    "summary": "Wrapped Encrypt",
    "description": "**Availability:** [`On-Premise`, `Cloud`]\n\nIn the URL above, algorithm must be one of the following supported *algorithms*.\n",
    "parameters": [
     {
      "in": "path",
      "name": "algorithm",
      "required": true,
      "schema": {
       "$ref": "#/components/schemas/WrappedEncDecAlgo"
      }
     }
    ],
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/WrapEncReq"
       }
      }
     }
    },
    "responses": {
     "200": {
      "description": "Returns the cipher text.",
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/WrapEncRes"
        }
       }
      }
     }
    }
   }
  },
  "/core/wrapped-decrypt": {
   "post": {
    "operationId": "wrappedDecrypt",
    "tags": [
     "Core: Encrypt & Decrypt"
    ],
    "summary": "Wrapped Decrypt",
    "description": "**Availability:** [`On-Premise`, `Cloud`]\n\n**IMPORTANT NOTE ABOUT CLOUD AVAILABILITY:** `encryptedPrivateKey` is not supported for `Cloud` implementation(s). Instead, `unwrappingKeyAlias` or `unwrappingKeyFingerprint` will need to be used. However, `encryptedPrivateKey`, `unwrappingKeyAlias`, and `unwrappingKeyFingerprint` are available for the `On-Premise` implementation.\n",
    "requestBody": {
     "content": {
      "application/json": {
       "schema": {
        "$ref": "#/components/schemas/WrapDecrReq"
       }
      }
     },
     "responses": {
      "200": {
       "description": "Returns the message.",
       "content": {
        "application/json": {
         "schema": {
          "$ref": "#/components/schemas/WrapDecrRes"
         }
        }
       }
      }
     }
    }
   },
   "/core/hash/pan": {
    "post": {
     "operationId": "hashPan",
     "tags": [
      "Core: Data Integrity"
     ],
     "summary": "Compute Digest (PAN)",
     "description": "**Availability:** [`On-Premise`, `Cloud`]\n",
     "requestBody": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/HashPanReq"
        }
       }
      }
     },
     "responses": {
      "200": {
       "description": "Returns the digest.",
       "content": {
        "application/json": {
         "schema": {
          "$ref": "#/components/schemas/HashPanRes"
         }
        }
       }
      }
     }
    }
   },
   "/core/hash/pbkdf2": {
    "post": {
     "operationId": "hashPBKDF2",
     "tags": [
      "Core: Data Integrity"
     ],
     "summary": "Compute Digest (PBKDF2)",
     "description": "**Availability:** [`On-Premise`, `Cloud`]\n",
     "requestBody": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/HashPBKDF2Req"
        }
       }
      }
     },
     "responses": {
      "200": {
       "description": "Returns the digest.",
       "content": {
        "application/json": {
         "schema": {
          "$ref": "#/components/schemas/HashPBKDF2Res"
         }
        }
       }
      }
     }
    }
   },
   "/core/hash/{algorithm}": {
    "post": {
     "operationId": "hashAlgo",
     "tags": [
      "Core: Data Integrity"
     ],
     "summary": "Compute Digest",
     "description": "**Availability:** [`On-Premise`, `Cloud`]\n\nIn the URL above, algorithm must be one of the following supported *algorithms*.\n",
     "parameters": [
      {
       "in": "path",
       "name": "algorithm",
       "required": true,
       "schema": {
        "$ref": "#/components/schemas/CoreHashAlgo"
       }
      }
     ],
     "requestBody": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/HashAlgoReq"
        }
       }
      }
     },
     "responses": {
      "200": {
       "description": "Returns the digest.",
       "content": {
        "application/json": {
         "schema": {
          "$ref": "#/components/schemas/HashAlgoRes"
         }
        }
       }
      }
     }
    }
   },
   "/core/sign/{algorithm}": {
    "post": {
     "operationId": "sign",
     "tags": [
      "Core: Data Integrity"
     ],
     "summary": "Sign",
     "description": "**Availability:** [`On-Premise`, `Cloud`]\n\n**IMPORTANT NOTE ABOUT CLOUD AVAILABILITY:** All algorithms are supported outside of `ecdsa-sha1` and `rsa-sha1` as they are not FIPS 140-2 level 3 compliant.\n\nIn the URL above, algorithm must be one of the following supported *algorithms*.\n",
     "parameters": [
      {
       "in": "path",
       "name": "algorithm",
       "required": true,
       "schema": {
        "$ref": "#/components/schemas/CoreSignAlgo"
       }
      }
     ],
     "requestBody": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/SignReq"
        }
       }
      }
     },
     "responses": {
      "200": {
       "description": "Returns the signature and request ID.",
       "content": {
        "application/json": {
         "schema": {
          "$ref": "#/components/schemas/SignRes"
         }
        }
       }
      }
     }
    }
   },
   "/core/verify/{algorithm}": {
    "post": {
     "operationId": "verify",
     "tags": [
      "Core: Data Integrity"
     ],
     "summary": "Verify",
     "description": "**Availability:** [`On-Premise`, `Cloud`]\n\n**IMPORTANT NOTE ABOUT CLOUD AVAILABILITY:** All algorithms are supported outside of `ecdsa-sha1` and `rsa-sha1` as they are not FIPS 140-2 level 3 compliant.\n\nIn the URL above, algorithm must be one of the following supported *algorithms*.\n",
     "parameters": [
      {
       "in": "path",
       "name": "algorithm",
       "required": true,
       "schema": {
        "$ref": "#/components/schemas/CoreVerifyAlgo"
       }
      }
     ],
     "requestBody": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/VerReq"
        }
       }
      }
     },
     "responses": {
      "200": {
       "description": "Returns if the signature is verifiable.",
       "content": {
        "application/json": {
         "schema": {
          "$ref": "#/components/schemas/VerRes"
         }
        }
       }
      }
     }
    }
   },
   "/core/android-pay/verify-and-decrypt": {
    "post": {
     "operationId": "androidPayVerifyAndDecrypt",
     "tags": [
      "Core: Data Integrity"
     ],
     "summary": "Verify and Decrypt (Android Pay)",
     "description": "**Availability:** [`On-Premise`]\n",
     "requestBody": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/AndrVerDecrReq"
        }
       }
      }
     },
     "responses": {
      "200": {
       "description": "Returns whether the payment token is verifiable and token data.",
       "content": {
        "application/json": {
         "schema": {
          "$ref": "#/components/schemas/AndrVerDecrRes"
         }
        }
       }
      }
     }
    }
   },
   "/core/apple-pay/verify-and-decrypt": {
    "post": {
     "operationId": "applePayVerifyAndDecrypt",
     "tags": [
      "Core: Data Integrity"
     ],
     "summary": "Verify and Decrypt (Apple Pay)",
     "description": "**Availability:** [`On-Premise`]\n",
     "requestBody": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/ApplVerDecrReq"
        }
       }
      }
     },
     "responses": {
      "200": {
       "description": "Returns whether the payment token is verifiable and token data.",
       "content": {
        "application/json": {
         "schema": {
          "$ref": "#/components/schemas/ApplVerDecrRes"
         }
        }
       }
      }
     }
    }
   },
   "/core/random/bytes": {
    "post": {
     "operationId": "randomBytes",
     "tags": [
      "Core: Other"
     ],
     "summary": "Random Bytes",
     "description": "**Availability:** [`On-Premise`, `Cloud`]\n\nGenerate a set number of random bytes.\n",
     "requestBody": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/RandBytesReq"
        }
       }
      }
     },
     "responses": {
      "200": {
       "description": "Returns the random bytes.",
       "content": {
        "application/json": {
         "schema": {
          "$ref": "#/components/schemas/RandBytesRes"
         }
        }
       }
      }
     }
    }
   },
   "/core/generate/rsa": {
    "post": {
     "operationId": "generateRSA",
     "tags": [
      "Core: Key Management"
     ],
     "summary": "Generate RSA Key Pair and Wrap AES",
     "description": "**Availability:** [`On-Premise`]\n",
     "requestBody": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/GenKeyPairRSAReq"
        }
       }
      }
     },
     "responses": {
      "200": {
       "description": "Returns the public and encrypted private key.",
       "content": {
        "application/json": {
         "schema": {
          "$ref": "#/components/schemas/GenKeyPairRSARes"
         }
        }
       }
      }
     }
    }
   },
   "/core/generate/ecc": {
    "post": {
     "operationId": "generateECC",
     "tags": [
      "Core: Key Management"
     ],
     "summary": "Generate Elliptic Curve Key Pair and Wrap AES",
     "description": "**Availability:** [`On-Premise`]\n",
     "requestBody": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/GenKeyPairECCReq"
        }
       }
      }
     },
     "responses": {
      "200": {
       "description": "Returns the public and encrypted private key.",
       "content": {
        "application/json": {
         "schema": {
          "$ref": "#/components/schemas/GenKeyPairECCRes"
         }
        }
       }
      }
     }
    }
   },
   "/core/generate/secret-key": {
    "post": {
     "operationId": "generateSecretKey",
     "tags": [
      "Core: Key Management"
     ],
     "summary": "Generates Secret Key and Wrap AES",
     "description": "**Availability:** [`On-Premise`, `Cloud`]\n",
     "requestBody": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/GenSecKeyReq"
        }
       }
      }
     },
     "responses": {
      "200": {
       "description": "Returns the encrypted secret key.",
       "content": {
        "application/json": {
         "schema": {
          "$ref": "#/components/schemas/GenSecKeyRes"
         }
        }
       }
      }
     }
    }
   },
   "/emv/data-prep": {
    "post": {
     "operationId": "dataPrep",
     "tags": [
      "EMV"
     ],
     "summary": "Prepare Data",
     "description": "**Availability:** [`On-Premise`]\n\nAllows for multiples EMV requests to be completed in one request.\n",
     "requestBody": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/DataPrepReq"
        }
       }
      }
     },
     "responses": {
      "200": {
       "description": "Returns the response to the sent requests.",
       "content": {
        "application/json": {
         "schema": {
          "$ref": "#/components/schemas/DataPrepRes"
         }
        }
       }
      }
     }
    }
   },
   "/emv/get-issuer-cert": {
    "post": {
     "operationId": "getIssuerCert",
     "tags": [
      "EMV"
     ],
     "summary": "Retrieve Issuer Certificate",
     "description": "**Availability:** [`On-Premise`]\n",
     "requestBody": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/GetIssuerCert"
        }
       }
      },
      "responses": {
       "200": {
        "description": "Returns the issuer's certificate details.",
        "content": {
         "application/json": {
          "schema": {
           "$ref": "#/components/schemas/GetIssuerCertRes"
          }
         }
        }
       }
      }
     }
    },
    "/emv/derive-3des-key": {
     "post": {
      "operationId": "derive3DESKey",
      "tags": [
       "EMV"
      ],
      "summary": "ICC Tripple DES Key Derivation",
      "description": "**Availability:** [`On-Premise`]\n",
      "requestBody": {
       "content": {
        "application/json": {
         "schema": {
          "$ref": "#/components/schemas/DeriveTripleDESReq"
         }
        }
       }
      },
      "responses": {
       "200": {
        "description": "Returns the derived key's details.",
        "content": {
         "application/json": {
          "schema": {
           "$ref": "#/components/schemas/DeriveTripleDESRes"
          }
         }
        }
       }
      }
     }
    },
    "/emv/create-icc-key-and-cert": {
     "post": {
      "operationId": "createICCKeyAndCert",
      "tags": [
       "EMV"
      ],
      "summary": "ICC Certificate Generation",
      "description": "**Availability:** [`On-Premise`]\n",
      "requestBody": {
       "content": {
        "application/json": {
         "schema": {
          "$ref": "#/components/schemas/GenCertReq"
         }
        }
       }
      },
      "responses": {
       "200": {
        "description": "Returns the key and certificate details.",
        "content": {
         "application/json": {
          "schema": {
           "$ref": "#/components/schemas/GenCertRes"
          }
         }
        }
       }
      }
     }
    },
    "/emv/create-iv-and-cvc": {
     "post": {
      "operationId": "createIVAndCVC",
      "tags": [
       "EMV"
      ],
      "summary": "Generate IV and CVC",
      "description": "**Availability:** [`On-Premise`]\n",
      "requestBody": {
       "content": {
        "application/json": {
         "schema": {
          "$ref": "#/components/schemas/GenIVandCVCReq"
         }
        }
       }
      },
      "responses": {
       "200": {
        "description": "Returns the ```IVCVC3``` details.",
        "content": {
         "application/json": {
          "schema": {
           "$ref": "#/components/schemas/GenIVandCVCRes"
          }
         }
        }
       }
      }
     }
    },
    "/emv/calculate-cvc": {
     "post": {
      "operationId": "calculateCVC",
      "tags": [
       "EMV"
      ],
      "summary": "Generate CVC",
      "description": "**Availability:** [`On-Premise`]\n",
      "requestBody": {
       "content": {
        "application/json": {
         "schema": {
          "$ref": "#/components/schemas/GenCVCReq"
         }
        }
       }
      },
      "responses": {
       "200": {
        "description": "Returns the CVC details.",
        "content": {
         "application/json": {
          "schema": {
           "$ref": "#/components/schemas/GenCVCRes"
          }
         }
        }
       }
      }
     }
    },
    "/emv/encrypt-request": {
     "post": {
      "operationId": "encryptRequest",
      "tags": [
       "EMV"
      ],
      "summary": "Encrypt EMV Data.",
      "description": "**Availability:** [`On-Premise`]\n",
      "requestBody": {
       "content": {
        "application/json": {
         "schema": {
          "$ref": "#/components/schemas/EMVEncReq"
         }
        }
       }
      },
      "responses": {
       "200": {
        "description": "Returns the encrypted data.",
        "content": {
         "application/json": {
          "schema": {
           "$ref": "#/components/schemas/EMVEncRes"
          }
         }
        }
       }
      }
     }
    },
    "/emv/decrypt-request": {
     "post": {
      "operationId": "decryptRequest",
      "tags": [
       "EMV"
      ],
      "summary": "Decrypt EMV Data",
      "description": "**Availability:** [`On-Premise`]\n",
      "requestBody": {
       "content": {
        "application/json": {
         "schema": {
          "$ref": "#/components/schemas/EMVDecReq"
         }
        }
       }
      },
      "responses": {
       "200": {
        "description": "Returns the encrypted data.",
        "content": {
         "application/json": {
          "schema": {
           "$ref": "#/components/schemas/EMVDecRes"
          }
         }
        }
       }
      }
     }
    },
    "/public/mirror": {
     "post": {
      "operationId": "mirror",
      "tags": [
       "Public"
      ],
      "summary": "Mirror Request",
      "description": "**Availability:** [`On-Premise`, `Cloud`]\n",
      "requestBody": {
       "content": {
        "application/json": {
         "schema": {
          "$ref": "#/components/schemas/Mirror"
         }
        }
       }
      },
      "responses": {
       "200": {
        "description": "POST /public/mirror HTTP/1.1\n<br/><br/>\nHEADERS\nhost: localhost:3000 <br/>\nconnection: keep-alive <br/>\ncontent-length: 24 <br/>\ncache-control: no-cache <br/>\ncontent-type: application/json <br/>\nuser-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.97 Safari/537.36 <br/>\nforwarded-client-cert-dn: cn=test <br/>\naccept: \\*/\\* <br/>\naccept-encoding: gzip, deflate <br/>\naccept-language: en-US,en;q=0.8,fr;q=0.6 <br/>\n<br/>\nBODY\n{\n \"message\": \"foo\"\n}\n",
        "headers": {
         "host": {
          "description": "The host where the request was sent to.",
          "schema": {
           "type": "string"
          }
         },
         "connection": {
          "description": "i.e. (keep-alive)",
          "schema": {
           "type": "string"
          }
         },
         "content-length": {
          "description": "The length of the request body in octets.",
          "schema": {
           "type": "integer"
          }
         },
         "cache-control": {
          "description": "Used to specify directives that must be obeyed by all caching mechanisms along the request-response chain.",
          "schema": {
           "type": "string"
          }
         },
         "content-type": {
          "description": "i.e. (application/json)",
          "schema": {
           "type": "string"
          }
         },
         "user-agent": {
          "description": "The user agent string of the user agent.",
          "schema": {
           "type": "string"
          }
         },
         "forwarded-client-cert-dn": {
          "description": "i.e. (cn=test)",
          "schema": {
           "type": "string"
          }
         },
         "accept": {
          "description": "Types that are acceptable for the response",
          "schema": {
           "type": "string"
          }
         },
         "accept-encoding": {
          "description": "Encoding(s) that is acceptable.",
          "schema": {
           "type": "string"
          }
         },
         "accept-language": {
          "description": "language(s) that is acceptable",
          "schema": {
           "type": "string"
          }
         }
        }
       }
      }
     }
    },
    "/public/services": {
     "get": {
      "operationId": "services",
      "tags": [
       "Public"
      ],
      "summary": "Fetch Services",
      "description": "**Availability:** [`On-Premise`]\n",
      "responses": {
       "200": {
        "description": "Returns the services currently available.",
        "content": {
         "application/json": {
          "schema": {
           "$ref": "#/components/schemas/ServicesRes"
          }
         }
        }
       }
      }
     }
    },
    "/see/cms/common": {
     "post": {
      "operationId": "common",
      "tags": [
       "SEE"
      ],
      "summary": "Proxy CMS Common Functionality",
      "description": "**Availability:** [`On-Premise`]\n",
      "requestBody": {
       "content": {
        "application/json": {
         "schema": {
          "$ref": "#/components/schemas/CMSComReq"
         }
        }
       }
      },
      "responses": {
       "200": {
        "description": "Returns the response information for each sent request.",
        "content": {
         "application/json": {
          "schema": {
           "$ref": "#/components/schemas/CMSComRes"
          }
         }
        }
       }
      }
     }
    },
    "/see/cms/mobile": {
     "post": {
      "operationId": "mobile",
      "tags": [
       "SEE"
      ],
      "summary": "Proxy CMS Mobile Functionality",
      "description": "**Availability:** [`On-Premise`]\n",
      "requestBody": {
       "content": {
        "application/json": {
         "schema": {
          "$ref": "#/components/schemas/CMSMobReq"
         }
        }
       }
      },
      "responses": {
       "200": {
        "description": "Returns the response information for each sent request.",
        "content": {
         "application/json": {
          "schema": {
           "$ref": "#/components/schemas/CMSMobRes"
          }
         }
        }
       }
      }
     }
    },
    "/see/cms/pan": {
     "post": {
      "operationId": "pan",
      "tags": [
       "SEE"
      ],
      "summary": "Proxy CMS PAN Functionality",
      "description": "**Availability:** [`On-Premise`]\n",
      "requestBody": {
       "content": {
        "application/json": {
         "schema": {
          "$ref": "#/components/schemas/CMSPanReq"
         }
        }
       }
      },
      "responses": {
       "200": {
        "description": "Returns the response information for each sent request.",
        "content": {
         "application/json": {
          "schema": {
           "$ref": "#/components/schemas/CMSPanRes"
          }
         }
        }
       }
      }
     }
    },
    "/see/generate-mac": {
     "post": {
      "operationId": "generateMAC",
      "tags": [
       "SEE"
      ],
      "summary": "Proxy CMS MAC Functionality",
      "description": "**Availability:** [`On-Premise`]\n",
      "requestBody": {
       "content": {
        "application/json": {
         "schema": {
          "$ref": "#/components/schemas/CMSGenMacReq"
         }
        }
       }
      },
      "responses": {
       "200": {
        "description": "Returns the MAC(s).",
        "content": {
         "application/json": {
          "schema": {
           "$ref": "#/components/schemas/CMSGenMacRes"
          }
         }
        }
       }
      }
     },
     "/see/generate-cryptogram": {
      "post": {
       "operationId": "generateCryptogram",
       "tags": [
        "SEE"
       ],
       "summary": "Proxy CMS Cryptogram Functionality",
       "description": "**Availability:** [`On-Premise`]\n\nProxy the CMS to generate a cryptogram(s). This will also return unique numbers ```(UN)``` as requested.\n",
       "requestBody": {
        "content": {
         "application/json": {
          "schema": {
           "$ref": "#/components/schemas/CMSGenCryptogramReq"
          }
         }
        }
       },
       "responses": {
        "200": {
         "description": "Returns the MAC(s).",
         "content": {
          "application/json": {
           "schema": {
            "$ref": "#/components/schemas/CMSGenCryptogramRes"
           }
          }
         }
        }
       }
      }
     },
     "/see/generate-dtd": {
      "post": {
       "operationId": "generateDTD",
       "tags": [
        "SEE"
       ],
       "summary": "Proxy CMC DTD Functionality",
       "description": "**Availability:** [`On-Premise`]\n\nProxy the CMS to generate a Dynamic Token Data (DTD).\n",
       "requestBody": {
        "content": {
         "application/json": {
          "schema": {
           "$ref": "#/components/schemas/CMSGenDtdReq"
          }
         }
        }
       },
       "responses": {
        "200": {
         "description": "Returns the DTD.",
         "content": {
          "application/json": {
           "schema": {
            "$ref": "#/components/schemas/CMSGenDtdRes"
           }
          }
         }
        }
       }
      }
     },
     "/self-service/info": {
      "get": {
       "operationId": "info",
       "tags": [
        "Self Service"
       ],
       "summary": "Fetch Client Records",
       "description": "**Availability:** [`On-Premise`, `Cloud`]\n",
       "responses": {
        "200": {
         "description": "Returns the services and other information regarding your onboarding status with CaaS.",
         "content": {
          "application/json": {
           "schema": {
            "$ref": "#/components/schemas/SelfServiceRes"
           }
          }
         }
        }
       }
      }
     },
     "/gp/establish-secure-session-std": {
      "post": {
       "operationId": "establishSecureSessionSTD",
       "tags": [
        "GP"
       ],
       "summary": "Establish A Secure Session (STD)",
       "description": "**Availability:** [`On-Premise`]\n",
       "requestBody": {
        "content": {
         "application/json": {
          "schema": {
           "$ref": "#/components/schemas/SecSesSTDReq"
          }
         }
        }
       },
       "responses": {
        "200": {
         "description": "Returns the session information.",
         "content": {
          "application/json": {
           "schema": {
            "$ref": "#/components/schemas/SecSesSTDRes"
           }
          }
         }
        }
       }
      }
     },
     "/gp/establish-secure-session-casd": {
      "post": {
       "operationId": "establishSecureSessionCASD",
       "tags": [
        "GP"
       ],
       "summary": "Establish A Secure Session (CASD)",
       "description": "**Availability:** [`On-Premise`]\n",
       "requestBody": {
        "content": {
         "application/json": {
          "schema": {
           "$ref": "#/components/schemas/SecSesCASDReq"
          }
         }
        }
       },
       "responses": {
        "200": {
         "description": "Returns the session information.",
         "content": {
          "application/json": {
           "schema": {
            "$ref": "#/components/schemas/SecSesCASDRes"
           }
          }
         }
        }
       }
      }
     },
     "/gp/prepare-perso-commands": {
      "post": {
       "operationId": "preparePersoCommands",
       "tags": [
        "GP"
       ],
       "summary": "Prepare Perso Commands",
       "description": "**Availability:** [`On-Premise`]\n",
       "requestBody": {
        "content": {
         "application/json": {
          "schema": {
           "$ref": "#/components/schemas/PreparePersoComReq"
          }
         }
        }
       },
       "responses": {
        "200": {
         "description": "Returns the apdus.",
         "content": {
          "application/json": {
           "schema": {
            "$ref": "#/components/schemas/PreparePersoComRes"
           }
          }
         }
        }
       }
      }
     },
     "/gp/secure-scripts": {
      "post": {
       "operationId": "secureScripts",
       "tags": [
        "GP"
       ],
       "summary": "Secure Scripts",
       "description": "**Availability:** [`On-Premise`]\n",
       "requestBody": {
        "content": {
         "application/json": {
          "schema": {
           "$ref": "#/components/schemas/SecureScrReq"
          }
         }
        }
       },
       "responses": {
        "200": {
         "description": "Returns the apdus and icv.",
         "content": {
          "application/json": {
           "schema": {
            "$ref": "#/components/schemas/SecureScrRes"
           }
          }
         }
        }
       }
      }
     },
     "/gp/put-key-std": {
      "post": {
       "operationId": "putKeySTD",
       "tags": [
        "GP"
       ],
       "summary": "Put Key STD",
       "description": "**Availability:** [`On-Premise`]\n",
       "requestBody": {
        "content": {
         "application/json": {
          "schema": {
           "$ref": "#/components/schemas/PutKeySTDReq"
          }
         }
        }
       },
       "responses": {
        "200": {
         "description": "Returns the apdus.",
         "content": {
          "application/json": {
           "schema": {
            "$ref": "#/components/schemas/PutKeySTDRes"
           }
          }
         }
        }
       }
      }
     },
     "/gp/put-key-casd": {
      "post": {
       "operationId": "putKeyCASD",
       "tags": [
        "GP"
       ],
       "summary": "Put Key CASD",
       "description": "**Availability:** [`On-Premise`]\n",
       "requestBody": {
        "content": {
         "application/json": {
          "schema": {
           "$ref": "#/components/schemas/PutKeyCASDReq"
          }
         }
        }
       },
       "responses": {
        "200": {
         "description": "Returns the apdus.",
         "content": {
          "application/json": {
           "schema": {
            "$ref": "#/components/schemas/PutKeySTDRes"
           }
          }
         }
        }
       }
      }
     },
     "/gp/verify-with-certificate": {
      "post": {
       "operationId": "verifyWithCertificate",
       "tags": [
        "GP"
       ],
       "summary": "Verify With Certificate",
       "description": "**Availability:** [`On-Premise`]\n",
       "requestBody": {
        "content": {
         "application/json": {
          "schema": {
           "$ref": "#/components/schemas/VerrifyWithCertReq"
          }
         }
        }
       },
       "responses": {
        "200": {
         "description": "Returns whether it was verifiable.",
         "content": {
          "application/json": {
           "schema": {
            "$ref": "#/components/schemas/VerrifyWithCertRes"
           }
          }
         }
        }
       }
      }
     },
     "/kms/generate-mdes-keyset": {
      "post": {
       "operationId": "generateMDESKeyset",
       "tags": [
        "KMS"
       ],
       "summary": "Generate MDES Keyset",
       "description": "**Availability:** [`On-Premise`]\n",
       "requestBody": {
        "content": {
         "application/json": {
          "schema": {
           "$ref": "#/components/schemas/MDESGenerateKeySetReq"
          }
         }
        }
       },
       "responses": {
        "200": {
         "description": "Returns the request status.",
         "content": {
          "application/json": {
           "schema": {
            "$ref": "#/components/schemas/MDESKeySet"
           }
          }
         }
        }
       }
      }
     },
     "/kms/delete-mdes-keyset": {
      "put": {
       "operationId": "deleteMDESKeyset",
       "tags": [
        "KMS"
       ],
       "summary": "Delete MDES Keyset",
       "description": "**Availability:** [`On-Premise`]\n",
       "requestBody": {
        "content": {
         "application/json": {
          "schema": {
           "$ref": "#/components/schemas/MDESDeleteKeySetReq"
          }
         }
        }
       },
       "responses": {
        "204": {
         "description": "Confirms that the key deletion payload has been accepted."
        }
       }
      }
     },
     "/kms/mdes-keyset-status": {
      "post": {
       "operationId": "mdesKeysetStatus",
       "tags": [
        "KMS"
       ],
       "summary": "Check Keyset Status",
       "description": "**Availability:** [`On-Premise`]\n",
       "requestBody": {
        "content": {
         "application/json": {
          "schema": {
           "$ref": "#/components/schemas/MDESGenerateKeyStatusReq"
          }
         }
        }
       },
       "responses": {
        "200": {
         "description": "Returns the request status.",
         "content": {
          "application/json": {
           "schema": {
            "$ref": "#/components/schemas/MDESKeySetStatus"
           }
          }
         }
        }
       }
      }
     },
     "/kms/get-certificate-chain": {
      "post": {
       "operationId": "getCertificateChain",
       "tags": [
        "KMS"
       ],
       "summary": "Get Certificate Chain",
       "description": "```DEPRECATED FOR NEW USE BY CLIENTS```\n\n**Availability:** [`On-Premise`, `Cloud`]\n\n**IMPORTANT NOTE ABOUT CLOUD AVAILABILITY:** If you need to utilize this endpoint, please work with PKI to generate the key pair, certificate chain, etc. for use. Once completed, please reach out to DPS with the certificate chain you need delivered to the `Cloud` implementation to make it available for use with this endpoint.\n\nAnyone wishing to use this API must first request a certificate\nchain by contacting KMS Services [Key_Management@mastercard.com](mailto:Key_Management@mastercard.com). They will deliver the certificate chain which\nis stored at _/apps_data_01/security/certificate_chain/_.\n\n**NOTE:** This certificate chain needs to be requested with an ```all lowercase filename```.\n",
       "requestBody": {
        "content": {
         "application/json": {
          "schema": {
           "$ref": "#/components/schemas/GetCertChain"
          }
         }
        }
       },
       "responses": {
        "200": {
         "description": "Returns the certificate chain and information.",
         "content": {
          "application/json": {
           "schema": {
            "$ref": "#/components/schemas/GetCertChainRes"
           }
          }
         }
        }
       }
      }
     },
     "/synthetic/get-slot-list": {
      "get": {
       "operationId": "getSlotList",
       "tags": [
        "Synthetic"
       ],
       "summary": "Get a list of available slots.",
       "description": "**Availability:** [`Cloud`]\n\nThis synthetics endpoint should be used to r",
       "responses": {
        "200": {
         "description": "Returns a list of the available slots.",
         "content": {
          "application/json": {
           "schema": {
            "$ref": "#/components/schemas/GetSlotList"
           }
          }
         }
        }
       }
      }
     }
    },
    "components": {
     "schemas": {
      "GenRSAandCSRReq": {
       "type": "object",
       "required": [
        "moduleBits",
        "subject"
       ],
       "properties": {
        "alias": {
         "type": "string",
         "description": "The key to use when encrypting the generated private key material. This field is optional, and if it is not specified, the default AES encryption key for your client will be used."
        },
        "moduleBits": {
         "type": "integer",
         "description": "The length of the key to be generated (in bits). This cannot be less than 2048."
        },
        "subject": {
         "$ref": "#/components/schemas/Subject"
        }
       },
       "example": {
        "alias": "verify-aes-256",
        "modulusBits": 2048,
        "subject": {
         "commonName": "server.example.com",
         "organizationName": "Acme Co. Ltd.",
         "organizationalUnitName": "Information Security",
         "localityName": "St. Louis",
         "stateOrProvinceName": "MO",
         "countryName": "USA"
        }
       }
      },
      "GenRSAandCSRRes": {
       "type": "object",
       "properties": {
        "encryptedPrivateKey": {
         "type": "string",
         "format": "byte",
         "description": "A byte-string containing the encrypted private key material that corresponds to the CSR."
        },
        "csr": {
         "type": "string",
         "format": "byte",
         "description": "The PEM-encoded byte-sting certificate signing request generated using the key material."
        },
        "requestId": {
         "type": "string",
         "description": "Request ID which can be used to track the status of the request."
        }
       },
       "example": {
        "encryptedPrivateKey": "Q0Q4NkE1QkNFNTkyRDkwNRCA8LLzPG0YPy0GtAjEH8342Vwp71HBcUiR8tTIRGpFr\nhsDXMo41/QjAhdkZDIoCRIKoLzrg5VF++DkDgjjRmUa1EbusXiOAn5k3kTlXKTwfA\njHQ8g4Z1KzQLl3u1ufnbMYj9DqnPXAZtBLYWyTQpu/+kLEiDmKrpgdAqmZVD58oic\nAK2F8qlJGaSjI3I1nITkz7OzxpJqt458WfnnflpzGo7vmZ7KEhWgUvg6W1EAT0E7wx\nf3BhFOwxb9Q/Pn4j/k0HKpD8lilDimU2gpD++GOzQR1bUi5ZkJRIfRF5dqYl1jpKE\n/70zMphSO/mkqVi96CXoKZ2E1uNbEfLFlqcB/RcCNEgRsWGPCeXufGpQ9aeBvTR9d\n9jEfC4VtOG3VC+ygyMx7z4dChiFHU2rPCkDcT3wrKgV+BtR0ZP5GbZ2AkHQgYp1Wk\nj0VUX9WxDie6fmI00QrtZhuxvXfuqXyrZo1aFRHF7Z1IMjMJHf7JmlpzgDgHqbw4n\nXYxtr+7LibZos1L0hGcYaZuR8kKMisvjRcUwJJhGmW1iK219iiQr9r1uQ8mafzq+L\nwY+l+3DvfB5qexKhaz5rtLME9/GhQUbzykv+2siea+1WVAVQ4HQBjAsbd9/KvbILK\nfymTaxOC2g8sYdwCN3AWyxzEeR4Pl/e3uTy4wQ8tBiYrIJ+n0PXBnF3ZtQ+Bdftnv\nOoYkCt2ZTcCS3ZBzMVQIdai7SSfR00KAoh5Z55MwvVR4UwRp31jWQ1uiEwcdCuB3p\nglbCgZkyhKsUkKVSDIcgVqD2rmvPNCH9TBz7Ji1fTqAbFk2LohalJjJ2OSisnbJ69\nzSoo3y9gly8Lf37G7hueeSDuScCYpl/byoE4AaKUpviEiEfsGTPRqCLe9xJ5qIuwn\nPGF3I2UTju8oongSBB8APqDYRT5zZL5eVzHHT2TC2QqJOr/V2NwErsVyqvJqgTHcK\n0PXLCPSZMQ1CDOocfuxyVynAze/MKr3ARXfnbDrhfiVRvlhtBaa2M0DBup+L/R1+04\nQutgad3nnXYqHjNdE3CQIWjMKwHrPGiYfKvDygpodmyAPDcL+UTsGbITpRLdkHuHM\nw1bPWynHjNeOMrMBA2VW/3C5jmws9aGi5X24MJvNJ/zAEvK3GfSOdV0ZwmSlPoa6R\nMam+LCIp7/ZJaq3JVzIEhWkKLtrCTQKs53r34vZ9yUE9VunnFlLHXgd/6dZV2AJc6\ncF8X8Cyp6/yVv/8hx0qih/LCn72LDrZLhpmc1JnjBvpE/uUVcdoH1z60gyEoq1+oi\nAWKmXWjDplLjqnIqhKhi7yMr3l/JVzOmzmbNJQA9DtyEQc23zfEUENzIapw7EMK9V\nrT6zCMC7wfdH59rJD5oJksDDm/uyPkDUWoBiYWAHCJVqA7fRQ+BLGgjIFURMGn2Pr\nq/r/BPNjQU4VRcN37QaPh1u5WNuZs1Rwr8MlSKyxy1l+Jtz5MAf5lgSxTXlSL9bS0\nkVo83ClR1RyEduxeXYgeQGwmRjzhyaFuG7LjZgVw8BZxQKpzVgtGQJERGDvQhfnvx\nc1Tcg+RISIhP0raMFDwWvG5ZopjIxptVbYSIyt+kBtWIQSrUchrlZ8qaNAZ9M4/my\nYtVnMA/WUFDlP8ZEznXdIF5OTD2u9G5P//eSNqTRymfxSs4YDS+ZRq8RDnvU=\n",
        "csr": "-----BEGIN CERTIFICATE REQUEST-----\nMIICvjCCAaYCAQAweTF3MAoGA1UEBhMDVVNBMAkGA1UECBMCTU8wEAYDVQQHEwlT\ndC4gTG91aXMwFAYDVQQKEw1BY21lIENvLiBMdGQuMBsGA1UECxMUSW5mb3JtYXRp\nb24gU2VjdXJpdHkwGQYDVQQDExJzZXJ2ZXIuZXhhbXBsZS5jb20wggEiMA0GCSqG\nSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDZVZWP/vQE3TEwD44sPOguKHXhLH3GwLT8\n20lBL6iLh8AdLSJFuD9zq27N9A0Q4g4JWgoSeuJcthR61icYUtwXeFnDs+EX9/D9\nzjd9qq6NzPsIk18X2YoZGs2LPwm9iWFkylZFzyMR6vuVM/wt9nYzlVoDLBqiQa8g\nZL8YFFv2vB20WYYbvU8xReg5jEp/eoFgruYewZdz50cernSIhIzMu7an33v8mytl\n4kPSHNBeghXqHsA5y1TbX5V8AfZ1W8G18RZ1S/YFQUGSYzU0Q8pENhikfaLBF3VQ\nrPDJ0Bb5v8UAXq1NxMmK9Ao41QNaigyhsWHgPiMwU8zMTfztX9bDAgMBAAGgADAN\nBgkqhkiG9w0BAQUFAAOCAQEARqJ4XcMWnd093moWdICtOdvNZ5NwgWoT9lP2MI5e\nurPBT4j5rLX7QzPYJJikYS9XpF96SRKsyh2A1VoLJ0J9uyt45sSPTY4DneGZelFr\ncLGuNpywup5xD1QmuhdI1K7d9q5suZLWNFTM6TWyGnkto+7KaP9hPyUNzG3cmAVR\nMjLn+cZneDR/GO4mqJCuLqLru05hkTUcnzIocCtBYvUCU3Ac+QPFtHyIhS22YqYT\n2L04lu0VsQkNE3Foj6/9scehkYLpOTMin05F/Ng2k/qEFaKIqmYDmRW7NMoc3SAJ\nvrjdSZ8rqdk2+qj0zFGsKj6AZP4bNhxZGK52dkXvrCKAlg==\n-----END CERTIFICATE REQUEST-----\n",
        "requestId": "1522769031391:cas0stl2:8511:jfd00sar:22733"
       }
      },
      "GenECCandCSRReq": {
       "type": "object",
       "required": [
        "curveName",
        "subject"
       ],
       "properties": {
        "appleFormat": {
         "type": "boolean",
         "description": "A flag indicating what type of CSR to generate. An Apple formatted CSR differ from regular CSR in 4 areas, Subject is a sequence of multiple sets, ECDSA signature is asn1 encoded vs concatenated x and y components/schemas, Email is a required field, and extensions will not present if null."
        },
        "alias": {
         "type": "string",
         "description": "The key to use when encrypting the generated private key material. This field is optional, and if it is not specified, the default AES encryption key for your client will be used."
        },
        "curveName": {
         "type": "string",
         "description": "The name of the prime curve to use when generating the key pair. Currently, only \"prime256v1\" is supported."
        },
        "subject": {
         "$ref": "#/components/schemas/Subject"
        }
       },
       "example": {
        "appleFormat": true,
        "alias": "verify-aes-256",
        "curveName": "prime256v1",
        "subject": {
         "emailAddress": "test@test.com",
         "commonName": "server.example.com",
         "organizationName": "Acme Co. Ltd.",
         "organizationalUnitName": "Information Security",
         "localityName": "St. Louis",
         "stateOrProvinceName": "MO",
         "countryName": "USA"
        }
       }
      },
      "GenECCandCSRRes": {
       "type": "object",
       "properties": {
        "encryptedPrivateKey": {
         "type": "string",
         "format": "byte",
         "description": "A byte-string containing the encrypted private key material that corresponds to the CSR."
        },
        "csr": {
         "type": "string",
         "format": "byte",
         "description": "The PEM-encoded byte-string certificate signing request generated using the key material."
        },
        "requestId": {
         "type": "string",
         "description": "Request ID which can be used to track the status of the request."
        }
       },
       "example": {
        "encryptedPrivateKey": "Q0Q4NkE1QkNFNTkyRDkwNRAAEdk1+2AXGthGTdbAljcOEXkA8EBfhtQN6gUPRR+IFGNfWR8+WKOZlk2kk7BolJMmaZn44LSPMeWNw/BJiugtBcWSpBQVGZ9paLk4X3yAqg9SOtYJA6jnXBYlvzbktKQ=",
        "csr": "-----BEGIN CERTIFICATE REQUEST-----\nMIIBXTCCAQICAQAwgaExHDAaBgkqhkiG9w0BCQEWDXRlc3RAdGVzdC5jb20xDDAK\nBgNVBAYTA1VTQTELMAkGA1UECBMCTU8xEjAQBgNVBAcTCVN0LiBMb3VpczEdMBsG\nA1UECxMUSW5mb3JtYXRpb24gU2VjdXJpdHkxFjAUBgNVBAoTDUFjbWUgQ28uIEx0\nZC4xGzAZBgNVBAMTEnNlcnZlci5leGFtcGxlLmNvbTBZMBMGByqGSM49AgEGCCqG\nSM49AwEHA0IABJ9x5PEwFd5AVnl25R/dG2ix7/mIwn6jmebnxt2QWZ4BphAskWdA\nx2AkDLp3OORmku3e9iYqF6Yd2sFThYxtTyAwCwYHKoZIzj0EAQUAA0gAMEUCIGzD\nmY5IT4Vel88wjsr7CUxHg+csCh7LNdu8NbgWg6zfAiEAtl1+CUt4axQfbi0ruU/0\nPxNT+LnpaChXn0RsLzZQqSw=\n-----END CERTIFICATE REQUEST-----\n",
        "requestId": "1522769386936:cas0stl2:8389:jfd00s9a:22749"
       }
      },
      "Subject": {
       "type": "object",
       "required": [
        "commonName",
        "organizationName",
        "organizationalUnitName",
        "localityName",
        "stateOrProvinceName",
        "countryName"
       ],
       "description": "An object representing the subject of the CSR.",
       "properties": {
        "commonName": {
         "type": "string",
         "description": "The “Common Name” to use for the CSR."
        },
        "organizationName": {
         "type": "string",
         "description": "The “Organization Name” to use for the CSR."
        },
        "organizationalUnitName": {
         "type": "string",
         "description": "The “Organizational Unit Name” to use for the CSR."
        },
        "localityName": {
         "type": "string",
         "description": "The “Locality Name” to use for the CSR."
        },
        "stateOrProvinceName": {
         "type": "string",
         "description": "The “State or Province Name” to use for the CSR"
        },
        "countryName": {
         "type": "string",
         "description": "The “Country Name” to use for the CSR."
        },
        "emailAddress": {
         "type": "string",
         "description": "The \"Email Address\" to use for the CSR."
        }
       }
      },
      "Batch": {
       "type": "object",
       "required": [
        "requests"
       ],
       "properties": {
        "requests": {
         "$ref": "#/components/schemas/CommonRequests"
        }
       },
       "example": {
        "requests": [
         {
          "batchRequestId": "1",
          "method": "post",
          "path": "/core/encrypt/aes",
          "payload": {
           "message": "testdata"
          }
         },
         {
          "batchRequestId": "2",
          "method": "post",
          "path": "/core/random/bytes",
          "payload": {
           "count": 32
          }
         }
        ]
       }
      },
      "BatchRes": {
       "type": "object",
       "properties": {
        "responses": {
         "$ref": "#/components/schemas/CommonResponses"
        }
       },
       "example": {
        "requestId": "1418659001712:cas0stl1:37932:i3kppb3s:10445",
        "responses": [
         {
          "batchRequestId": "1",
          "path": "/core/encrypt/aes",
          "statusCode": 200,
          "payload": {
           "cipher": "RUVDMEQyMjI2NzkTJDNhDQX47nJekU/Uuvbprm3jQ3lnd5BLHSVgYN/lf4pl/Fng==",
           "requestId": "1418659151935:cas0stl1:37950:i3kppbbv:10430"
          }
         },
         {
          "batchRequestId": "2",
          "path": "/core/random/bytes",
          "statusCode": 200,
          "payload": {
           "bytes": "9hdA8ftreoPkA48LUlh+r/XaZl6R3+SYKKiD/iSuFZo=",
           "requestId": "1418659162408:cas0stl1:37952:i3kppbil:10435"
          }
         }
        ]
       }
      },
      "CommonRequests": {
       "type": "array",
       "description": "Array of objects for the batch of requests to perform. Each request object should contain batchRequestId, path, method, and payload.",
       "items": {
        "type": "object",
        "properties": {
         "batchRequestId": {
          "type": "string",
          "description": "ID pertaining to the batch request."
         },
         "method": {
          "type": "string",
          "description": "HTTP method used."
         },
         "path": {
          "type": "string",
          "description": "What endpoint the request originated from."
         },
         "payload": {
          "type": "object",
          "description": "Payload of the given request."
         }
        }
       }
      },
      "CommonResponses": {
       "type": "array",
       "description": "Array of objects with results from each of the batched requests. Each object contains batchRequestId, path, statusCode, and payload. The statusCode indicates whether the sub-request was successful or not (200 is success, anything else is failure). The payload property will contain the response information for that specific request. In the case of an error, it will contain detailed information about that error.",
       "items": {
        "type": "object",
        "properties": {
         "batchRequestId": {
          "type": "string",
          "description": "ID pertaining to the batch request."
         },
         "statusCode": {
          "type": "integer",
          "description": "HTTP status code recieved."
         },
         "path": {
          "type": "string",
          "description": "What endpoint the request originated from."
         },
         "payload": {
          "type": "object",
          "description": "Payload of the given request."
         }
        }
       }
      },
      "EncrAESReq": {
       "type": "object",
       "required": [
        "message"
       ],
       "properties": {
        "message": {
         "type": "string",
         "format": "byte",
         "description": "The bytes to encrypt."
        },
        "alias": {
         "type": "string",
         "description": "Optional alias of the key to use. If not provided, then uses the primary key for the account."
        }
       },
       "example": {
        "alias": "dev-test-aes-128-1",
        "message": "dGVzdCBpbnB1dA=="
       }
      },
      "EncrAESRes": {
       "type": "object",
       "properties": {
        "cipher": {
         "type": "string",
         "description": "The resulting stream of cipher bytes."
        },
        "requestId": {
         "type": "string",
         "description": "Request ID which can be used to track the status of the request."
        }
       },
       "example": {
        "cipher": "RUVDMEQyMjI2NzkwRTJDNhBkW9u0FhQtZU56DlGFOfqrbODvSb7oSdGSpIQX9ZqONQ==",
        "requestId": "1418659162408:cas0stl1:37952:i3kppbil:10435"
       }
      },
      "DecrAESReq": {
       "type": "object",
       "required": [
        "cipher"
       ],
       "properties": {
        "cipher": {
         "type": "string",
         "format": "byte",
         "description": "A byte-string containing the cipher to decrypt. This value must have been previously encrypted by CaaS."
        }
       },
       "example": {
        "cipher": "RUVDMEQyMjI2NzkwRTJDNhCrg4VLNx3Ppe7gOk0kwM5NjVzJOoczRIymzmGM9E2W3Q=="
       }
      },
      "DecrAESRes": {
       "type": "object",
       "properties": {
        "message": {
         "type": "string",
         "description": "The decrypted bytes."
        },
        "requestId": {
         "type": "string",
         "description": "Request ID which can be used to track the status of the request."
        },
        "rotatedCipher": {
         "type": "string",
         "description": "This is an optional response value that indicates your encryption key for this request has been rotated. CaaS has re-encrypted your old data with the newly-rotated key and has provided you that new value so that you may update your records."
        },
        "rotatedKeyAlias": {
         "type": "string",
         "description": "This is an *optional* repsonse value that indicates which key was used when calculating the *rotatedCipher* value above."
        }
       },
       "example": {
        "message": "dGVzdCBpbnB1dA==",
        "rotatedCipher": "hCrg4VLNx3Ppe7gOk0kw",
        "rotatedKeyAlias": "dev-test-aes-256-3"
       }
      },
      "AdvEncrAESReq": {
       "type": "object",
       "allOf": [
        {
         "$ref": "#/components/schemas/EncrAESReq"
        }
       ],
       "properties": {
        "alias": {
         "type": "string",
         "description": "Alias of the key to use for decryption. This argument is mutually exclusive with wrappedKey."
        },
        "wrappedKey": {
         "type": "object",
         "description": "The key to use for decryption. This argument is mutually exclusive with alias.",
         "required": [
          "value",
          "unwrappingKeyAlias"
         ],
         "properties": {
          "unwrappingKeyAlias": {
           "type": "string",
           "description": "Alias of the key that will be used to unwrap this key."
          },
          "value": {
           "type": "string",
           "description": "Value of the wrappedKey."
          },
          "algorithmMode": {
           "$ref": "#/components/schemas/AlgorithmMode"
          },
          "iv": {
           "type": "string",
           "description": "Optional IV to use. In ECB mode, this field is not allowed. If this field is not specified in GCM mode, a 12-byte IV will be generated for you. If this field is not specified in CBC mode, a 16-byte IV will be generated for you."
          },
          "tag": {
           "type": "string",
           "description": "Tag to verify during decryption. In GCM mode, this field is required. This field is not allowed in ECB or CBC modes."
          },
          "paddingMode": {
           "$ref": "#/components/schemas/PaddingModeAES"
          },
          "aad": {
           "type": "string",
           "description": "Additional Authentication Data (AAD) to use in GCM mode. This argument is not allowed in ECB or CBC modes. It is optional in GCM mode."
          }
         }
        },
        "algorithmMode": {
         "$ref": "#/components/schemas/AlgorithmMode"
        },
        "iv": {
         "type": "string",
         "description": "Optional IV to use. In ECB mode, this field is not allowed. If this field is not specified in GCM mode, a 12-byte IV will be generated for you. If this field is not specified in CBC mode, a 16-byte IV will be generated for you."
        },
        "paddingMode": {
         "$ref": "#/components/schemas/PaddingModeAES"
        },
        "aad": {
         "type": "string",
         "description": "Additional Authentication Data (AAD) to use in GCM mode. This argument is not allowed in ECB or CBC modes. It is optional in GCM mode."
        },
        "tagLength": {
         "type": "integer",
         "description": "The length of the tag to generate. This argument is not allowed in ECB or CBC modes. It defaults to 16 in GCM mode."
        }
       },
       "example": {
        "message": "YWFzaGlzaGFyb3Jh",
        "alias": "verify-aes-256"
       }
      },
      "AdvEncrAESRes": {
       "type": "object",
       "properties": {
        "cipher": {
         "type": "string",
         "description": "The resulting stream of cipher bytes."
        },
        "tag": {
         "type": "string",
         "description": "If algorithmMode is \"GCM\", this field will contain the generated tag. This field is not present for other algorithm modes."
        },
        "aad": {
         "type": "string",
         "description": "If algorithmMode is \"GCM\", this field will contain AAD value, if one was specified. This field is not present for other algorithm modes."
        },
        "iv": {
         "type": "string",
         "description": "The IV which was used during the encryption process. This field is not present in the ECB algorithm mode."
        }
       },
       "example": {
        "cipher": "BpBPkn7NRY+EbJJBnwbB6Q==",
        "iv": "zUxlslcgzjVH9goUSU5rmA==",
        "requestId": "1522770404878:cas0stl2:8389:jfd00s9a:22779"
       }
      },
      "AdvDecrAESReq": {
       "type": "object",
       "required": [
        "cipher",
        "iv"
       ],
       "allOf": [
        {
         "$ref": "#/components/schemas/DecrAESReq"
        }
       ],
       "properties": {
        "cipher": {
         "type": "string",
         "format": "byte",
         "description": "A byte-string containing the encrypted data."
        },
        "alias": {
         "type": "string",
         "description": "Alias of the key to use for decryption. This argument is mutually exclusive with wrappedKey."
        },
        "wrappedKey": {
         "type": "object",
         "description": "The key to use for decryption. This argument is mutually exclusive with alias.",
         "required": [
          "value",
          "unwrappingKeyAlias"
         ],
         "properties": {
          "unwrappingKeyAlias": {
           "type": "string",
           "description": "Alias of the key that will be used to unwrap this key."
          },
          "value": {
           "type": "string",
           "format": "byte",
           "description": "The value of the wrappedKey formatted as a byte-string."
          }
         }
        },
        "algorithmMode": {
         "$ref": "#/components/schemas/AlgorithmMode"
        },
        "iv": {
         "type": "string",
         "description": "Optional IV to use. In ECB mode, this field is not allowed. If this field is not specified in GCM mode, a 12-byte IV will be generated for you. If this field is not specified in CBC mode, a 16-byte IV will be generated for you."
        },
        "tag": {
         "type": "string",
         "description": "Tag to verify during decryption. In GCM mode, this field is required. This field is not allowed in ECB or CBC modes."
        },
        "paddingMode": {
         "$ref": "#/components/schemas/PaddingModeAES"
        },
        "aad": {
         "type": "string",
         "description": "Additional Authentication Data (AAD) to use in GCM mode. This argument is not allowed in ECB or CBC modes. It is optional in GCM mode."
        }
       },
       "example": {
        "cipher": "BpBPkn7NRY+EbJJBnwbB6Q==",
        "alias": "verify-aes-256",
        "iv": "zUxlslcgzjVH9goUSU5rmA=="
       }
      },
      "AdvDecrAESRes": {
       "type": "object",
       "properties": {
        "message": {
         "type": "string",
         "description": "The decrypted bytes."
        },
        "requestId": {
         "type": "string",
         "description": "Request ID which can be used to track the status of the request."
        }
       },
       "example": {
        "message": "YWFzaGlzaGFyb3Jh",
        "requestId": "1454713082740:cas0stl1:35267:ikaai27n:10002"
       }
      },
      "AdvEncrRSAReq": {
       "type": "object",
       "required": [
        "message",
        "alias",
        "fingerprint",
        "publicKey",
        "certificate"
       ],
       "properties": {
        "message": {
         "type": "string",
         "format": "byte",
         "description": "The bytes to encrypt."
        },
        "oaepHashingAlgorithm": {
         "$ref": "#/components/schemas/OaepPadding"
        },
        "paddingMode": {
         "$ref": "#/components/schemas/PaddingModeRSA"
        },
        "alias": {
         "type": "string",
         "description": "Alias of the key to use for encryption. This argument is mutually exclusive with the *publicKey*, *certificate* and *fingerprint* arguments. Exactly one of this group of arguments must be specified."
        },
        "fingerprint": {
         "type": "string",
         "format": "byte",
         "description": "A byte-string containing the fingerprint of the key to use for encryption. This argument is mutually exclusive with the *publicKey*, *certificate* and *alias* arguments. Exactly one of this group of arguments must be specified."
        },
        "publicKey": {
         "type": "string",
         "description": "A PEM-encoded public key to use for encryption. This argument is mutually exclusive with the *alias*, *certificate* and *fingerprint* arguments. Exactly one of this group of arguments must be specified."
        },
        "certificate": {
         "type": "string",
         "description": "An X.509 certificate containing the public key to use for encryption. This argument is mutually exclusive with the *publicKey*, *alias* and *fingerprint* arguments. Exactly one of this group of arguments must be specified."
        }
       },
       "example": {
        "message": "YWFzaGlzaGFyb3Jh",
        "alias": "verify-rsa-2048",
        "paddingMode": "OAEP",
        "oaepHashingAlgorithm": "SHA256"
       }
      },
      "AdvEncrRSARes": {
       "type": "object",
       "properties": {
        "cipher": {
         "type": "string",
         "description": "The resulting stream of cipher bytes."
        },
        "requestId": {
         "type": "string",
         "description": "Request ID which can be used to track the status of the request."
        }
       },
       "example": {
        "cipher": "fDlCZiXv3ZZA/mzlBuvZ++ptts/kxUYm8D+9P12lNersyUxelhY9c8X6y2IPiO6zG5ZOaP4WV3g46bUHMw5Lm/ZwzjPss2rBuJIJLuwosHm2ji8KAUYtyyRYOgbJfFppZfCFSYSFJW/dEvpl7nUzpcG0T5+X6141bxVzc3ZcTGGFhJmsjocVqKOaXcqCzRfnoDQL06NvvhfgofhzUR9n46TAx8QvaSEJrzDq9/3POG4XWuVJxmCouM6gVlUQv606GVMHjIUOdbFt+9r1zvk9/hNoAzHFEoOE68uGqkdxv6sn+aK6jMmTVsYVJVoC2vEE8WHzWfZMpv5fVWTUZDI7Pg==",
        "requestId": "1522770966238:cas0stl2:8526:jfd00sca:22793"
       }
      },
      "AdvDecrRSAReq": {
       "type": "object",
       "required": [
        "cipher",
        "alias",
        "fingerprint",
        "encryptedPrivateKey"
       ],
       "properties": {
        "cipher": {
         "type": "string",
         "format": "byte",
         "description": "The bytes to decrypt."
        },
        "paddingMode": {
         "$ref": "#/components/schemas/PaddingModeRSA"
        },
        "oaepHashingAlgorithm": {
         "$ref": "#/components/schemas/OaepPadding"
        },
        "alias": {
         "type": "string",
         "description": "Alias of the key to use for encryption. This argument is mutually exclusive with the *encryptedPrivateKey* and *fingerprint* arguments. Exactly one of this group of arguments must be specified."
        },
        "fingerprint": {
         "type": "string",
         "description": "The fingerprint of the key to use for encryption. This argument is mutually exclusive with the *encryptedPrivateKey* and *alias* arguments. Exactly one of this group of arguments must be specified."
        },
        "encryptedPrivateKey": {
         "type": "string",
         "format": "byte",
         "description": "A byte-string containing the encrypted private key to use for decryption. This key *must have been previously encrypted by CaaS* using the basic “Encrypt (AES)” interface or one of the CaaS key pair generation methods! This argument is mutually exclusive with the *alias* and *fingerprint* arguments. Exactly one of this group of arguments must be specified."
        }
       },
       "example": {
        "cipher": "fDlCZiXv3ZZA/mzlBuvZ++ptts/kxUYm8D+9P12lNersyUxelhY9c8X6y2IPiO6zG5ZOaP4WV3g46bUHMw5Lm/ZwzjPss2rBuJIJLuwosHm2ji8KAUYtyyRYOgbJfFppZfCFSYSFJW/dEvpl7nUzpcG0T5+X6141bxVzc3ZcTGGFhJmsjocVqKOaXcqCzRfnoDQL06NvvhfgofhzUR9n46TAx8QvaSEJrzDq9/3POG4XWuVJxmCouM6gVlUQv606GVMHjIUOdbFt+9r1zvk9/hNoAzHFEoOE68uGqkdxv6sn+aK6jMmTVsYVJVoC2vEE8WHzWfZMpv5fVWTUZDI7Pg==",
        "alias": "verify-rsa-2048",
        "paddingMode": "OAEP",
        "oaepHashingAlgorithm": "SHA256"
       }
      },
      "AdvDecrRSARes": {
       "type": "object",
       "properties": {
        "message": {
         "type": "string",
         "description": "The decrypted bytes."
        },
        "requestId": {
         "type": "string",
         "description": "Request ID which can be used to track the status of the request."
        }
       },
       "example": {
        "message": "YWFzaGlzaGFyb3Jh",
        "requestId": "1454713082740:cas0stl1:35267:ikaai27n:10002"
       }
      },
      "JWEEncReq": {
       "type": "object",
       "required": [
        "message",
        "contentEncryptionOptions",
        "wrappingKeyOptions"
       ],
       "properties": {
        "message": {
         "type": "string",
         "format": "byte",
         "description": "The bytes to encrypt."
        },
        "contentEncryptionOptions": {
         "$ref": "#/components/schemas/ContentEncryptionOptions"
        },
        "wrappingKeyOptions": {
         "$ref": "#/components/schemas/WrappingOptions"
        }
       },
       "example": {
        "message": "YWFzaGlzaA==",
        "contentEncryptionOptions": {
         "enc": "A128CBC-HS256"
        },
        "wrappingKeyOptions": {
         "alg": "ECDH-ES+A128KW",
         "apu": "U2NvdHQgaXMgIGdyZWF0IQ==",
         "apv": "U2NvdHQgaXMgIGdyZWF0IQ==",
         "privateKey": "verify-ecc-p521-derivation",
         "iv": "dml2ZWsgaXMgIGdyZWF0IQ==",
         "publicKey": {
          "kty": "EC",
          "x5c": [
           "-----BEGIN CERTIFICATE-----\nMIID3DCCAz6gAwIBAgIJAJZ51CtuqpkbMAkGByqGSM49BAEwgaYxCzAJBgNVBAYT\nAlVTMQswCQYDVQQIEwJNTzEQMA4GA1UEBxMHT2ZhbGxpbjEXMBUGA1UEChMOTWFz\ndGVyY2FyZC5jb20xGzAZBgNVBAsTEmNvcnBvcmF0ZSBzZWN1cml0eTEbMBkGA1UE\nAxMSd3d3Lm1hc3RlcmNhcmQuY29tMSUwIwYJKoZIhvcNAQkBFhZlMDQ1NzMzQG1h\nc3RlcmNhcmQuY29tMB4XDTE2MDcwNzIwNTEyMFoXDTE4MDcwNzIwNTEyMFowgaYx\nCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJNTzEQMA4GA1UEBxMHT2ZhbGxpbjEXMBUG\nA1UEChMOTWFzdGVyY2FyZC5jb20xGzAZBgNVBAsTEmNvcnBvcmF0ZSBzZWN1cml0\neTEbMBkGA1UEAxMSd3d3Lm1hc3RlcmNhcmQuY29tMSUwIwYJKoZIhvcNAQkBFhZl\nMDQ1NzMzQG1hc3RlcmNhcmQuY29tMIGbMBAGByqGSM49AgEGBSuBBAAjA4GGAAQB\nk4hHdOiDXKRHAXsbr9Vam0t+XPm+S+K8ktvczF48XCcAq6DfTDfLUUPQZZy5SedH\nCXDpxWXf4i4H8g+N7KvTOzAAvleY0buQhSzk2yonEliiShrYrlrd3q8iaTmaRamn\nEVLEeR8l2x2ZIy80IXJJ+R8xJohNKpvgh1ksuxA3tbftlE2jggEPMIIBCzAdBgNV\nHQ4EFgQUS4gMa2J4jlx6DxHIWylxOJRXl+MwgdsGA1UdIwSB0zCB0IAUS4gMa2J4\njlx6DxHIWylxOJRXl+OhgaykgakwgaYxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJN\nTzEQMA4GA1UEBxMHT2ZhbGxpbjEXMBUGA1UEChMOTWFzdGVyY2FyZC5jb20xGzAZ\nBgNVBAsTEmNvcnBvcmF0ZSBzZWN1cml0eTEbMBkGA1UEAxMSd3d3Lm1hc3RlcmNh\ncmQuY29tMSUwIwYJKoZIhvcNAQkBFhZlMDQ1NzMzQG1hc3RlcmNhcmQuY29tggkA\nlnnUK26qmRswDAYDVR0TBAUwAwEB/zAJBgcqhkjOPQQBA4GMADCBiAJCAYZ+AyQk\njbT0cflwdS9yYdaciAbyMPkOGwQnCNgpPQJRK1Kozyddij6beqo6P0qp7D3UjgAe\n9/qx+rHgwZQIiBREAkIB0Wztm0MkO0f3gH3K/A1cN8TqYB+Iebh1uTOtSMwv4t1z\nuO5h364MTEF5Lf/JOEwpP+WQelsnsmEMOhabJ99ah3c=\n-----END CERTIFICATE-----"
          ],
          "x5t": "hEU97SLA3uoLrbdtYpjaSD1OOE0="
         }
        }
       }
      },
      "JWEEncRes": {
       "type": "object",
       "properties": {
        "cipher": {
         "type": "string",
         "description": "The resulting stream of cipher bytes."
        },
        "requestId": {
         "type": "string",
         "description": "Request ID which can be used to track the status of the request."
        }
       },
       "example": {
        "cipher": "eyJhbGciOiJFQ0RILUVTK0ExMjhLVyIsImVuYyI6IkExMjhDQkMtSFMyNTYifQ==.8wcqPgf1uPST/y0XMU1ZDrKkVZrgqoVmNEKloYYaMmo=.dlSC3NGx386mUTU8FJ2Y3A==.+aweSVgCWZpV37rnBpEGKA==.hFr7dloeQ1lC8ty+jnQcTAoPat+baDr5FHxNQlPwnEg=",
        "requestId": "1469723323455:C02KV14FFFT3:35249:ir6jaoii:10000"
       }
      },
      "JWEAdvDecrReq": {
       "type": "object",
       "required": [
        "cipher",
        "unwrappingKeyOptions"
       ],
       "properties": {
        "cipher": {
         "format": "byte",
         "description": "The **Base64Url Encoded** byte-string string to be decrypted."
        },
        "unwrappingKeyOptions": {
         "$ref": "#/components/schemas/UnwrappingKeyOptionsAdvanced"
        }
       },
       "example": {
        "cipher": "eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkEyNTZHQ00iLCJjdHkiOiJhcHBsaWNhdGlvbi9qc29uIiwia2lkIjoidGVzdC1rZXktaWQiLCJzb21lUHJpdmF0ZUhlYWRlclZhbHVlIjoiYSBwcml2YXRlIGtleSB2YWx1ZSJ9.a_HiPD5kKtiWmsYgq6UGBk-TgAObG1uvf8leKnWx0i5922M67PToI3YpVB7YD6b4Am6yd6L3ogHv_li1ijTME76u1iDwiR_A5kJ9-Ctsxxq5snrGVHTs-T7NaladOiTomhlFDdrzX9AUlzRNECSBnErrkIr4jqRfjFD0FulR3c6p9h6ypBoeshwlK3tju-ZTfc1kyLVe6d-BzFi5-grAPcWiL58JInFkOAmz-biiROv9edOoUWQy1Xam_YbirQOp5Fl0ebm2X_bYEvngEhg9RdnRciS6TwEJByT1L4-a1v8ofuQeWW-z20CVKQL8uXLm3NJBJe8n5OHxwYpECBEMqw.gu3oV5wTlvZrBBTP.xRmnI-T5jV5zSIMJ0Ze4fTg9woEoHvMVW6DlUsd1wMCa65BCrLUYEbdOCxkonCA7ABz3RVx9uZdzdlhGmytu.Mz7kTRnD8_RiVXINrWks7Q",
        "unwrappingKeyOptions": {
         "privateKey": "jwe-private-key-test"
        }
       }
      },
      "JWEDecrReq": {
       "type": "object",
       "required": [
        "cipher",
        "unwrappingKeyOptions"
       ],
       "properties": {
        "cipher": {
         "type": "string",
         "description": "The bytes to decrypt."
        },
        "unwrappingKeyOptions": {
         "$ref": "#/components/schemas/UnwrappingKeyOptions"
        }
       },
       "example": {
        "cipher": "eyJhbGciOiJFQ0RILUVTK0ExMjhLVyIsImVuYyI6IkExMjhDQkMtSFMyNTYifQ==.vZMixI2wPyN6/S+PQ9AWOc39gFGO9vTZVqtk5gxyakkSH6JqMlorIU/yky8TImQl.vZe/BzxkAIEhuoMAaToOcg==.6CsvosXDUciGgJ6YMtwT0A==.edylGTLgamMKxGxgxErszw==",
        "unwrappingKeyOptions": {
         "iv": "BVfBWm1yghaZ3tZZwgHL2w==",
         "apu": "T9KelQ/diva42ekVh1jPPA==",
         "apv": "Hr2VEzROjJHvtq3TTT08uQ==",
         "privateKey": "verify-ecc-p521-derivation",
         "publicKey": {
          "kty": "EC",
          "x": "AZOIR3Tog1ykRwF7G6/VWptLflz5vkvivJLb3MxePFwnAKug30w3y1FD0GWcuUnnRwlw6cVl3+IuB/IPjeyr0zsw",
          "y": "vleY0buQhSzk2yonEliiShrYrlrd3q8iaTmaRamnEVLEeR8l2x2ZIy80IXJJ+R8xJohNKpvgh1ksuxA3tbftlE0=",
          "crv": "P-521"
         }
        }
       }
      },
      "JWEDecrRes": {
       "type": "object",
       "properties": {
        "message": {
         "type": "string",
         "description": "The decrypted bytes."
        },
        "requestId": {
         "type": "string",
         "description": "Request ID which can be used to track the status of the request."
        }
       },
       "example": {
        "message": "VGVzdCBtZXNzYWdl",
        "requestId": "1474399315579:C02KV14FFFT3:92540:itbv7yaj:10004"
       }
      },
      "JWEAvdDecrRes": {
       "type": "object",
       "properties": {
        "message": {
         "type": "string",
         "description": "The decrypted message from the cipher."
        },
        "verified": {
         "type": "boolean",
         "description": "This denotes if the Authentication Tag was validated correctly."
        },
        "additionalHeaders": {
         "$ref": "#/components/schemas/AdditionalHeadersDec"
        }
       },
       "example": {
        "message": "VGhlIHRydWUgc2lnbiBvZiBpbnRlbGxpZ2VuY2UgaXMgbm90IGtub3dsZWRnZSBidXQgaW1hZ2luYXRpb24u",
        "verified": true,
        "additionalHeaders": {
         "private": {
          "somePrivateHeaderValue": "a private key value"
         },
         "registered": {
          "cty": "application/json",
          "kid": "test-key-id"
         }
        },
        "requestId": "1551888315719:C02VR11VHTD8:11760:jsxchoiz:10003"
       }
      },
      "JWEAdvEncrReq": {
       "type": "object",
       "required": [
        "message",
        "wrappingKeyOptions",
        "contentEncryptionOptions"
       ],
       "properties": {
        "message": {
         "type": "string",
         "description": "The message that we want to encrypt."
        },
        "additionalHeaders": {
         "$ref": "#/components/schemas/AdditionalHeadersEncr"
        },
        "wrappingKeyOptions": {
         "$ref": "#/components/schemas/WrappingKeyOptionsJWEAdv"
        },
        "contentEncryptionOptions": {
         "$ref": "#/components/schemas/ContentEncrOptionsJWEAdv"
        }
       },
       "example": {
        "message": "VGhlIHRydWUgc2lnbiBvZiBpbnRlbGxpZ2VuY2UgaXMgbm90IGtub3dsZWRnZSBidXQgaW1hZ2luYXRpb24u",
        "additionalHeaders": {
         "registered": {
          "cty": "application/json",
          "kid": "test-key-id"
         },
         "private": {
          "somePrivateHeaderValue": "a private key value"
         }
        },
        "contentEncryptionOptions": {
         "enc": "A256GCM",
         "tagLength": 16
        },
        "wrappingKeyOptions": {
         "alg": "RSA-OAEP",
         "publicKey": {
          "kty": "RSA",
          "n": "oahUIoWw0K0usKNuOR6H4wkf4oBUXHTxRvgb48E-BVvxkeDNjbC4he8rUWcJoZmds2h7M70imEVhRU5djINXtqllXI4DFqcI1DgjT9LewND8MW2Krf3Spsk_ZkoFnilakGygTwpZ3uesH-PFABNIUYpOiN15dsQRkgr0vEhxN92i2asbOenSZeyaxziK72UwxrrKoExv6kc5twXTq4h-QChLOln0_mtUZwfsRaMStPs6mS6XrgxnxbWhojf663tuEQueGC-FCMfra36C9knDFGzKsNa7LZK2djYgyD3JR_MB_4NUJW_TqOQtwHYbxevoJArm-L5StowjzGy-_bq6Gw",
          "e": "AQAB"
         }
        }
       }
      },
      "WrappingKeyOptionsJWEAdv": {
       "type": "object",
       "description": "Options that determine how the key should be wrapped.",
       "required": [
        "alg",
        "publicKey"
       ],
       "properties": {
        "alg": {
         "$ref": "#/components/schemas/ALGAdv"
        },
        "publicKey": {
         "type": "object",
         "description": "A valid [JSON Web Key (JWK)](http://self-issued.info/docs/draft-ietf-jose-json-web-key.html) representing the public key to use for derivation or key wrapping."
        }
       }
      },
      "ContentEncrOptionsJWEAdv": {
       "type": "object",
       "required": [
        "enc"
       ],
       "description": "An options object that tells how to encrypt message.",
       "properties": {
        "enc": {
         "$ref": "#/components/schemas/ENC"
        },
        "tagLength": {
         "type": "integer",
         "description": "The length of the tag to generate. This argument is not allowed in CBC mode. It defaults to 12 in GCM mode."
        },
        "iv": {
         "type": "string",
         "description": "**Base64Url Encoded** IV that needs to be used to encrypt the data. This value is optional and will be generated if not provided.\n"
        }
       }
      },
      "JWEAdvEncrRes": {
       "type": "object",
       "properties": {
        "cipher": {
         "type": "string",
         "description": "**Base64Url Encoded** JWE encrypted message.\n"
        },
        "requestId": {
         "type": "string",
         "description": "Request ID which can be used to track the status of the request."
        }
       },
       "example": {
        "cipher": "eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkEyNTZHQ00iLCJjdHkiOiJhcHBsaWNhdGlvbi9qc29uIiwia2lkIjoidGVzdC1rZXktaWQiLCJzb21lUHJpdmF0ZUhlYWRlclZhbHVlIjoiYSBwcml2YXRlIGtleSB2YWx1ZSJ9.idUXmLdhHJVvv17cmBr6RJGDDjwBPxsiZz4ny0fDAYM8XkvI2lFSklu39C88sxWqUQ9rcz9UHBIGKTOoMdjn6C1Ufwb8gn9gc8GUGvJKqB6c8ShKzhdP6voCzRBb0LODo9YydhmthjxDrcYWgtZukhYLax0teMTBTkIuuHgX7TyVUlJzogePiD-0Hte4NjQgGhVYEBeJDgbElyU1YgjagOkwKQQp7wUmvhhYJPBSJM1Gs3Eplkiea_mv7jsXqmw1qLR5li8byHnjzqWSfZ5DgDZzzVAcwgw1ccDrESqEltOJiJXymWPoecse1xB-VdO6V3wNkt5H5v15RfPUrJ4u7A.S6_BqUa0O7T2Y3mF.O2mVd0K-cH0OCqNTa2q97QcbITBqFJ7DBT7W78WCB4aeG9GfFv7OwtdGpc720tzEuJKBJIAB1mFEvTC_u71q.sqCvUiwxgY9w3LNkUdJ0sQ",
        "requestId": "1551891001466:C02VR11VHTD8:11760:jsxchoiz:10004"
       }
      },
      "PrivateAdditionalHeaders": {
       "type": "object",
       "description": "The private header values. Any and all custom header values should be included here. Key/value pairs are **required** to be strings OR numbers and **cannot** contain duplicate key values already include in the headers **[cty, alg, enc, kid]**. **NOTE:** Any numbers values that exceed ```Number.MAX_SAFE_INTEGER```, which is ```9007199254740991```, will be stored inaccurately. For numbers larger than this it is recommended that a string is used."
      },
      "RegisteredAdditionalHeaders": {
       "type": "object",
       "description": "The registered header values supported from [RFC 7516](https://tools.ietf.org/html/rfc7516).",
       "properties": {
        "cty": {
         "type": "string",
         "description": "The media type of the encrypted data [RFC 7515 \"cty\"](https://www.rfc-editor.org/rfc/rfc7515.txt)."
        },
        "kid": {
         "type": "string",
         "description": "Key ID value. See [RFC 7515 \"kid\"](https://www.rfc-editor.org/rfc/rfc7515.txt)."
        }
       }
      },
      "AdditionalHeadersDec": {
       "type": "object",
       "description": "The additional headers used during the encryption process. **NOTE:** This object will _only_ be returned if it was provided durring the encryption process.",
       "properties": {
        "private": {
         "$ref": "#/components/schemas/PrivateAdditionalHeaders"
        },
        "registered": {
         "$ref": "#/components/schemas/RegisteredAdditionalHeaders"
        }
       }
      },
      "AdditionalHeadersEncr": {
       "type": "object",
       "description": "The additional headers used during the encryption process. **NOTE:** This object will be returned durring the decryption process if included.",
       "properties": {
        "private": {
         "$ref": "#/components/schemas/PrivateAdditionalHeaders"
        },
        "registered": {
         "$ref": "#/components/schemas/RegisteredAdditionalHeaders"
        }
       }
      },
      "ContentEncryptionOptions": {
       "type": "object",
       "required": [
        "enc"
       ],
       "description": "An options object that tells how to encrypt message.",
       "properties": {
        "enc": {
         "$ref": "#/components/schemas/ENC"
        },
        "tagLength": {
         "type": "integer",
         "description": "The length of the tag to generate. This argument is not allowed in CBC mode. It defaults to 12 in GCM mode."
        },
        "iv": {
         "type": "string",
         "format": "byte",
         "description": "A byte-string containing the IV that needs to be used to encrypt the data. This value must be specified."
        }
       }
      },
      "HashPanReq": {
       "type": "object",
       "required": [
        "message"
       ],
       "properties": {
        "alias": {
         "type": "string",
         "description": "Alias of the key to use."
        },
        "message": {
         "type": "string",
         "format": "byte",
         "description": "A byte-string containing the message to hash."
        }
       },
       "example": {
        "alias": "dev-test-hmac-sha-256-1",
        "message": "bXktbWVzc2FnZS10by1oYXNo"
       }
      },
      "HashPanRes": {
       "type": "object",
       "properties": {
        "hash": {
         "type": "string",
         "description": "The resulting hash."
        },
        "requestId": {
         "type": "string",
         "description": "Request ID which can be used to track the status of the request."
        }
       },
       "example": {
        "hash": "llTPYz9ZUzR+mMhmcbTap9xnwRtaR+SzCR+Rc7X0FfM=",
        "requestId": "1418659162408:cas0stl1:37952:i3kppbil:10435"
       }
      },
      "HashPBKDF2Req": {
       "type": "object",
       "required": [
        "message"
       ],
       "properties": {
        "message": {
         "type": "string",
         "format": "byte",
         "description": "A byte-string containing the message to hash."
        },
        "iteration": {
         "type": "integer",
         "description": "Optional iteration count. Defaults to *10000* if not specified. Must be at least *10000*."
        },
        "length": {
         "type": "integer",
         "description": "Optional length of the hash to generate. Defaults to *24* if not specified. Must be a number between *8* and *64*."
        },
        "salt": {
         "type": "string",
         "format": "byte",
         "description": "An optional byte-string formatted salt. If specified, it must be at least 16 bytes. If not specified, a 16-byte salt will be generated."
        },
        "pseudorandomFunction": {
         "$ref": "#/components/schemas/PseudorandomFunction"
        }
       },
       "example": {
        "message": "my-message-to-hash",
        "iterations": 10000,
        "length": 24,
        "salt": "lUj/VATZAJ7j6mn4xFhkpw==",
        "pseudorandomFunction": "HMAC-SHA1"
       }
      },
      "HashPBKDF2Res": {
       "type": "object",
       "properties": {
        "hash": {
         "type": "string",
         "description": "A computed message in the format of PBKDF2$<iterations>$<salt>$<hash>, where <iterations> is the iteration count, <salt> is a buffer representing the salt, and <hash> is a buffer representing the hash value."
        },
        "requestId": {
         "type": "string",
         "description": "Request ID which can be used to track the status of the request."
        }
       },
       "example": {
        "hash": "PBKDF2$10000$lUj/VATZAJ7j6mn4xFhkpw==$dXtprkuyQ+hESFk3Sv3yCYMDPD/SUbmA",
        "requestId": "1440171971594:cas0stl1:28976:idl59n02:11007"
       }
      },
      "HashAlgoReq": {
       "type": "object",
       "required": [
        "message"
       ],
       "properties": {
        "alias": {
         "type": "string",
         "description": "Alias of the key to use."
        },
        "message": {
         "type": "string",
         "format": "byte",
         "description": "A byte-string containing the message to hash."
        },
        "iteration": {
         "type": "integer",
         "description": "Optional iteration count. Defaults to 1 if not specified."
        }
       },
       "example": {
        "message": "bXktbWVzc2FnZS10by1oYXNo"
       }
      },
      "HashAlgoRes": {
       "type": "object",
       "properties": {
        "hash": {
         "type": "string",
         "description": "The resulting hash."
        },
        "type": "string",
        "description": "Request ID which can be used to track the status of the request."
       }
      },
      "example": {
       "hash": "onPY4gRbSSMvlQWoP/LFtoUDvSkO6i6b9HWx+s7SjqQ=",
       "requestId": "1418659162408:cas0stl1:37952:i3kppbil:10435"
      }
     },
     "RandBytesReq": {
      "type": "object",
      "required": [
       "count"
      ],
      "properties": {
       "count": {
        "type": "integer",
        "description": "Number of random bytes to generate."
       }
      },
      "example": {
       "count": 32
      }
     },
     "RandBytesRes": {
      "type": "object",
      "properties": {
       "bytes": {
        "type": "string",
        "format": "byte",
        "description": "A byte-string containing the random bytes generated."
       },
       "requestId": {
        "type": "string",
        "description": "Request ID which can be used to track the status of the request."
       }
      },
      "example": {
       "bytes": "R88khqUpQycIMFgHP6t3EdipRFQOJd6olJIBXHL1STk",
       "requestId": "1418659162408:cas0stl1:37952:i3kppbil:10435"
      }
     },
     "SignReq": {
      "type": "object",
      "required": [
       "message"
      ],
      "properties": {
       "alias": {
        "type": "string",
        "description": "Optional alias of the key to use. If not provided, then uses the primary key for the account."
       },
       "message": {
        "type": "string",
        "format": "byte",
        "description": "A byte-string containing the message to sign."
       }
      },
      "example": {
       "message": "bXktbWVzc2FnZS10by1oYXNo"
      }
     },
     "SignRes": {
      "type": "object",
      "properties": {
       "requestId": {
        "type": "string",
        "description": "Request ID which can be used to track the status of the request."
       },
       "signature": {
        "type": "string",
        "format": "byte",
        "description": "A byte-string containing the resulting signature."
       }
      },
      "example": {
       "requestId": "1418659162408:cas0stl1:37952:i3kppbil:10435",
       "signature": "WHfJ5VyNnC41hP4ZFOm1i5qNnHL5gAFrbfuxcDs06SA="
      }
     },
     "VerReq": {
      "type": "object",
      "required": [
       "message",
       "signature"
      ],
      "properties": {
       "message": {
        "type": "string",
        "format": "byte",
        "description": "A byte-string containing the message."
       },
       "signature": {
        "type": "string",
        "format": "byte",
        "description": "A byte-string containing the signature to verify."
       },
       "alias": {
        "type": "string",
        "description": "Optional alias of the key to use. If not provided, then uses the primary key for the account."
       }
      },
      "example": {
       "message": "bXktbWVzc2FnZS10by1oYXNo",
       "signature": "LJDOEzadvClQgdPzttxBlp0FDLZ5NCIjIKlVGfHm3F9FKDYSxFf/LbpT/Obu1Fq39bsM9NQfSc35Ph9KZZqbPWMOb/KbJE0V8+Iq79/CsKaqLtHc8SvXk+kZsigkUIR80bu7Yrz0Wiw8NS1M25/4E5lI5yuqkIucZvi3GDoJj3dshfDQ1sfwcEZxaBsOlO9x+/Ud5XIrlmnl0qap3zbR9wY/S519H+F1ijnSv5sKdpZq2GuIFjv4E29jxGDkEH3+jysr6uIfpXRWsqkkgM79wMAEsHbUEd7+5KF6IvY3/RnpJi5LJB1JDAFLSnquKm7yJtyDaL7tO8YFjLTV92twcg=="
      }
     },
     "VerRes": {
      "type": "object",
      "properties": {
       "requestId": {
        "type": "string",
        "description": "Request ID which can be used to track the status of the request."
       },
       "verified": {
        "type": "boolean",
        "description": "True if signature is verified successfully."
       },
       "rotatedSignature": {
        "type": "string",
        "format": "byte",
        "description": "This is an optional response value that indicates your signing key for this request has been rotated in the form of a byte-string. CaaS has re-signed your old data with the newly-rotated key and has provided you that new value so that you may update your records."
       },
       "rotatedKeyAlias": {
        "type": "string",
        "description": "This is an optional repsonse value that indicates which key was used when calculating the rotatedSignature value above."
       }
      },
      "example": {
       "verified": true,
       "requestId": "1522774910847:cas0stl2:8333:jfd00s9i:22919"
      }
     },
     "DerDecrReq": {
      "type": "object",
      "required": [
       "cipher",
       "publicKey"
      ],
      "properties": {
       "alias": {
        "type": "string",
        "description": "Optional alias of the key to use. If not provided, then uses the primary key for the account."
       },
       "cipher": {
        "type": "string",
        "format": "byte",
        "description": "A byte-string containing the AES-encrypted cipher to be decrypted."
       },
       "publicKey": {
        "type": "object",
        "description": "A valid [JSON Web Key (JWK)](http://self-issued.info/docs/draft-ietf-jose-json-web-key.html) representing the public key to use for derivation or key wrapping. This argument is mutually exclusive with ```secretKey```."
       },
       "sharedData": {
        "type": "string",
        "format": "byte",
        "description": "An optional byte-string formatted shared data that can be used during the key derivation process. If this value is supplied, the *SHA1* key derivation function will be used."
       },
       "algorithmMode": {
        "$ref": "#/components/schemas/AlgorithmMode"
       },
       "tag": {
        "type": "string",
        "format": "byte",
        "description": "When algorithmMode is \"GCM\", this argument must be supplied in the form of a byte-string. If the tag cannot be verified, an error will be returned."
       },
       "aad": {
        "type": "string",
        "format": "byte",
        "description": "When algorithmMode is \"GCM\", you may supply “Additional Authentication Data” (aad) in the form of a byte-string. This argument is optional."
       },
       "iv": {
        "type": "string",
        "format": "byte",
        "description": "An optional byte-string containing the IV used to encrypt the cipher (for AES-CBC mode). If not provided, the decrypt operation will be performed in AES-ECB mode."
       }
      },
      "example": {
       "cipher": "PPs2/hGSfjuyVH83XOkjRw==",
       "alias": "dev-test-ecc-p256-1",
       "iv": "2gxAQSkM8tn69PmO6Snpsg==",
       "publicKey": {
        "kty": "EC",
        "crv": "P-256",
        "x": "ALabSazo6kRoLlNS2KQebwg498_o8Jz4ixFHaFVLwo_R",
        "y": "egfRbVGhBGqeDHwO7Y0jeZ06Pa447kt9QLFjyoj4zNY=",
        "kid": "2a1c89f0-f517-4938-871f-4970ec4e626d"
       }
      }
     },
     "DerDecrRes": {
      "type": "object",
      "properties": {
       "message": {
        "type": "string",
        "description": "The decrypted bytes."
       },
       "requestId": {
        "type": "string",
        "description": "Request ID which can be used to track the status of the request."
       }
      },
      "example": {
       "message": "dGVzdCBpbnB1dA==",
       "requestId": "1418659162408:cas0stl1:37952:i3kppbil:10435"
      }
     },
     "DerEncrReq": {
      "type": "object",
      "required": [
       "message",
       "publicKey"
      ],
      "properties": {
       "alias": {
        "type": "string",
        "description": "Optional alias of the key to use. The alias of the EC private key object to use for derivation. If not supplied, we will use the default EC P-256 private key assigned to your client."
       },
       "message": {
        "type": "string",
        "format": "byte",
        "description": "The bytes to encrypt."
       },
       "publicKey": {
        "type": "object",
        "description": "A valid [JSON Web Key (JWK)](http://self-issued.info/docs/draft-ietf-jose-json-web-key.html) representing the public key to use for derivation or key wrapping."
       },
       "sharedData": {
        "type": "string",
        "format": "byte",
        "description": "An optional byte-string containing the shared data that can be used during the key derivation process. If this value is supplied, the *SHA1* key derivation function will be used."
       },
       "algorithmMode": {
        "$ref": "#/components/schemas/AlgorithmMode"
       },
       "iv": {
        "type": "string",
        "description": "Optional IV to use. In ECB mode, this field is not allowed. If this field is not specified in GCM mode, a 12-byte IV will be generated for you. If this field is not specified in CBC mode, a 16-byte IV will be generated for you."
       },
       "tagLength": {
        "type": "integer",
        "description": "When algorithmMode is \"GCM\", you may specify the length of the tag to be generated. The default value is 16."
       },
       "aad": {
        "type": "string",
        "format": "byte",
        "description": "When algorithmMode is \"GCM\", you may supply “Additional Authentication Data” (aad) in the form of a byte-string. This argument is optional."
       }
      },
      "example": {
       "message": "dGVzdCBpbnB1dA==",
       "alias": "dev-test-ecc-p256-1",
       "iv": "2gxAQSkM8tn69PmO6Snpsg==",
       "publicKey": {
        "kty": "EC",
        "crv": "P-256",
        "x": "ALabSazo6kRoLlNS2KQebwg498_o8Jz4ixFHaFVLwo_R",
        "y": "egfRbVGhBGqeDHwO7Y0jeZ06Pa447kt9QLFjyoj4zNY=",
        "kid": "2a1c89f0-f517-4938-871f-4970ec4e626d"
       }
      }
     },
     "DerEncrRes": {
      "type": "object",
      "properties": {
       "cipher": {
        "type": "string",
        "format": "byte",
        "description": "The AES-encrypted cipher."
       },
       "iv": {
        "type": "string",
        "format": "byte",
        "description": "A byte-string containing the ranomly-generated IV value used during encryption. This is only supplied when utilizing algorithms that require an IV (for example AES-CBC or AES-GCM)."
       },
       "tag": {
        "type": "string",
        "format": "byte",
        "description": "When algorithmMode is \"GCM\", this value will contain the generated tag in the form of a byte-string."
       },
       "aad": {
        "type": "string",
        "format": "byte",
        "description": "When algorithmMode is \"GCM\", this value will contain the additional authentication data (if any) in the form of a byte-string."
       },
       "requestId": {
        "type": "string",
        "description": "Request ID which can be used to track the status of the request."
       }
      },
      "example": {
       "cipher": "PPs2/hGSfjuyVH83XOkjRw==",
       "requestId": "1418659162408:cas0stl1:37952:i3kppbil:10435"
      }
     },
     "WrapEncReq": {
      "type": "object",
      "required": [
       "message"
      ],
      "properties": {
       "message": {
        "type": "string",
        "format": "byte",
        "description": "The data to encrypt."
       },
       "publicKey": {
        "type": "string",
        "format": "byte",
        "description": "A byte-string containing the public key to use when wrapping the ephemeral AES key. The modulus for this key must be at least 1024 bits, and the key must be DER-encoded. This field is only required if either certificate, wrappingKeyAlias or wrappingKeyFingerprint parameters are not supplied. It is an error to supply any two parameters out of publicKey, certificate, wrappingKeyAlias or wrappingKeyFingerprint as they are all mutually exclusive."
       },
       "certificate": {
        "type": "string",
        "description": "The PEM-encoded X.509 certificate that contains the subject public key information (SPKI) to extract and use when wrapping the ephemeral key material. The modulus of the SPKI must be at least 1024 bits. This field is only required if either publicKey, wrappingKeyAlias or wrappingKeyFingerprint parameters are not supplied. It is an error to supply any two parameters out of publicKey, certificate, wrappingKeyAlias or wrappingKeyFingerprint as they are all mutually exclusive."
       },
       "wrappingKeyAlias": {
        "type": "string",
        "description": "The key alias to use when wrapping the ephemeral key material. This field is only required if either publicKey, certificate or wrappingKeyFingerprint parameters are not supplied. It is an error to supply any two parameters out of publicKey, certificate, wrappingKeyAlias or wrappingKeyFingerprint as they are all mutually exclusive."
       },
       "wrappingKeyFingerprint": {
        "type": "string",
        "format": "byte",
        "description": "A byte-string containing the fingerprint of the key to use when wrapping the ephemeral key material. The modulus for this key must be at least 1024 bits. This field is only required if either wrappingKeyAlias, publicKey or certificate are not supplied. It is an error to supply any two parameters out of publicKey, certificate, wrappingKeyAlias or wrappingKeyFingerprint as they are all mutually exclusive."
       },
       "oaepHashingAlgorithm": {
        "$ref": "#/components/schemas/OaepPadding"
       },
       "algorithmMode": {
        "$ref": "#/components/schemas/AlgorithmMode"
       },
       "iv": {
        "type": "string",
        "format": "byte",
        "description": "A byte-string containing the initialization vector to use during the encryption process (if one is needed). This argument is optional. If it is not supplied, 12 bytes will be generated and used for \"GCM\", and 16 bytes will be generated and used for \"CBC\" modes. If algorithmMode is \"ECB\", this argument is forbidden."
       },
       "tagLength": {
        "type": "integer",
        "description": "When algorithmMode is \"GCM\", you may specify the length of the tag to be generated. The default value is 16."
       },
       "aad": {
        "type": "string",
        "format": "byte",
        "description": "When algorithmMode is \"GCM\", you may supply “Additional Authentication Data” (aad) in the form of a byte-string. This argument is optional."
       }
      },
      "example": {
       "message": "dGVzdA==",
       "publicKey": "-----BEGIN PUBLIC KEY-----\nMIIBCgKCAQEA3+QpvckanRu3aw9d4a12Q6x2zd/9mC6Ylz+jZH656FMXX1v9zNe0\njjQpiO+Ajmj5p5YrmAHqbVf/h2HQEr94vsu3HL03DriE98Vk+qkH5C/O3OWdUYLh\nt4VDfKCEbscI9zu5YJEoNBof2no73cBsIb34iGWf09yqKhLYB2aMSTV9/bE5q9Nv\n9f1NJyE3Xd0IuKdSoI2TM3ARrZNIECY1HyP+pClOUSFBe/Y/A3gP2zNWZ423CoNN\nKYYBxj4Jl9EBoguBKPh0r/l5RK/ikIiFi+9zsPBmP22MokSJzb/yYyEsA9Y4pi3H\nrxEOPJaHODij9ngoTtFVFVdq/EnRii0NxQIDAQAB\n-----END PUBLIC KEY-----\n"
      }
     },
     "WrapEncRes": {
      "type": "object",
      "properties": {
       "cipher": {
        "type": "string",
        "format": "byte",
        "description": "A byte-string containing the original message, encrypted by the ephemeral key."
       },
       "iv": {
        "type": "string",
        "format": "byte",
        "description": "A byte-string containing the ranomly-generated IV value used during encryption. This is only supplied when utilizing algorithms that require an IV (for example AES-CBC or AES-GCM)."
       },
       "tag": {
        "type": "string",
        "format": "byte",
        "description": "When algorithmMode is \"GCM\", this value will contain the generated tag in the form of a byte-string."
       },
       "aad": {
        "type": "string",
        "format": "byte",
        "description": "When algorithmMode is \"GCM\", this value will contain the additional authentication data (if any) in the form of a byte-string."
       },
       "type": "string",
       "format": "byte",
       "description": "A byte-string containing the wrapped key material."
      }
     },
     "example": {
      "iv": "EZNXSi9QZWePMLDGG4UAVA==",
      "wrappedKey": "pI9ngXOlOwA4g5jy6E6tB5ivbZ6du8cR8Nkb9ldc0Njo5FD5f+Y+FZgJaAWar0e0hxGYLfgA4w1rQnrJVOLQL5inRBVGpTzXb4hAL++0WO8FlIqMOy4sDEKhf787YgNuMfm8h/Gex6N+p8/kJ87WoAAiMAD78hfoDeWB58mKYIiw7xoxpNsq3xEQj7hCq7tvWxyTpuRI9i2/xQh2Dl+l9wh+FbB6eg1+EfLt273qMMTfEiMIbOJeBxcwYqwcfBa7SzyRPsmeOJnmP/DW7LZBA5F1Y+AonntNGWx6IsY40pf2voOYoghR6C1S5UVquTVGaLsA0Gc6BUZ8A1Wxyq/Qgg==",
      "cipher": "5jp2NVWlEV7QqwMa578E5Q==",
      "requestId": "1522775271858:cas0stl2:8407:jfd00s8k:22942"
     }
    },
    "WrapDecrReq": {
     "type": "object",
     "required": [
      "unwrappingKeyAlias",
      "unwrappingKeyFingerprint",
      "encryptedPrivateKey",
      "wrappedKey",
      "cipher"
     ],
     "properties": {
      "cipher": {
       "type": "string",
       "description": "The encrypted message to be decrypted."
      },
      "unwrappingKeyAlias": {
       "type": "string",
       "description": "Alias of the unwrapping key [required if unwrappingKeyFingerprint and encryptedPrivateKey are not supplied]. Alias will be used if both alias and fingerprint are provided."
      },
      "unwrappingKeyFingerprint": {
       "type": "string",
       "format": "byte",
       "description": "A byte-string containing the fingerprint of the unwrapping key [required if unwrappingKeyAlias and encryptedPrivateKey are not supplied]."
      },
      "encryptedPrivateKey": {
       "type": "string",
       "format": "byte",
       "description": "A byte-string containing the raw bytes of the private key to use for unwrapping [required if unwrappingKeyAlias and unwrappingKeyFingerprint are not supplied]. This key must have been previously encrypted by CaaS (without using the advanced encrypt API)."
      },
      "wrappedKey": {
       "type": "string",
       "format": "byte",
       "description": "A byte-string containing the AES key that needs to be unwrapped."
      },
      "oaepHashingAlgorithm": {
       "$ref": "#/components/schemas/OaepPadding"
      },
      "algorithmMode": {
       "$ref": "#/components/schemas/AlgorithmMode"
      },
      "iv": {
       "type": "string",
       "format": "byte",
       "description": "A byte-string containing the initialization vector to use during the encryption process (if one is needed). This argument is optional. If it is not supplied, 12 bytes will be generated and used for \"GCM\", and 16 bytes will be generated and used for \"CBC\" modes. If algorithmMode is \"ECB\", this argument is forbidden."
      },
      "tag": {
       "type": "string",
       "format": "byte",
       "description": "When algorithmMode is \"GCM\", this argument must be supplied in the form of a byte-string. If the tag cannot be verified, an error will be returned."
      },
      "aad": {
       "type": "string",
       "format": "byte",
       "description": "When algorithmMode is \"GCM\", you may supply “Additional Authentication Data” (aad) in the form of a byte-string. This argument is optional."
      }
     },
     "example": {
      "cipher": "dgw1pqCNhdWJOLJIkVXvJQ==",
      "unwrappingKeyAlias": "dev-test-rsa-2048-1",
      "oaepHashingAlgorithm": "SHA256",
      "wrappedKey": "AvDG63LLv8a3+blOkeDtOf38YWDmk2tC5xFVWNf94epHPULbZ/vyxrPheDplz2FBCGPUPRPkLV4pT5fHrMFe0+uQzyjXhrBeshavgA7xncLWbRbfCyG7feJV1XzP0+cPSEPzFJX5u8Ety1uEqNxPswu80HbsZdnLDz3+BzyXp7Y4acGZlFETiO4y2ix9zj7uzP/b7jLb5FkaE1g+VJ+qkUB4drnROnBukCxEz7n2//bqtZlpbMWVK8HEnqXrqR1ww9ZAiTDWdn77gxXF5CbojFbG4xfPa38cyOlFft1e6OrMi8JUEjoXKBuYmqTNTed/rW0TPtsJsuxcmOEpZmR7qw=="
     }
    },
    "WrapDecrRes": {
     "type": "object",
     "properties": {
      "message": {
       "type": "string",
       "description": "The decrypted bytes."
      },
      "requestId": {
       "type": "string",
       "description": "Request ID which can be used to track the status of the request."
      },
      "verified": {
       "type": "boolean",
       "description": "Will be present in the response where the ```algorithmMode``` is ```GCM``` and the implementation is ```On-Premise```. The value will be ```true``` if the tag could be verified and ```false``` if not."
      }
     },
     "example": {
      "message": "dGVzdCBpbnB1dA==",
      "requestId": "1418659162408:cas0stl1:37952:i3kppbil:10435"
     }
    },
    "AndrVerDecrReq": {
     "type": "object",
     "required": [
      "encryptedPrivateKey",
      "paymentToken"
     ],
     "properties": {
      "encryptedPrivateKey": {
       "type": "string",
       "format": "byte",
       "description": "A byte-string containing the merchant’s private key material, previously encrypted by CaaS."
      },
      "paymentToken": {
       "type": "object",
       "description": "The literal payment token object that was generated by the device. This payment token should be serialized directly into a JSON object on the device and sent completely unmodified directly to CaaS."
      }
     },
     "example": {
      "encryptedPrivateKey": "MIIClzCCAX8CEQCVilPk3XweAOTIqRLQ6s2/MA0GCSqGSIb3DQEBC ...",
      "paymentToken": {
       "encryptedMessage": "ZW5jcnlwdGVkTWVzc2FnZQ==",
       "ephemeralPublicKey": "ZXBoZW1lcmFsUHVibGljS2V5",
       "tag": "c2lnbmF0dXJl"
      }
     }
    },
    "AndrVerDecrRes": {
     "type": "object",
     "properties": {
      "verified": {
       "type": "boolean",
       "description": "Indicates whether the payment token’s signature was successfully verified. This does NOT inspect the signing time of the signature to prevent a possible replay attack."
      },
      "tokenData": {
       "type": "string",
       "format": "byte",
       "description": "A byte-string containing the raw decrypted stream of bytes that represent the EMV or 3D Secure payment token data. Typically this is a JSON object that has been base64 encoded."
      },
      "rotatedCipher": {
       "type": "string",
       "format": "byte",
       "description": "This is an optional response value that indicates your encryption key for this request has been rotated in the form of a byte-string. CaaS has re-encrypted your old data with the newly-rotated key and has provided you that new value so that you may update your records."
      },
      "rotatedKeyAlias": {
       "type": "string",
       "description": "This is an optional repsonse value that indicates which key was used when calculating the rotatedCipher value above."
      }
     },
     "example": {
      "verified": true,
      "tokenData": "AvDG63LLv8a3+blOkeDtOf38YWDmk2tC5xFV ...",
      "requestId": "1418659162408:cas0stl1:37952:i3kppbil:10435",
      "rotatedCipher": "IKoZIzj0DAQcDQ ...",
      "rotatedKeyAlias": "dev-test-aes-256-3"
     }
    },
    "ApplVerDecrReq": {
     "type": "object",
     "required": [
      "encryptedPrivateKey",
      "merchantCertificate",
      "paymentToken"
     ],
     "properties": {
      "encryptedPrivateKey": {
       "type": "string",
       "format": "byte",
       "description": "A byte-string containing the merchant’s private key material, previously encrypted by CaaS."
      },
      "merchantCertificate": {
       "type": "string",
       "description": "A PEM-encoded certificate, signed by Apple. This certificate must correspond directly to the encryptedPrivateKey value (i.e. the public key must match)."
      },
      "paymentToken": {
       "type": "object",
       "description": "The literal payment token object that was generated by the device. This payment token should be serialized directly into a JSON object on the device and sent completely unmodified directly to CaaS."
      }
     },
     "example": {
      "encryptedPrivateKey": "MIIClzCCAX8CEQCVilPk3XweAOTIqRLQ6s2/MA0GCSqGSIb3DQEBC ...",
      "merchantCertificate": "-----BEGIN CERTIFICATE-----\nMIICvDCCAaQCAQGA1UEBhMCV ...",
      "paymentToken": {
       "version": "EC_v1",
       "data": "s2aKdfTGkr2hYWRQC7BWXaPtrCnZwc3 ...",
       "signature": "MIAGCSqGSIb3DQEHAqCAMIACAQExDzA ...",
       "header": {
        "transactionId": "a6092fd3d54d82c13b3bc308d223b6c5f575e3ba63157e58 ...",
        "ephemeralPublicKey": "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQ ...",
        "publicKeyHash": "ITAsfAcPav/mmUlbqCZuXVNHAbM7FxrULdAbOprk1Sk="
       }
      }
     }
    },
    "ApplVerDecrRes": {
     "type": "object",
     "properties": {
      "verified": {
       "type": "boolean",
       "description": "Indicates whether the payment token’s signature was successfully verified. This does NOT inspect the signing time of the signature to prevent a possible replay attack."
      },
      "tokenData": {
       "type": "string",
       "format": "byte",
       "description": "A byte-string containing the raw decrypted stream of bytes that represent the EMV or 3D Secure payment token data. Typically this is a JSON object that has been base64 encoded."
      },
      "rotatedCipher": {
       "type": "string",
       "format": "byte",
       "description": "This is an optional response value that indicates your encryption key for this request has been rotated in the form of a byte-string. CaaS has re-encrypted your old data with the newly-rotated key and has provided you that new value so that you may update your records."
      },
      "rotatedKeyAlias": {
       "type": "string",
       "description": "This is an optional repsonse value that indicates which key was used when calculating the rotatedCipher value above."
      },
      "signingTime": {
       "type": "string",
       "description": "A UNIX timestamp, in UTC which represents the time that the signature was generated. It is your responsibility to apply pertinent business rules to the signing time to prevent replay attacks."
      }
     },
     "example": {
      "verified": true,
      "tokenData": "AvDG63LLv8a3+blOkeDtOf38YWDmk2tC5xFV ...",
      "signingTime": "1416347814",
      "requestId": "1418659162408:cas0stl1:37952:i3kppbil:10435",
      "rotatedCipher": "IKoZIzj0DAQcDQ ...",
      "rotatedKeyAlias": "dev-test-aes-256-3"
     }
    },
    "GenKeyPairRSAReq": {
     "type": "object",
     "required": [
      "modulusBits"
     ],
     "properties": {
      "alias": {
       "type": "string",
       "description": "The alias of the key to use when wrapping the generated private key. This field is optional. If it is not specified, your default AES encryption key will be used."
      },
      "modulusBits": {
       "$ref": "#/components/schemas/ModBits"
      }
     },
     "example": {
      "modulusBits": 2048
     }
    },
    "GenKeyPairRSARes": {
     "type": "object",
     "properties": {
      "encryptedPrivateKey": {
       "type": "string",
       "format": "byte",
       "description": "A byte-string containing the private key value, which has been wrapped by the specified AES key."
      },
      "publicKey": {
       "type": "string",
       "format": "byte",
       "description": "A byte-string containing the unencrypted public key which corresponds to the private key."
      },
      "requestId": {
       "type": "string",
       "description": "Request ID which can be used to track the status of the request."
      }
     },
     "example": {
      "encryptedPrivateKey": "MDYwN0I2MzVGMDdCRDJGMRBPTiMC2yY2QOxhnDpd9ski2mvhZh+H/1QS9U2tnDy0q4epcZeQFtKNYohj6PpJFqjMx8VE5s4btfiVJAeYaXjLpOQwFSxtkOZ1MWWT7EjrfOyXoVd4yPTUgeA+t9gEJO+jowFMPMtYxdQyixbWh4G7LkYAD4kayq0gtIxwwu5d4JSJTFAF3lZSMOLS6Tf+opsR2zLf+XdqvfnUKTjUVNGITinAWhXqZOryF2CHMm/aCm+uqGS4oCPVQPhEMl9LZpMYo1Hit8OcubdWaMYoguNoZhC0MYDaVa3ZIAloVikWFNQ6CQdRvg98RvA+SPzu+ijYSGHB30GrArG+EI5T6dE1xW0D7Th2R7D5wh3ayPLHlzvn/RB+y7oLW3P4Pc67k9QsnXzToTS2vrRD3h7HRdTdS/pNmy+MLKho9pE1eFp3iaZ+tIOm0LQIsyObkRPQv+sP4svdaKhtIbKLb4dH2byn7p5NsKCH0SD3UHsFjO25orOdWsRb6QsPP3z9qsq+hhhhlrz1wa+kuyUvqxoolqOAIqweSsLm1A5s8vY5RGjvUmVgIj03IqAY+hkKX4vamGBDrPVWYuUzfjCI7RZRFuaMcI388W0HydgRANPdWYZGSk0PVYIW7W1xTQlUO9MSKA1yUmDBpXJnp/zJu+GOFeSy35/LTLXFfkyN+7V+UQBBYVciNzpIuj/fXZUAkuFhD9fDztzXE+LWuGe8roQUd1Ftf7zDw1oHq9u9o8/oi4N8O3mpg6DyTmaq/3jxXD8elxK8jNqwVMu8Pl7PWX6+/YqEzvF5TaQHk78v0iXTokd+3wcMDpT9bXz3zTuwpCtcuk8wIuleHwSnkpmyY+sEjBO6tKTTPaAxzFeVeM0c47u2vNQyG/J/kdhI19rZ+dZUgnZ89Eu5omqHNP8V86xqnna6JVWPtojkwXBqN6ewHINpzRUsxdwGt60yLkBjZZGEFnPE6JcY5cl3ZcnYqgDcDRLFNoCpDT+51frUFKjPsKABX33su6ti1DDhX7c8ut1mqd0hVnzShpcAiwizngEbnq0RLxSjQUBe15MPkc6YdP1KK06QIVOQPCg3me5P+Q1bGisSlB4/EONZG+gQYpTBH9K22wKC+cGJL5b2eRm74Bmj8w4WiZRpJVI6pI2T7X9TfLor1yva/mnDyuv37Ac4idcu2BLjce88fascYcsniSac9XBmXbwO9W89g4wL5qD0Au+xf85s0LyD2xMpPkDcIHtjNmVWlhm2LZOcoEjOIOz2sNjo/R/547IA1NmUW7dF+0OpaJ7W1Xpft33//icg98Mc09PXK8JscXh/DvMQ1i0kw+LJBGMaoIgcW1q+bYweLoWMWyebq2DOuqjlETvcRrw83rAfK7pXqxqVYtCnoEDlFjUsm0sQGu3Gp75Ode4y4Hk1TcUyuRIO7/Jmvw57ecXABtBdPmXb80M3spbcAkcPdfMX1YrDOdWmY+L20ugKrhUErO6YewyPsWqajzEuFNZGeM5KK6op/6a+31mUQdX4Y6cUrqMl2xvy0mM5P6IJMYcKb1OMj0+da5NIe2K5f/ANgzGbo0ER0U3c3exCXgWZb7N6Y6HG1JF4JK5SR0GmJpPL4P7NNRHSSIapsAjESfoD6kZvUsshmXq9FEm3X+Yhsb6URj5lrNlKTjTwIk+QTgg=",
      "publicKey": "MIIBCgKCAQEA6RqSKBEC/RtuA195qReBTJ0fZISmzfCsjnDSxGBLKsSs/IGQHTa96oHcWHMs/Y5oEOm+t0Eb5q5wTnxri87+osTfxRooqsApNJ6VyBNp2LqIrt8wxQZ+3BiZO56u1OGymMdOISQYsf+xJak0wvf21aTConmpJr+PtrqIa6Iyis7wL56y4mG0TBmYmS/QSmRja6sQDC5PNEiBGsABV4OUbMaW412z5UZzvHB5QYDjnb5kj0zrVatnEKkMlzDzVdibZhVN3ODF5sVW4KAc6b39Z7xTPqJMRdlujNENr6oOh4PC1k3fkGUUs9/DLxAlS6POLrydk+o+V7A2EfQL7ZI0EwIDAQAB",
      "requestId": "1522775649295:cas0stl2:8424:jfd00sdf:22928"
     }
    },
    "GenKeyPairECCReq": {
     "type": "object",
     "required": [
      "curveName"
     ],
     "properties": {
      "alias": {
       "type": "string",
       "description": "The alias of the key to use when wrapping the generated private key. This field is optional. If it is not specified, your default AES encryption key will be used."
      },
      "curveName": {
       "type": "string",
       "description": "The name of the prime curve to use when generating the key pair. Currently, only \"prime256v1\" is supported."
      }
     },
     "example": {
      "curveName": "prime256v1"
     }
    },
    "GenKeyPairECCRes": {
     "type": "object",
     "properties": {
      "encryptedPrivateKey": {
       "type": "string",
       "format": "byte",
       "description": "A byte-string containing the private key value, which has been wrapped by the specified AES key."
      },
      "publicKey": {
       "type": "string",
       "format": "byte",
       "description": "A byte-string containing the unencrypted public key which corresponds to the private key."
      },
      "requestId": {
       "type": "string",
       "description": "Request ID which can be used to track the status of the request."
      }
     },
     "example": {
      "encryptedPrivateKey": "MDYwN0I2MzVGMDdCRDJGMRCtV76dMPHgVIw/a9SJvVPtwJSlY0cQZc/+u5Y52JvGr1pq3onDd3gnA3guNelDk2xc775vZldkf+R2YpAJUa63R67t5WEgy2WWniLPG0rL7S/8hQZEYMq8Ggl3v78D404=",
      "publicKey": "BHGcF8DJfN5KPKPUoe10+lLb/cyfhXTc4UIJskv8mCJYETVDKbhpPAq5D7bRsgZXM25NeBcMJE7o21HIXMOmODg=",
      "requestId": "1522775886385:cas0stl2:8424:jfd00sdf:22935"
     }
    },
    "GenSecKeyReq": {
     "type": "object",
     "required": [
      "length"
     ],
     "properties": {
      "alias": {
       "type": "string",
       "description": "The alias of the key to use when wrapping the generated private key. This field is optional. If it is not specified, your default AES encryption key will be used."
      },
      "length": {
       "$ref": "#/components/schemas/Length"
      }
     },
     "example": {
      "length": 16
     }
    },
    "GenSecKeyRes": {
     "type": "object",
     "properties": {
      "encryptedSecretKey": {
       "type": "string",
       "format": "byte",
       "description": "A byte-string containing the secret key value, which has been wrapped by the specified AES key."
      },
      "requestId": {
       "type": "string",
       "description": "Request ID which can be used to track the status of the request."
      }
     },
     "encryptedSecretKey": "MDYwN0I2MzVGMDdCRDJGMRB1SIsBFNx6zxpFoThVw8I05Jln0qwILhKprN9JR0oRp7yB38NC6Moym4Ozvp9Fmnk=",
     "requestId": "1522776002704:cas0stl2:8418:jfd00s9w:22955"
    }
   },
   "Length": {
    "type": "integer",
    "description": "The length (in bytes) of the key to generate.",
    "enum": [
     16,
     32
    ]
   },
   "ModBits": {
    "type": "integer",
    "description": "The bit-size of the modulus.",
    "enum": [
     2048,
     4096,
     8192
    ]
   },
   "WrappingOptions": {
    "type": "object",
    "required": [
     "publicKey"
    ],
    "properties": {
     "alg": {
      "$ref": "#/components/schemas/ALG"
     },
     "iv": {
      "type": "string",
      "format": "byte",
      "description": "A byte-string containing the IV that will be used to wrap the content encryption key. This value is forbidden when RSA key is used for wrapping. But, a minimum of 12 bytes is required when using GCM mode. Otherwise it should be exactly 16 bytes."
     },
     "aad": {
      "type": "string",
      "format": "byte",
      "description": "A byte-string containing the Additional Authentication Data (AAD) used to wrap this key. This value is optional, and it only applies in GCM mode."
     },
     "apu": {
      "type": "string",
      "format": "byte",
      "description": "A byte-string containing the APU is required and will be used to calculate the shared data when using *\"ECDH-ES+A128KW\"* or *\"ECDH-ES+A256KW\"* for key wrapping. Otherwise, it is forbidden."
     },
     "apv": {
      "type": "string",
      "format": "byte",
      "description": "A byte-string containing the APV is required and will be used to calculate the shared data when using *\"ECDH-ES+A128KW\"* or *\"ECDH-ES+A256KW\"* for key wrapping. Otherwise, it is forbidden."
     },
     "secretKey": {
      "type": "string",
      "description": "The alias of the HSM symmetric key [AES] that will be used to wrap the CEK. This argument is mutually exclusive with *\"publicKey\"* and *\"privateKey\"*."
     },
     "privateKey": {
      "type": "string",
      "description": "The alias of the asymmetric private key that will be used to derive a key which will be used to wrap the CEK. This is valid only with ECDH algorithm."
     },
     "publicKey": {
      "type": "object",
      "description": "A valid [JSON Web Key (JWK)](http://self-issued.info/docs/draft-ietf-jose-json-web-key.html) representing the public key to use for derivation or key wrapping."
     }
    }
   },
   "UnwrappingKeyOptionsAdvanced": {
    "type": "object",
    "properties": {
     "privateKey": {
      "type": "string",
      "description": "The alias of the asymmetric private key that will be used for unwrapping the wrapped key from the cipher. Mutually exclusive with encryptedPrivateKey. One of privateKey or encryptedPrivateKey is required."
     },
     "encryptedPrivateKey": {
      "type": "string",
      "format": "byte",
      "description": "A byte-string containing the asymmetric private key that will be used for unwrapping the wrapped key from the cipher. This key must have been previously encrypted by CaaS using one of the CaaS key pair generation methods. Mutually exclusive with privateKey. One of encryptedPrivateKey or privateKey is required."
     }
    }
   },
   "UnwrappingKeyOptions": {
    "type": "object",
    "required": [
     "publicKey"
    ],
    "properties": {
     "iv": {
      "type": "string",
      "format": "byte",
      "description": "A byte-string containing the IV that will be used to wrap the content encryption key. This value is forbidden when RSA key is used for wrapping. But, a minimum of 12 bytes is required when using GCM mode. Otherwise it should be exactly 16 bytes."
     },
     "aad": {
      "type": "string",
      "format": "byte",
      "description": "A byte-string containing the Additional Authentication Data (AAD) used to wrap this key. This value is optional, and it only applies in GCM mode."
     },
     "apu": {
      "type": "string",
      "format": "byte",
      "description": "A byte-string containing the APU is required and will be used to calculate the shared data when using *\"ECDH-ES+A128KW\"* or *\"ECDH-ES+A256KW\"* for key wrapping. Otherwise, it is forbidden."
     },
     "apv": {
      "type": "string",
      "format": "byte",
      "description": "A byte-string containing the APV is required and will be used to calculate the shared data when using *\"ECDH-ES+A128KW\"* or *\"ECDH-ES+A256KW\"* for key wrapping. Otherwise, it is forbidden."
     },
     "privateKey": {
      "type": "string",
      "description": "The alias of the asymmetric private key that will be used to derive a key which will be used to unwrap the CEK. This is valid only with ECDH algorithm."
     },
     "publicKey": {
      "type": "object",
      "description": "A valid [JSON Web Key (JWK)](http://self-issued.info/docs/draft-ietf-jose-json-web-key.html) representing the public key to use for derivation or key wrapping. This argument is mutually exclusive with ```secretKey```."
     }
    }
   },
   "PseudorandomFunction": {
    "type": "string",
    "description": "Optional pseudorandom function to use for this operation. Defaults to HMAC-SHA1 if not specified.",
    "enum": [
     "HMAC-SHA1",
     "HMAC-SHA256",
     "HMAC-SHA512"
    ]
   },
   "PaddingModeRSA": {
    "type": "string",
    "description": "Optional padding mode to use for RSA public-key encryption. Defaults to ```PKCS1``` if not specified.",
    "enum": [
     "PKCS1",
     "OAEP"
    ]
   },
   "PaddingModeAES": {
    "type": "string",
    "description": "Optional padding mode to use for block-cipher specific algorithm modes. Defaults to ```PKCS7``` if not specified.",
    "enum": [
     "PKCS7",
     "None"
    ]
   },
   "AlgorithmMode": {
    "type": "string",
    "description": "Optional AES mode to use for block-cipher encryption.",
    "enum": [
     "GCM",
     "CBC",
     "ECB"
    ]
   },
   "OaepPadding": {
    "type": "string",
    "description": "A parameter that specifies which hashing algorithm should be used for OAEP padding. If paddingMode is \"OAEP\" this argument is *required*, otherwise it is forbidden.",
    "enum": [
     "SHA256",
     "SHA512"
    ]
   },
   "ENC": {
    "type": "string",
    "description": "The encryption algorithm to use.",
    "enum": [
     "A128CBC-HS256",
     "A256CBC-HS512",
     "A128GCM",
     "A256GCM"
    ]
   },
   "ALG": {
    "type": "string",
    "description": "The algorithm that will be used to wrap this key",
    "enum": [
     "RSA1_5",
     "RSA-OAEP",
     "RSA-OAEP-256",
     "ECDH-ES+A128KW",
     "ECDH-ES+A256KW",
     "A128KW",
     "A256KW",
     "A128GCMKW",
     "A256GCMKW"
    ]
   },
   "ALGAdv": {
    "type": "string",
    "description": "The algorithm that will be used to wrap this key",
    "enum": [
     "RSA1_5",
     "RSA-OAEP",
     "RSA-OAEP-256"
    ]
   },
   "DataPrepReq": {
    "type": "object",
    "required": [
     "keyInfo",
     "panInfo",
     "requests"
    ],
    "properties": {
     "keyInfo": {
      "$ref": "#/components/schemas/KeyInfo"
     },
     "panInfo": {
      "$ref": "#/components/schemas/PanInfo"
     },
     "requests": {
      "$ref": "#/components/schemas/EMVRequests"
     }
    },
    "example": {
     "keyInfo": {
      "kcvLen": 3,
      "kekId": "5480981600100000000-01-041-001",
      "kekType": "TripleDESKeyId"
     },
     "panInfo": {
      "pan": "5412751234567807",
      "panSeqNum": "00"
     },
     "requests": [
      {
       "batchRequestId": "1",
       "method": "POST",
       "path": "/emv/encrypt-request",
       "payload": {
        "dataToEncrypt": "930837668283e8c03947c48a5ff68b57",
        "iv": null,
        "mode": "ECB"
       }
      },
      {
       "batchRequestId": "2",
       "method": "POST",
       "path": "/emv/encrypt-request",
       "payload": {
        "dataToEncrypt": "995d0b51132e2c75",
        "iv": null,
        "mode": "ECB"
       }
      },
      {
       "batchRequestId": "3",
       "method": "POST",
       "path": "/emv/encrypt-request",
       "payload": {
        "dataToEncrypt": "822683586fb8f152",
        "iv": null,
        "mode": "ECB"
       }
      },
      {
       "batchRequestId": "4",
       "method": "POST",
       "path": "/emv/derive-3des-key",
       "payload": {
        "derivationMethod": "OPTION_A",
        "imk": {
         "keyId": "5480981600100000000-01-021-001",
         "objectType": "TripleDESKeyId"
        }
       }
      },
      {
       "batchRequestId": "5",
       "method": "POST",
       "path": "/emv/derive-3des-key",
       "payload": {
        "derivationMethod": "OPTION_A",
        "imk": {
         "keyId": "5480981600100000000-01-022-001",
         "objectType": "TripleDESKeyId"
        }
       }
      },
      {
       "batchRequestId": "6",
       "method": "POST",
       "path": "/emv/derive-3des-key",
       "payload": {
        "derivationMethod": "OPTION_A",
        "imk": {
         "keyId": "5480981600100000000-01-024-001",
         "objectType": "TripleDESKeyId"
        }
       }
      },
      {
       "batchRequestId": "7",
       "method": "POST",
       "path": "/emv/derive-3des-key",
       "payload": {
        "derivationMethod": "OPTION_A",
        "imk": {
         "keyId": "5480981600100000000-01-023-001",
         "objectType": "TripleDESKeyId"
        }
       }
      },
      {
       "batchRequestId": "8",
       "method": "POST",
       "path": "/emv/derive-3des-key",
       "payload": {
        "derivationMethod": "OPTION_A",
        "imk": {
         "keyId": "5480981600100000000-01-026-001",
         "objectType": "TripleDESKeyId"
        }
       }
      },
      {
       "batchRequestId": "9",
       "method": "POST",
       "path": "/emv/create-icc-key-and-cert",
       "payload": {
        "algMode": "ECB",
        "expiryDate": "0120",
        "iv": null,
        "keyExponent": "3",
        "keyLen": 1024,
        "padMode": "EIGHTY_AND_ZEROS",
        "serialNum": "000001",
        "signingKey": {
         "keyId": "5480981600100000000-01-061-001",
         "objectType": "RSAKey"
        },
        "staticAppData": "57135412751234567807D14092010000000000000F5A0854127512345678075F24031409305F25031309015F280208405F3401008C219F02069F03069F1A0295055F2A029A039C019F37049F35019F45029F4C089F34038D0C910A8A0295059F37049F4C088E0E000000000000000042031E031F039F0702FF009F080200029F0D05B4508400009F0E0500000000009F0F05B4708480009F420208409F4A01821B80"
       }
      },
      {
       "batchRequestId": "10",
       "path": "/emv/create-iv-and-cvc",
       "method": "POST",
       "payload": {
        "derivationMethod": "OPTION_A",
        "imk": {
         "keyId": "5480981600100000000-01-026-001",
         "type": "TripleDESKeyId"
        },
        "trackData": "42353431323735313233343536373830375E202F5E31343039323031303030303030303030303030303030303030303030303030",
        "xorString": "9559"
       }
      },
      {
       "batchRequestId": "11",
       "path": "/emv/create-iv-and-cvc",
       "method": "POST",
       "payload": {
        "derivationMethod": "OPTION_A",
        "imk": {
         "keyId": "5480981600100000000-01-026-001",
         "type": "TripleDESKeyId"
        },
        "trackData": "42353431323735313233343536373830375E202F5E31343039323031303030303030303030303030303030303030303030303030",
        "xorString": "0000"
       }
      },
      {
       "batchRequestId": "12",
       "path": "/emv/create-iv-and-cvc",
       "method": "POST",
       "payload": {
        "derivationMethod": "OPTION_A",
        "imk": {
         "keyId": "5480981600100000000-01-026-001",
         "type": "TripleDESKeyId"
        },
        "trackData": "42353431323735313233343536373830375E202F5E31343039323031303030303030303030303030303030303030303030303030",
        "xorString": "9559"
       }
      },
      {
       "batchRequestId": "13",
       "path": "/emv/create-iv-and-cvc",
       "method": "POST",
       "payload": {
        "derivationMethod": "OPTION_A",
        "imk": {
         "keyId": "5480981600100000000-01-026-001",
         "type": "TripleDESKeyId"
        },
        "trackData": "42353431323735313233343536373830375E202F5E31343039323031303030303030303030303030303030303030303030303030",
        "xorString": "0000"
       }
      }
     ]
    }
   },
   "DataPrepRes": {
    "type": "object",
    "properties": {
     "code": {
      "type": "string",
      "description": "Was it successful?"
     },
     "type": "string",
     "description": "The request ID associated with the data-prep request"
    },
    "responses": {
     "$ref": "#/components/schemas/EMVResponses"
    }
   },
   "example": {
    "code": "success",
    "requestId": "1418659162408:cas0stl1:37952:i3kppbil:10435",
    "responses": [
     {
      "batchRequestId": "1",
      "path": "/emv/encrypt-request",
      "statusCode": 200,
      "payload": {
       "encryptedData": "768AA3D7E8DB8B1E68C4521416711308"
      }
     },
     {
      "batchRequestId": "2",
      "path": "/emv/encrypt-request",
      "statusCode": 200,
      "payload": {
       "encryptedData": "92644E031698322F"
      }
     },
     {
      "batchRequestId": "3",
      "path": "/emv/encrypt-request",
      "statusCode": 200,
      "payload": {
       "encryptedData": "6BC106D1D12AA55F"
      }
     },
     {
      "batchRequestId": "4",
      "path": "/emv/derive-3des-key",
      "statusCode": 200,
      "payload": {
       "derivedKey": "DC92E8E9887F700D1B032EC91C2B2BB2",
       "kcv": "9BBC68"
      }
     },
     {
      "batchRequestId": "5",
      "path": "/emv/derive-3des-key",
      "statusCode": 200,
      "payload": {
       "derivedKey": "EA150BCD046E6885193700777B2D40BC",
       "kcv": "671D00"
      }
     },
     {
      "batchRequestId": "6",
      "path": "/emv/derive-3des-key",
      "statusCode": 200,
      "payload": {
       "derivedKey": "CC86D3918B89433C292FBC884027EFC9",
       "kcv": "BB7C11"
      }
     },
     {
      "batchRequestId": "7",
      "path": "/emv/derive-3des-key",
      "statusCode": 200,
      "payload": {
       "derivedKey": "84C9E22636395C71BE541558D38F14FF",
       "kcv": "259464"
      }
     },
     {
      "batchRequestId": "8",
      "path": "/emv/derive-3des-key",
      "statusCode": 200,
      "payload": {
       "derivedKey": "CFBE9C9D12D015C3748948D6D41F6195",
       "kcv": "EA195D"
      }
     },
     {
      "batchRequestId": "9",
      "path": "/emv/create-icc-key-and-cert",
      "statusCode": 200,
      "payload": {
       "certificate": [
        "348F4235DE5703363F88FB3164AE306F463B621F57FC7226C66DC22EA841E89B5A7A740D3802D4692610E3DB31BC7BD3F88D2CE120F87DD023418C955767C4385583AD2620A6F5BDF9667B92625445C287363C50CFB4557235EF9C0C6AD33C866704D7AD6E14C0B423519BBABBB9AA3BBF9335268A4F5F2B1A01B7FB04ECFF48CDC0D3BBD1FAD8822C205EC14BBF3F088E57B767951CA9F61D65BB19AF037228EA07436445C0425E670CF80A6B370A4C"
       ],
       "d1": "E7648C44119BD7C8AF36914345201C9EB210B786618034260A708AF9135A147C56A36DC5953CB6DE12AB44541E953AEB1F0DC4ECDB461FBCEA743D5B213730844AF3AB0B63B60C92",
       "d2": "59F2BF639D90F13DB6C71B12E66EA1424BA0A74C0CAFC6B3C1D03507CBF2F7A00F3C234E520CCCA7AF2C14A0E395A5DD32BBF6A1F5636F3AF3D9E571D7C0512F4AF3AB0B63B60C92",
       "exponent": "3",
       "modInvOfQ": "D0A2A7B885F5BD41C6E7B3BD34F1BC8B518D35DAEF9B117EBFE751F876298C176E1AED084F0C8291985B6037E53E11B49E532B9B2B1AEE5C138801BF998D8F874AF3AB0B63B60C92",
       "modulus": "DEC2AC9992A465F727D244DB10727D64B22F02D207DAB4916C58B179D09B2D44523BA51A8E40BD3B210A8EB5889E8A73362AEFE2977F4AA283E218B50988774DA592F96E23AF78705447FD74A774645A7D88F99D190A23FF7A57ADDBACBC3C71CE7C6E0E09FD9135EFFEEA1C41947721110B2ABB4ED8145394BB132006152FED",
       "p": "F768ACA50BA8B9ADC009F43143BB2635226EC99ADB619CB953F0CF81F090D6F326F874646F8678DE6ED00D4C7E2BBBDCEFB560DDD408762E34666C4F929694D14AF3AB0B63B60C92",
       "privateKey": "54436FB3CFF09B85327A2D2DC66EE57D9C91D5893D0D10A12FC11C7679542E511D4AD6DA697289D754C9E943F6A3349A42B64DD97D955261AAA7229AD77BE338AB0CDF17E07A4A160459116B6D20DEAB0173560686B2551F23B857A172F5DE84635FA43136D512811CE3AE4D5377CBAF208A83DD5D615FE9B62057C4229E2F5A4AF3AB0B63B60C92",
       "publicKeyRemainder": "",
       "q": "7A8DA45DE762E9EC0C6D0BC653E7E613DD026B47A6CD1407EDBB767C8380959EFB27DA50659FE59C26CA3D088515471A0D79FDA6B7E8FFFB1EDFFA6C8E42FA684AF3AB0B63B60C92"
      }
     },
     {
      "batchRequestId": "10",
      "path": "/emv/create-iv-and-cvc",
      "statusCode": 200,
      "payload": {
       "ivcvc": "4777"
      }
     },
     {
      "batchRequestId": "11",
      "path": "/emv/create-iv-and-cvc",
      "statusCode": 200,
      "payload": {
       "ivcvc": "D22E"
      }
     },
     {
      "batchRequestId": "12",
      "path": "/emv/create-iv-and-cvc",
      "statusCode": 200,
      "payload": {
       "ivcvc": "4777"
      }
     },
     {
      "batchRequestId": "13",
      "path": "/emv/create-iv-and-cvc",
      "statusCode": 200,
      "payload": {
       "ivcvc": "D22E"
      }
     }
    ]
   }
  },
  "GetIssuerCert": {
   "type": "object",
   "required": [
    "certId"
   ],
   "properties": {
    "certId": {
     "type": "string",
     "description": "Certificate ID to retrieve."
    }
   },
   "example": {
    "certId": "000535-1000000-01-03"
   }
  },
  "GetIssuerCertRes": {
   "type": "object",
   "properties": {
    "certificate": {
     "type": "string",
     "description": "The encoded certificate data of the requested certificate."
    },
    "issuerKeyIndex": {
     "type": "string",
     "description": "Not personalized. This is present in the data provided by KMS and is not necessary for ```MDES```."
    },
    "panPrefix": {
     "type": "string",
     "description": "The given pan prefix. Typically ```19``` digits long. For example ```5538250000000000013```."
    },
    "paymentSystemKeyIndex": {
     "type": "string"
    },
    "publicKeyExponent": {
     "type": "string",
     "description": "The given exponent to be used for signature verification or encryption. The first of two parts of the ```Public Key```."
    },
    "publicKeyRemainder": {
     "type": "string",
     "description": "Also referred to as the modulus. Is used along with the ```publicKeyExponent``` for signature verification or encryption. The second of two parts of the ```Public Key```."
    },
    "requestId": {
     "type": "string",
     "description": "The request ID associated with the request."
    }
   },
   "example": {
    "certificate": "12e5471c517c380437919c78132c39959958d4d5de7cd9e7a53c813b20658a82a9653eff1f671c4ac424889de2e79789c5f337e8173d76fdead2e0b592cd54618ff033953f352c11af9e31f38ed622018bb1c9717851389e217285be925542a7c0024fa544021bd3b643561d689ca50beb08523ee419879cb0d166bb90246245cb286dd0d7430d3d49e4cf7af2c49b2f118efa0128b39ce5ce63095e7cee50b0618cf9f6816fab6d3660f4de992f4475107562d11a1d2bed1a1bc449eb455b9d68e609743dd6b9f3250a831c4b0e6454b797e64223688690f28fc025a7ca8b77ccaec405622196a77ad5df56a63cf2239115e54f2eae0c5d",
    "issuerKeyIndex": "0000e8",
    "panPrefix": "53545fff",
    "paymentSystemKeyIndex": "ef",
    "publicKeyExponent": "03",
    "publicKeyRemainder": "386342ac7834db036b7824b6716531c65bc8f7bd202b16ced00b73b6e2d733ef851132a3",
    "requestId": "1418659162408:cas0stl1:37952:i3kppbil:10435"
   }
  },
  "KeyInfo": {
   "type": "object",
   "description": "Information to tell us more about the key being used in the operation.",
   "properties": {
    "kcvLen": {
     "type": "integer",
     "description": "The length of the ```Key Checksum Value (KCV)```."
    },
    "kekId": {
     "type": "string",
     "description": "The identifier for the ```Key Encryption Key (KEK)```."
    },
    "kekType": {
     "type": "string",
     "description": "The type of key the ```Key Encryption Key (KEK)``` is."
    }
   }
  },
  "PanInfo": {
   "type": "object",
   "description": "Object with properties pan and panSeqNum.",
   "properties": {
    "pan": {
     "type": "string",
     "description": "The ```Primary Account Number (PAN)```"
    },
    "panSeqNum": {
     "type": "string",
     "description": "Differentiates accounts that have the same PAN."
    }
   }
  },
  "EMVResponses": {
   "type": "array",
   "description": "Array of objects for the batch of requests to perform. Each request object should contain batchRequestId, path, method, and payload.",
   "items": {
    "type": "object",
    "properties": {
     "batchRequestId": {
      "type": "string",
      "description": "ID pertaining to the batch request."
     },
     "statusCode": {
      "type": "integer",
      "description": "HTTP status code received."
     },
     "path": {
      "type": "string",
      "description": "What endpoint the request originated from."
     },
     "payload": {
      "type": "object",
      "description": "Payload of the given request."
     }
    }
   }
  },
  "EMVRequests": {
   "type": "array",
   "description": "Array of objects for the batch of requests to perform. Each request object should contain batchRequestId, path, method, and payload.\n",
   "items": {
    "type": "object",
    "properties": {
     "batchRequestId": {
      "type": "string",
      "description": "ID pertaining to the batch request."
     },
     "method": {
      "type": "string",
      "description": "HTTP method used.\n\nValid values include:\n - ```post```\n - ```get```\n - ```update```\n - ```delete```\n - ```head```\n"
     },
     "path": {
      "type": "string",
      "description": "What endpoint the request originated from.\n\nValid endpoints (path) for requests include:\n - ```/emv/derive-3des-key```\n - ```/emv/create-icc-key-and-cert```\n - ```/emv/create-iv-and-cvc```\n - ```/emv/calculate-cvc```\n - ```/emv/get-issuer-cert```\n - ```/emv/decrypt-request```\n - ```/emv/encrypt-request```\n - ```/emv/pregenerated-icc-key-and-cert```\n"
     },
     "payload": {
      "type": "object",
      "description": "Payload of the given request."
     }
    }
   }
  },
  "DeriveTripleDESReq": {
   "type": "object",
   "required": [
    "derivationMethod",
    "imk"
   ],
   "properties": {
    "derivationMethod": {
     "type": "string",
     "description": "Derivation method to be used for the derivation of the Triple DES key. Valid options are ```OPTION_A``` or ```OPTION_B```."
    },
    "imk": {
     "type": "object",
     "description": "Contains the properties necessary to derive the new Triple DES key.",
     "required": [
      "keyId",
      "objectType"
     ],
     "properties": {
      "keyId": {
       "type": "string",
       "description": "Consists of a sequence (in order) of the elements ```CPAN RANGE START```, ```SERVICE CODE```, ```KEY TYPE CODE```, and ```RENEWAL SEQUENCE```. For example, ```5480981600100000000-01-026-001```."
      },
      "objectType": {
       "type": "string",
       "description": "Statically configured to always be ```TripleDESKeyId``` by ```MDES```."
      }
     }
    }
   },
   "example": {
    "derivationMethod": "OPTION_A",
    "imk": {
     "keyId": "5480981600100000000-01-024-001",
     "objectType": "TripleDESKeyId"
    }
   }
  },
  "DeriveTripleDESRes": {
   "type": "object",
   "properties": {
    "derivedKey": {
     "type": "string",
     "description": "The derived Triple DES key that has been encrypted by the ```kek```."
    },
    "kcv": {
     "type": "string",
     "description": "The ```Key Checksum Value (KCV)```"
    },
    "requestId": {
     "type": "string",
     "description": "The request ID associated with the request."
    }
   },
   "example": {
    "derivedKey": "DC92E8E9887F700D1B032EC91C2B2BB2",
    "kcv": "9BBC68",
    "requestId": "1418659162408:cas0stl1:37952:i3kppbil:10435"
   }
  },
  "GenCertReq": {
   "type": "object",
   "required": [
    "algMode",
    "keyExponent",
    "keyLen",
    "padMode",
    "serialNum",
    "signingKey",
    "expiryDate"
   ],
   "properties": {
    "algMode": {
     "type": "string",
     "description": "Mode to use ```ECB```/```CBC```. ```MDES``` statically configured to use ```ECB```."
    },
    "iv": {
     "type": "string",
     "description": "Initialization vector. This is only **required** when ```algMode``` is ```CBC```."
    },
    "keyExponent": {
     "type": "string",
     "description": "Exponent portion of the public key."
    },
    "keyLen": {
     "type": "number",
     "description": "Length of the public key's modulus (aka remainder)."
    },
    "padMode": {
     "type": "string",
     "description": "Padding mode to use. ```MDES``` statically configured to use ```EIGHTY_AND_ZEROS```."
    },
    "serialNum": {
     "type": "string",
     "description": "This is a cardlet level serial number. Use ```000001``` for **non-PIN** and ```000002``` for **PIN**."
    },
    "signingKey": {
     "type": "object",
     "description": "Key details for the signing key.",
     "required": [
      "keyId",
      "objectType"
     ],
     "properties": {
      "keyId": {
       "type": "string",
       "description": "Consists of a sequence (in order) of the elements ```CPAN RANGE START```, ```SERVICE CODE```, ```KEY TYPE CODE```, and ```RENEWAL SEQUENCE```. For example, ```5480981600100000000-01-026-001```"
      },
      "objectType": {
       "type": "string",
       "description": "Type of key to be used for signing. ```MDES``` statically configured to use ```RSAKey```."
      }
     }
    },
    "type": "string",
    "description": "Formatted ```MMYY``` and will be the expiry date for the PAN being personalized."
   },
   "staticAppData": {
    "type": "string",
    "description": "Sourced from ```AFL D9/94``` and ```AIP D8/82``` (Payment/Management interface). This should be excluded for all requests involving an ```ICC PIN Certificate```."
   }
  },
  "example": {
   "algMode": "ECB",
   "expiryDate": "0120",
   "keyExponent": "3",
   "keyLen": 1024,
   "padMode": "EIGHTY_AND_ZEROS",
   "serialNum": "000001",
   "signingKey": {
    "keyId": "5480981600100000000-01-061-001",
    "objectType": "RSAKey"
   },
   "staticAppData": "57135412751234567807D14092010000000000000F5A0854127512345678075F24031409305F25031309015F280208405F3401008C219F02069F03069F1A0295055F2A029A039C019F37049F35019F45029F4C089F34038D0C910A8A0295059F37049F4C088E0E000000000000000042031E031F039F0702FF009F080200029F0D05B4508400009F0E0500000000009F0F05B4708480009F420208409F4A01821B80"
  }
 },
 "GenCertRes": {
  "type": "object",
  "properties": {
   "certificate": {
    "type": "string",
    "description": "The ICC Certificate"
   },
   "d1": {
    "type": "string",
    "description": "ICC Private Key CRT constant ```d mod (p - 1)```."
   },
   "d2": {
    "type": "string",
    "description": "ICC Private Key CRT constant ```d mod (q - 1)```."
   },
   "exponent": {
    "type": "string",
    "description": "The public key exponent."
   },
   "modInvOfQ": {
    "type": "string",
    "description": "ICC Private key CRT constant ```(q-1) mod p```."
   },
   "p": {
    "type": "string",
    "description": "ICC Private Key CRT constant prime factor p."
   },
   "q": {
    "type": "string",
    "description": "ICC Private Key CRT constant prime factor q."
   },
   "modulus": {
    "type": "string"
   },
   "privateKey": {
    "type": "string",
    "description": "The ICC private key. This is not needed for personalization or ```MDES```."
   },
   "publicKeyRemainder": {
    "type": "string",
    "description": "ICC Public Key Remainder."
   },
   "requestId": {
    "type": "string",
    "description": "The request ID associated with the request."
   }
  },
  "example": {
   "certificate": [
    "348F4235DE5703363F88FB3164AE306F463B621F57FC7226C66DC22EA841E89B5A7A740D3802D4692610E3DB31BC7BD3F88D2CE120F87DD023418C955767C4385583AD2620A6F5BDF9667B92625445C287363C50CFB4557235EF9C0C6AD33C866704D7AD6E14C0B423519BBABBB9AA3BBF9335268A4F5F2B1A01B7FB04ECFF48CDC0D3BBD1FAD8822C205EC14BBF3F088E57B767951CA9F61D65BB19AF037228EA07436445C0425E670CF80A6B370A4C"
   ],
   "d1": "E7648C44119BD7C8AF36914345201C9EB210B786618034260A708AF9135A147C56A36DC5953CB6DE12AB44541E953AEB1F0DC4ECDB461FBCEA743D5B213730844AF3AB0B63B60C92",
   "d2": "59F2BF639D90F13DB6C71B12E66EA1424BA0A74C0CAFC6B3C1D03507CBF2F7A00F3C234E520CCCA7AF2C14A0E395A5DD32BBF6A1F5636F3AF3D9E571D7C0512F4AF3AB0B63B60C92",
   "exponent": "3",
   "modInvOfQ": "D0A2A7B885F5BD41C6E7B3BD34F1BC8B518D35DAEF9B117EBFE751F876298C176E1AED084F0C8291985B6037E53E11B49E532B9B2B1AEE5C138801BF998D8F874AF3AB0B63B60C92",
   "modulus": "DEC2AC9992A465F727D244DB10727D64B22F02D207DAB4916C58B179D09B2D44523BA51A8E40BD3B210A8EB5889E8A73362AEFE2977F4AA283E218B50988774DA592F96E23AF78705447FD74A774645A7D88F99D190A23FF7A57ADDBACBC3C71CE7C6E0E09FD9135EFFEEA1C41947721110B2ABB4ED8145394BB132006152FED",
   "p": "F768ACA50BA8B9ADC009F43143BB2635226EC99ADB619CB953F0CF81F090D6F326F874646F8678DE6ED00D4C7E2BBBDCEFB560DDD408762E34666C4F929694D14AF3AB0B63B60C92",
   "privateKey": "54436FB3CFF09B85327A2D2DC66EE57D9C91D5893D0D10A12FC11C7679542E511D4AD6DA697289D754C9E943F6A3349A42B64DD97D955261AAA7229AD77BE338AB0CDF17E07A4A160459116B6D20DEAB0173560686B2551F23B857A172F5DE84635FA43136D512811CE3AE4D5377CBAF208A83DD5D615FE9B62057C4229E2F5A4AF3AB0B63B60C92",
   "publicKeyRemainder": "",
   "q": "7A8DA45DE762E9EC0C6D0BC653E7E613DD026B47A6CD1407EDBB767C8380959EFB27DA50659FE59C26CA3D088515471A0D79FDA6B7E8FFFB1EDFFA6C8E42FA684AF3AB0B63B60C92",
   "requestId": "1418659162408:cas0stl1:37952:i3kppbil:10435"
  }
 },
 "GenIVandCVCReq": {
  "type": "object",
  "required": [
   "derivationMethod",
   "imk",
   "trackData",
   "xorString"
  ],
  "properties": {
   "derivationMethod": {
    "type": "string",
    "description": "Derivation method to be used for the derivation of the Triple DES key. Valid options are ```OPTION_A``` or ```OPTION_B```."
   },
   "imk": {
    "type": "object",
    "description": "Contains the properties necessary to derive the new Triple DES key.",
    "required": [
     "keyId",
     "objectType"
    ],
    "properties": {
     "keyId": {
      "type": "string",
      "description": "Consists of a sequence (in order) of the elements ```CPAN RANGE START```, ```SERVICE CODE```, ```KEY TYPE CODE```, and ```RENEWAL SEQUENCE```. For example, ```5480981600100000000-01-026-001```."
     },
     "objectType": {
      "type": "string",
      "description": "Statically configured to always be ```TripleDESKeyId``` by ```MDES```."
     }
    }
   },
   "xorString": {
    "type": "string",
    "description": "For **NO MST (Magstripe Secured Transmissions) & with PIN** this value will be ```9559```.\n\nFor **NO MST (Magstripe Secured Transmissions) & NO PIN** this value will be ```0000```.\n\nFor **MST (Magstripe Secured Transmissions) & NO PIN** this value will be ```50A0```.\n\nFor **MST (Magstripe Secured Transmissions) & with PIN** this value will be ```C5F9```.\n"
   },
   "trackData": {
    "type": "string"
   }
  },
  "example": {
   "derivationMethod": "OPTION_A",
   "imk": {
    "keyId": "5480981600100000000-01-026-001",
    "type": "TripleDESKeyId"
   },
   "trackData": "42353431323735313233343536373830375E202F5E31343039323031303030303030303030303030303030303030303030303030",
   "xorString": "9559"
  }
 },
 "GenIVandCVCRes": {
  "type": "object",
  "properties": {
   "ivcvc": {
    "type": "string",
    "description": "```IVCVC3``` Track 1/2\n"
   },
   "requestId": {
    "type": "string",
    "description": "The request ID associated with the request."
   }
  },
  "example": {
   "ivcvc": "4773",
   "requestId": "1418659162408:cas0stl1:37952:i3kppbil:10435"
  }
 },
 "GenCVCReq": {
  "type": "object",
  "required": [
   "cvk",
   "trackData"
  ],
  "properties": {
   "cvk": {
    "type": "object",
    "description": "The ```Card Verification Key (CVK)``` details.",
    "required": [
     "keyId",
     "objectType"
    ],
    "properties": {
     "keyId": {
      "type": "string",
      "description": "Consists of a sequence (in order) of the elements ```CPAN RANGE START```, ```SERVICE CODE```, ```KEY TYPE CODE```, and ```RENEWAL SEQUENCE```. For example, ```5480981600100000000-01-026-001```."
     },
     "objectType": {
      "type": "string",
      "description": "Statically configured to always be ```TripleDESKeyId``` by ```MDES```."
     }
    }
   },
   "trackData": {
    "type": "string",
    "description": "Track 1 data."
   }
  },
  "example": {
   "cvk": {
    "keyId": "5480981600100000000-01-026-001",
    "type": "TripleDESKeyId"
   },
   "trackData": "42353431323735313233343536373830375E202F5E31343039323031303030303030303030303030303030303030303030303030"
  }
 },
 "GenCVCRes": {
  "type": "object",
  "properties": {
   "cvc": {
    "type": "string",
    "description": "The calculated ```CVC3``` value."
   },
   "requestId": {
    "type": "string",
    "description": "The request ID associated with the request."
   }
  },
  "example": {
   "cvc": "383",
   "requestId": "1418659162408:cas0stl1:37952:i3kppbil:10435"
  }
 },
 "EMVEncReq": {
  "type": "object",
  "required": [
   "mode",
   "dataToEncrypt",
   "paddingMode"
  ],
  "properties": {
   "iv": {
    "type": "string",
    "description": "Initialization Vector. Only required in th the case of ```CBC```."
   },
   "mode": {
    "type": "string",
    "description": "The algorithm mode to use ```CBC```/```ECB```."
   },
   "paddingMode": {
    "type": "string",
    "description": "Padding mode to be used. Either ```CONDITIONAL``` or ```NONE``` can be used. Use ```NONE``` to omit padding."
   },
   "dataToEncrypt": {
    "type": "string",
    "description": "Data string to be encrypted."
   }
  },
  "example": {
   "dataToEncrypt": "930837668283e8c03947c48a5ff68b57",
   "mode": "ECB",
   "paddingMode": "NONE"
  }
 },
 "EMVEncRes": {
  "type": "object",
  "properties": {
   "encryptedData": {
    "type": "string",
    "description": "The encrypted data from the request."
   },
   "requestId": {
    "type": "string",
    "description": "The request ID associated with the request."
   }
  },
  "example": {
   "encryptedData": "68B08D103A4304B4",
   "requestId": "1418659162408:cas0stl1:37952:i3kppbil:10435"
  }
 },
 "EMVDecReq": {
  "type": "object",
  "required": [
   "mode",
   "dataToDecrypt",
   "paddingMode"
  ],
  "properties": {
   "iv": {
    "type": "string",
    "description": "Initialization Vector. Only required in th the case of ```CBC```."
   },
   "mode": {
    "type": "string",
    "description": "The algorithm mode to use ```CBC```/```ECB```."
   },
   "paddingMode": {
    "type": "string",
    "description": "Padding mode to be used. Either ```CONDITIONAL``` or ```NONE``` can be used. Use ```NONE``` to omit padding."
   },
   "dataToDecrypt": {
    "type": "string",
    "description": "Data string to be decrypted."
   }
  },
  "example": {
   "dataToDecrypt": "68B08D103A4304B4",
   "mode": "ECB",
   "paddingMode": "NONE"
  }
 },
 "EMVDecRes": {
  "type": "object",
  "properties": {
   "decryptedData": {
    "type": "string",
    "description": "The decrypted data from the request."
   },
   "requestId": {
    "type": "string",
    "description": "The request ID associated with the request."
   }
  },
  "example": {
   "encryptedData": "930837668283e8c03947c48a5ff68b57",
   "requestId": "1418659162408:cas0stl1:37952:i3kppbil:10435"
  }
 },
 "SecSesCASDReq": {
  "type": "object",
  "required": [
   "aidOBKG",
   "caPublicKey",
   "casdPkCert",
   "casdResponse",
   "mode",
   "nameId",
   "outputMasterKeys",
   "secureSessionParams",
   "spSecretKey"
  ],
  "properties": {
   "aidOBKG": {
    "type": "string"
   },
   "caPublicKey": {
    "$ref": "#/components/schemas/CAPublicKey"
   },
   "casdPkCert": {
    "type": "string"
   },
   "casdResponse": {
    "type": "string"
   },
   "mode": {
    "type": "integer"
   },
   "nameId": {
    "type": "string"
   },
   "outputMasterKeys": {
    "type": "boolean"
   },
   "secureSessionParams": {
    "$ref": "#/components/schemas/SecureSessionParams"
   },
   "spSecretKey": {
    "$ref": "#/components/schemas/SPSecretKey"
   }
  },
  "example": {
   "apdu": [
    "80E2000067215964CABE32DA91E9D42F8633B5008E7635C07660DA266D0D563C6717F1F2DB1BA9CE1AF783413C2E67659186FE139229DF963A2C1E9114082B0BE60BBC5AE62681F134FF73E2F726A64049BC66EFBCD73EBF0AAD82819FBAABD3A2C7FE548E10328E54BB4782",
    "80E26001637760602D80F17457C66F9D048131CFB26957C3553D79EB691494F251E462396B7BD93AAFF0ECF8B0C9008EFA6C3C324A61292D4D7062533F00F83683D12D542DD0D68E8D862E7EE6E6D39344C074C58167B4B9AA3C13BE69C6FBFC968412C70F00F4F9",
    "80E2000267741964A23A71F15120686795F20A8093AD7AEFCD25B0CA769E1F7D8E5296F9ACF2434D45B77204C2DA42541B19DFFC4EFD2D3165A49CBDF2E85DF8D9188DFEAC136EE30BFDC0455F8AEF73058656234E9FC0E6D7C4765386D70B8887ED8595F452316ED4CB6DB0",
    "80E2600363323260D503C942FB936D486B885EBC18DDEFE1566C8BA4C35E9C070E9C3114F642481A45084BE899AD250983F06FBC0AE6A79B1A6B2B334C626976D83C4EFA376E12E503446C8F664FAD144667B2E1C6E95554AA3C13BE69C6FBFC968412C70F00F4F9",
    "80E200046722976448D018247B79D2004BBDB3FBCCF11B9278DA9863C490CB2CB2DCD8D5206B797472A785F97D96B4C59C4503E31C3C5F84DAA247A59D6F49ED9EBF66CDD7AECCFE43BE5502F7420CFAE39249012D62DCFCC37A71C811BF9485B2AF83B5FF1EEAFA1A643DCD",
    "80E2600563532360D48BDDDC190A18D6E24A5A4265DC687A8C9BF35505AF83E8271B069A64C310E80A462210459A352E4E71272F2BBAB605B45C20EE27796A8FD2AC8D93989FA5D4F2E5F83D91376131407EE8E1DB6E4E24AA3C13BE69C6FBFC968412C70F00F4F9",
    "80E200066776676455FB35B4E964BFF563C4617E2E43EFE509CEABBF1B610FF8A9B99B10716416794EBDDE717A62812D1E2B51881FE096829731957F8888FF8D63C51906155987035C34728F971412FB04BDEA205B073763F4B1B06222FBD6640D1EED27D8BAA7EC2E4B7EF1",
    "80E2600763124260FF2793193C316098DF07470940DA018479F36F4F526EFD2D60614F2AB8D5FDA328314425AE3FD051C76D83A564B573B10A867AE40AFF0A90FE01C833834BE31F4EE20F6380A08AE0F2DD2B46CDE6A5EEAA3C13BE69C6FBFC968412C70F00F4F9",
    "80E2000867793864481DC08423860DE73FFADE9E24E74FF299F0FF967A0F3C975E061669B7EE15D15F958E02336FF9D3FCD887134E6821DDB58EBB432A011E373CFC5AAFDB68F3C75EA984BDFB0EE827BF962321C9B3F087BAE6140CEE50D15484510A5E08091524EB570C97",
    "80E2600963280260ED0035F29FDD0AF9DE6EB85064DF215A5663781703419FAA7A126C60701165CDD576A5530C8DBA5A5E8A88313D2D515E138A2589D79FD60051DEDD9790277DF0E4BBB58E1A7C2D8A6C507661A361CBB3AA3C13BE69C6FBFC968412C70F00F4F9",
    "80E2000A675072642065033F50CA5650B9791600573444BFBB2C2FE5E0F5AF9B1B8441442C2B259E3600153C37A1050E8AB0E8CC3324A40678B63F25004B493600509D21FD6D24DC0DCC3270C52BB8B15C78E93DE1B878E4E308644DF6CE9B01FEC9266A4D4136D8EF4269AD",
    "80E2600B638363601C5D3A9EFFF6C47C5BC3C2DC4218ADCB88A447654E47F12CECC00BBE5B632005B8DAAB57122D8D60143D1117A82FC8DF2DBB6E35C86040ADFA159E95B7E1BEE549025EFAA2502170CACECCE0880F1DFEAA3C13BE69C6FBFC968412C70F00F4F9",
    "80E2000C67526364F299985E9DA60F435DAB78D0E724AEF6C176419E9461598085C93F867686CC217984763D62DC3B682486C8A7AC3CDD19B51A43D5450188F8D6C5908B7ED5562E46FF357F307AD884CAE5F8119227D853F2B471F20340D6BD5F7C351D34B510698D8B0F2A",
    "80E2600D63456960FE45833E4D094CB0A30715F5577DA1A7F1236DC401AE24B020DD3D2A3FF6A6EE9D263977BA0D6CFFDF021B77227A8C6E30FC3117E9152CFE97AF80CC557D10A1464EE161CACC29B98B91E5586F6A06D9AA3C13BE69C6FBFC968412C70F00F4F9",
    "80E2000E673718641FC43B9AF6513571743DCBD88FCDC0C22E1F6A76E8F38D614CA6542BCDA2A4757ADCBFE3871D90DB38EB9DA4D1DBE2438655187CAFE0EA92573081BF5B535262F3FF2BC47C7168170FE606FF4BEF01580577305F50B67A26EF8CBCFD40B7B8B709DA11D3",
    "80E2600F6324806067532D92CF5D1AC8FCDAE76FE9D27097E0718D6D950A5678FA30C0D198DC9C3E8098EE487CE88FC8D11E4B0FEC1113E11DA459EA375F3D2FBD52D07D48D415EF29AB40DC4EAD7E9A8F740CE431938B98AA3C13BE69C6FBFC968412C70F00F4F9",
    "80E2001067167064B818C652C60A16BF9A31E277E518D6E5BF06D0C5DB3D520C24D9523D1C9EFAE8711EFF6E848C83A4A59202B4B9041517CD226BF0746447568CC9353E0B1E340816DC46C015EB290BBDD18AB7AE15005CD928B2280CF71CD26C1CA15626A00C66D4F1F6A7",
    "80E2601163480860B635BA1F7D57628A1AA490A45879A9B20FDA7F006CC7378D66F629792C578701DA600F6E995A9331C36E0AE11E98E4D1D6B25D01B1F7D466FC9E6B6EB90F66986447BC5F5B70CB06F3FCE0B55EF5FBE1AA3C13BE69C6FBFC968412C70F00F4F9",
    "80E2001267426964A0283184B0F5E32463DE1B969C2FD50A2922A4042545CC31B985FF2907F82D61C7FF11B825B2A9A137CF4058BDB1B260F6FA5AA1027A80034A47DC2672604D68D7FB64F166FD8A0E04942E415C5F41AB574176E16818FF5E52E2CCDF79E9B3A89A1AA4F4",
    "80E2E013636162601A195BBDD2B65176F7BDE257E8F0A182149DE75FD7FE9CBA1B28FCD877AC5954967C6EC4738E38DEFC0F0EA49AEFAB30ABF7A27B139F9EAE1EC40E03FF6A53F940E1E2EAE5DF38D32E60EEB756C7F9D2AA3C13BE69C6FBFC968412C70F00F4F9"
   ],
   "cmacFlag": true,
   "encryptionFlag": true,
   "icv": "00741B3B745C65CBC15BD0700F8ECC2B",
   "nameId": "secureAPDU",
   "scpVersion": "SCP03",
   "securityLevel": "01",
   "sessionKeys": {
    "cmackeyData": "EDACB1B4CB67924E1D83D383E3A25D1F",
    "dekdata": "58B3A4DD9CF3E2AE6B4DDF29931E9F6C",
    "enckeyData": "45A79A894060D0DA72C0897D25249FC2",
    "kek": {
     "iv": "",
     "kek": {
      "keyId": "1f27882afffc3ddc15233e46c7414196303527f2",
      "keyType": "AES",
      "type": "AESKeyId"
     },
     "mode": "ECB",
     "paddingMode": "CONDITIONAL"
    },
    "keyType": "AES",
    "rmackeyData": ""
   }
  },
  "SecSesCASDRes": {
   "type": "object",
   "allOf": [
    {
     "$ref": "#/components/schemas/SecSesSTDRes"
    }
   ],
   "properties": {
    "masterKeys": {
     "$ref": "#/components/schemas/MasterKeys"
    },
    "template": {
     "type": "string"
    }
   },
   "example": {
    "cardCryptogram": "9599C7656B66A784",
    "eaAPDU": "84820100100DEC5DB4B273E9F927CAF28EC3DEC2F1",
    "hostChallenge": "1122334455667788",
    "icv": "27CAF28EC3DEC2F135FE90CC36F58585",
    "masterKeys": {
     "cmackeyData": "AE2DB982F88ECDB78EE8F931C0F3E42A",
     "dekdata": "B1B5AF4C8FAE9FCEB1B38F863119ED68",
     "enckeyData": "EBA373A2744DE85A9911686B074EB4EE",
     "kek": {
      "iv": "",
      "kek": {
       "keyId": "1f27882afffc3ddc15233e46c7414196303527f2",
       "keyType": "AES"
      },
      "mode": "ECB",
      "paddingMode": "CONDITIONAL"
     },
     "keyType": "AES",
     "mode": 2,
     "receiptKeyData": "9A646554AA291FA6282A6267D3B9F918"
    },
    "requestId": "1412196021402-1798-20795",
    "sessionKeys": {
     "cmackeyData": "0A51CB7E5AD02CD758426F236F587CBA",
     "dekdata": "B1B5AF4C8FAE9FCEB1B38F863119ED68",
     "enckeyData": "72E7595545759BE0A0C55075E90D23C5",
     "kek": {
      "iv": "",
      "kek": {
       "keyId": "1f27882afffc3ddc15233e46c7414196303527f2",
       "keyType": "AES"
      },
      "mode": "ECB",
      "paddingMode": "CONDITIONAL"
     },
     "keyType": "AES",
     "rmackeyData": "5F5D188AC40006ADDBE8370FC7E94F10",
     "wrappedDEK": null
    },
    "template": "9002A9029501108001888101108301319103000000450411223344"
   }
  },
  "SecSesSTDReq": {
   "type": "object",
   "required": [
    "domainMasterKeys",
    "nameId",
    "scpVersion",
    "secureSessionParams"
   ],
   "properties": {
    "domainMasterKeys": {
     "$ref": "#/components/schemas/DomainMasterKeys"
    },
    "nameId": {
     "type": "string",
     "description": "String with session ID name"
    },
    "scpVersion": {
     "type": "string",
     "description": "String version of SCP"
    },
    "secureSessionParams": {
     "$ref": "#/components/schemas/SecureSessionParams"
    }
   },
   "example": {
    "domainMasterKeys": {
     "cmackeyData": "3bc90286f2d9287d9adc716bb6d10685",
     "dekdata": "48095b9e86ee03113ec388627f7b03a7",
     "enckeyData": "2feb236e621aace94d027c9a954618c7",
     "kek": {
      "iv": "",
      "kek": {
       "keyId": "8c7319d0ef004bed043e2fb5b5f96499de36b3a3",
       "objectType": "AESKeyId"
      },
      "mode": "ECB",
      "paddingMode": "CONDITIONAL"
     },
     "keyType": "AES",
     "objectType": "GPStaticKeys",
     "receiptKeyData": ""
    },
    "nameId": "SCP03establishSession",
    "scpVersion": "SCP03",
    "secureSessionParams": {
     "aid": "A000000151000000",
     "apduHeader": "84821100",
     "cardChallenge": "",
     "cardCryptogram": "",
     "generateHostChallenge": false,
     "hostChallenge": "1122334455667788",
     "kek": {
      "iv": "",
      "kek": {
       "keyId": "8c7319d0ef004bed043e2fb5b5f96499de36b3a3",
       "objectType": "AESKeyId"
      },
      "mode": "ECB",
      "paddingMode": "CONDITIONAL"
     },
     "securityLevel": 3,
     "sequenceCounter": "00"
    }
   }
  },
  "SecSesSTDRes": {
   "type": "object",
   "properties": {
    "cardCryptogram": {
     "type": "string"
    },
    "eaAPDU": {
     "type": "string"
    },
    "hostChallenge": {
     "type": "string"
    },
    "icv": {
     "type": "string"
    },
    "requestId": {
     "type": "string",
     "description": "Request ID which can be used to track the status of the request."
    },
    "sessionKeys": {
     "$ref": "#/components/schemas/SessionKeys"
    }
   },
   "example": {
    "cardCryptogram": "584CEBA3F718E226",
    "eaAPDU": "84820300104D5CF1B29263899111843667B8C8ED6E",
    "hostChallenge": "1122334455667788",
    "icv": "11843667B8C8ED6EAC40A8C33CD122D6",
    "requestId": "1418659162408:cas0stl1:37952:i3kppbil:10435",
    "sessionKeys": {
     "cmackeyData": "38D52B672923EB48A931206D5BD6AA18",
     "dekdata": "48095B9E86EE03113EC388627F7B03A7",
     "enckeyData": "C8DCA3F151BCCF1CD5D313A3D598B44D",
     "kek": {
      "iv": "",
      "kek": {
       "keyId": "8c7319d0ef004bed043e2fb5b5f96499de36b3a3",
       "keyType": "AES"
      },
      "mode": "ECB",
      "paddingMode": "CONDITIONAL"
     },
     "keyType": "AES",
     "rmackeyData": "41397C441128689D41F1435AEEDED41D",
     "wrappedDEK": null
    }
   }
  },
  "PreparePersoComReq": {
   "type": "object",
   "required": [
    "apduHeader",
    "decryptionKey",
    "dgi",
    "incrementSplitApdus",
    "maxCommandLength",
    "nameId",
    "scpVersion",
    "securityLevel",
    "sessionKey"
   ],
   "properties": {
    "apduHeader": {
     "type": "string"
    },
    "decryptionKey": {
     "$ref": "#/components/schemas/DecKey"
    },
    "dgi": {
     "type": "array",
     "items": {
      "$ref": "#/components/schemas/DGI"
     }
    },
    "incrementSplitApdus": {
     "type": "boolean"
    },
    "maxCommandLength": {
     "type": "integer"
    },
    "nameId": {
     "type": "string"
    },
    "scpVersion": {
     "type": "string"
    },
    "securityLevel": {
     "type": "integer"
    },
    "sessionKey": {
     "type": "object",
     "allOf": [
      {
       "$ref": "#/components/schemas/SPSecretKey"
      }
     ]
    }
   },
   "example": {
    "apduHeader": null,
    "decryptionKey": {
     "iv": "",
     "kek": {
      "keyId": "cd77168ceef6aaadeb4d56afb035d596c5100186",
      "objectType": "TripleDESKeyId"
     },
     "mode": "ECB",
     "paddingMode": "CONDITIONAL"
    },
    "dgi": [
     {
      "dgi": "7760",
      "dgiData": "6BD0C31A51EB31F38133253DA056A5EB83147A304B1B967F64B1DF73AADDE94D11855C06B4781904F89BEE6ADB82BAF642F912BE8AFB6FED2E91FA7781604116275EC645E391473B7873F41353DCF21C",
      "dgiDataPaddedMode": "EIGHTY_AND_ZEROS",
      "encryptedDGI": true,
      "outputType": "ECB_ALWAYS_PAD"
     },
     {
      "dgi": "2159",
      "dgiData": "7081879F6C0200019F62060000000700009F630600000078F0009F640104563442353438303938313530303130303030325E202F5E313431323230313130303030303030303030303030303030303030303030309F650200E09F66020F1E9F6701049F6B135480981500100002D14122011000000000000F9F690F9F6A049F7E019F02065F2A029F1A02",
      "dgiDataPaddedMode": "CONDITIONAL",
      "encryptedDGI": false,
      "outputType": "UNENCRYPTED"
     },
     {
      "dgi": "3232",
      "dgiData": "6BD0C31A51EB31F38133253DA056A5EB83147A304B1B967F64B1DF73AADDE94D11855C06B4781904F89BEE6ADB82BAF642F912BE8AFB6FED2E91FA7781604116275EC645E391473B7873F41353DCF21C",
      "dgiDataPaddedMode": "EIGHTY_AND_ZEROS",
      "encryptedDGI": true,
      "outputType": "ECB_ALWAYS_PAD"
     },
     {
      "dgi": "7419",
      "dgiData": "7081879F6C0200019F62060000000700009F630600000078F0009F640104563442353438303938313530303130303030325E202F5E313431323230313130303030303030303030303030303030303030303030309F650200E09F66020F1E9F6701049F6B135480981500100002D14122011000000000000F9F690F9F6A049F7E019F02065F2A029F1A02",
      "dgiDataPaddedMode": "CONDITIONAL",
      "encryptedDGI": false,
      "outputType": "UNENCRYPTED"
     },
     {
      "dgi": "5323",
      "dgiData": "6BD0C31A51EB31F38133253DA056A5EB83147A304B1B967F64B1DF73AADDE94D11855C06B4781904F89BEE6ADB82BAF642F912BE8AFB6FED2E91FA7781604116275EC645E391473B7873F41353DCF21C",
      "dgiDataPaddedMode": "EIGHTY_AND_ZEROS",
      "encryptedDGI": true,
      "outputType": "ECB_ALWAYS_PAD"
     },
     {
      "dgi": "2297",
      "dgiData": "7081879F6C0200019F62060000000700009F630600000078F0009F640104563442353438303938313530303130303030325E202F5E313431323230313130303030303030303030303030303030303030303030309F650200E09F66020F1E9F6701049F6B135480981500100002D14122011000000000000F9F690F9F6A049F7E019F02065F2A029F1A02",
      "dgiDataPaddedMode": "CONDITIONAL",
      "encryptedDGI": false,
      "outputType": "UNENCRYPTED"
     }
    ],
    "incrementSplitApdus": true,
    "maxCommandLength": 254,
    "nameId": "Bug20",
    "scpVersion": "SCP02",
    "securityLevel": 1,
    "sessionKey": {
     "keyId": "cd77168ceef6aaadeb4d56afb035d596c5100186",
     "objectType": "TripleDESKeyId"
    }
   }
  },
  "PreparePersoComRes": {
   "type": "object",
   "properties": {
    "apdus": {
     "type": "array",
     "items": {
      "type": "string"
     }
    },
    "requestId": {
     "type": "string",
     "description": "Request ID which can be used to track the status of the request."
    }
   },
   "example": {
    "apdus": [
     "80E260004B7760486BD0C31A51EB31F38133253DA056A5EB83147A304B1B967F64B1DF73AADDE94D11855C06B4781904F89BEE6ADB82BAF642F912BE8AFB6FED2E91FA7781604116275EC645E391473B",
     "80E200018D21598A7081879F6C0200019F62060000000700009F630600000078F0009F640104563442353438303938313530303130303030325E202F5E313431323230313130303030303030303030303030303030303030303030309F650200E09F66020F1E9F6701049F6B135480981500100002D14122011000000000000F9F690F9F6A049F7E019F02065F2A029F1A02",
     "80E260024B3232486BD0C31A51EB31F38133253DA056A5EB83147A304B1B967F64B1DF73AADDE94D11855C06B4781904F89BEE6ADB82BAF642F912BE8AFB6FED2E91FA7781604116275EC645E391473B",
     "80E200038D74198A7081879F6C0200019F62060000000700009F630600000078F0009F640104563442353438303938313530303130303030325E202F5E313431323230313130303030303030303030303030303030303030303030309F650200E09F66020F1E9F6701049F6B135480981500100002D14122011000000000000F9F690F9F6A049F7E019F02065F2A029F1A02",
     "80E260044B5323486BD0C31A51EB31F38133253DA056A5EB83147A304B1B967F64B1DF73AADDE94D11855C06B4781904F89BEE6ADB82BAF642F912BE8AFB6FED2E91FA7781604116275EC645E391473B",
     "80E200058D22978A7081879F6C0200019F62060000000700009F630600000078F0009F640104563442353438303938313530303130303030325E202F5E313431323230313130303030303030303030303030303030303030303030309F650200E09F66020F1E9F6701049F6B135480981500100002D14122011000000000000F9F690F9F6A049F7E019F02065F2A029F1A02",
     "80E260064B1242486BD0C31A51EB31F38133253DA056A5EB83147A304B1B967F64B1DF73AADDE94D11855C06B4781904F89BEE6ADB82BAF642F912BE8AFB6FED2E91FA7781604116275EC645E391473B",
     "80E200078D76678A7081879F6C0200019F62060000000700009F630600000078F0009F640104563442353438303938313530303130303030325E202F5E313431323230313130303030303030303030303030303030303030303030309F650200E09F66020F1E9F6701049F6B135480981500100002D14122011000000000000F9F690F9F6A049F7E019F02065F2A029F1A02",
     "80E260084B2802486BD0C31A51EB31F38133253DA056A5EB83147A304B1B967F64B1DF73AADDE94D11855C06B4781904F89BEE6ADB82BAF642F912BE8AFB6FED2E91FA7781604116275EC645E391473B",
     "80E200098D79388A7081879F6C0200019F62060000000700009F630600000078F0009F640104563442353438303938313530303130303030325E202F5E313431323230313130303030303030303030303030303030303030303030309F650200E09F66020F1E9F6701049F6B135480981500100002D14122011000000000000F9F690F9F6A049F7E019F02065F2A029F1A02",
     "80E2600A4B8363486BD0C31A51EB31F38133253DA056A5EB83147A304B1B967F64B1DF73AADDE94D11855C06B4781904F89BEE6ADB82BAF642F912BE8AFB6FED2E91FA7781604116275EC645E391473B",
     "80E2000B8D50728A7081879F6C0200019F62060000000700009F630600000078F0009F640104563442353438303938313530303130303030325E202F5E313431323230313130303030303030303030303030303030303030303030309F650200E09F66020F1E9F6701049F6B135480981500100002D14122011000000000000F9F690F9F6A049F7E019F02065F2A029F1A02",
     "80E2600C4B4569486BD0C31A51EB31F38133253DA056A5EB83147A304B1B967F64B1DF73AADDE94D11855C06B4781904F89BEE6ADB82BAF642F912BE8AFB6FED2E91FA7781604116275EC645E391473B",
     "80E2000D8D52638A7081879F6C0200019F62060000000700009F630600000078F0009F640104563442353438303938313530303130303030325E202F5E313431323230313130303030303030303030303030303030303030303030309F650200E09F66020F1E9F6701049F6B135480981500100002D14122011000000000000F9F690F9F6A049F7E019F02065F2A029F1A02",
     "80E2600E4B2480486BD0C31A51EB31F38133253DA056A5EB83147A304B1B967F64B1DF73AADDE94D11855C06B4781904F89BEE6ADB82BAF642F912BE8AFB6FED2E91FA7781604116275EC645E391473B",
     "80E2000F8D37188A7081879F6C0200019F62060000000700009F630600000078F0009F640104563442353438303938313530303130303030325E202F5E313431323230313130303030303030303030303030303030303030303030309F650200E09F66020F1E9F6701049F6B135480981500100002D14122011000000000000F9F690F9F6A049F7E019F02065F2A029F1A02",
     "80E260104B4808486BD0C31A51EB31F38133253DA056A5EB83147A304B1B967F64B1DF73AADDE94D11855C06B4781904F89BEE6ADB82BAF642F912BE8AFB6FED2E91FA7781604116275EC645E391473B",
     "80E200118D16708A7081879F6C0200019F62060000000700009F630600000078F0009F640104563442353438303938313530303130303030325E202F5E313431323230313130303030303030303030303030303030303030303030309F650200E09F66020F1E9F6701049F6B135480981500100002D14122011000000000000F9F690F9F6A049F7E019F02065F2A029F1A02",
     "80E260124B6162486BD0C31A51EB31F38133253DA056A5EB83147A304B1B967F64B1DF73AADDE94D11855C06B4781904F89BEE6ADB82BAF642F912BE8AFB6FED2E91FA7781604116275EC645E391473B",
     "80E280138D42698A7081879F6C0200019F62060000000700009F630600000078F0009F640104563442353438303938313530303130303030325E202F5E313431323230313130303030303030303030303030303030303030303030309F650200E09F66020F1E9F6701049F6B135480981500100002D14122011000000000000F9F690F9F6A049F7E019F02065F2A029F1A02"
    ],
    "requestId": "1418659162408:cas0stl1:37952:i3kppbil:10435"
   }
  },
  "SecureScrReq": {
   "type": "object",
   "required": [
    "apdu",
    "cmacFlag",
    "encryptionFlag",
    "icv",
    "nameId",
    "scpVersion",
    "securityLevel",
    "sessionKeys"
   ],
   "properties": {
    "apdu": {
     "type": "array",
     "items": {
      "type": "string"
     }
    },
    "type": "boolean"
   },
   "encryptionFlag": {
    "type": "boolean"
   },
   "icv": {
    "type": "string"
   },
   "nameId": {
    "type": "string"
   },
   "scpVersion": {
    "type": "string"
   },
   "securityLevel": {
    "type": "string"
   },
   "sessionKeys": {
    "$ref": "#/components/schemas/SessionKeys"
   }
  }
 },
 "SecureScrRes": {
  "type": "object",
  "properties": {
   "apdus": {
    "type": "array",
    "items": {
     "type": "string"
    }
   },
   "requestId": {
    "type": "string",
    "description": "Request ID which can be used to track the status of the request."
   },
   "icv": {
    "type": "string"
   }
  },
  "example": {
   "apdus": [
    "84E200006F215964CABE32DA91E9D42F8633B5008E7635C07660DA266D0D563C6717F1F2DB1BA9CE1AF783413C2E67659186FE139229DF963A2C1E9114082B0BE60BBC5AE62681F134FF73E2F726A64049BC66EFBCD73EBF0AAD82819FBAABD3A2C7FE548E10328E54BB4782D5FF75E65F98F5F8",
    "84E260016B7760602D80F17457C66F9D048131CFB26957C3553D79EB691494F251E462396B7BD93AAFF0ECF8B0C9008EFA6C3C324A61292D4D7062533F00F83683D12D542DD0D68E8D862E7EE6E6D39344C074C58167B4B9AA3C13BE69C6FBFC968412C70F00F4F93461BB7C3E8B9BC2",
    "84E200026F741964A23A71F15120686795F20A8093AD7AEFCD25B0CA769E1F7D8E5296F9ACF2434D45B77204C2DA42541B19DFFC4EFD2D3165A49CBDF2E85DF8D9188DFEAC136EE30BFDC0455F8AEF73058656234E9FC0E6D7C4765386D70B8887ED8595F452316ED4CB6DB0AE867B001D94A865",
    "84E260036B323260D503C942FB936D486B885EBC18DDEFE1566C8BA4C35E9C070E9C3114F642481A45084BE899AD250983F06FBC0AE6A79B1A6B2B334C626976D83C4EFA376E12E503446C8F664FAD144667B2E1C6E95554AA3C13BE69C6FBFC968412C70F00F4F9B1FDA9B38C539C2E",
    "84E200046F22976448D018247B79D2004BBDB3FBCCF11B9278DA9863C490CB2CB2DCD8D5206B797472A785F97D96B4C59C4503E31C3C5F84DAA247A59D6F49ED9EBF66CDD7AECCFE43BE5502F7420CFAE39249012D62DCFCC37A71C811BF9485B2AF83B5FF1EEAFA1A643DCD71F71653A7D16B91",
    "84E260056B532360D48BDDDC190A18D6E24A5A4265DC687A8C9BF35505AF83E8271B069A64C310E80A462210459A352E4E71272F2BBAB605B45C20EE27796A8FD2AC8D93989FA5D4F2E5F83D91376131407EE8E1DB6E4E24AA3C13BE69C6FBFC968412C70F00F4F9DF2E16382CA7BEBB",
    "84E200066F76676455FB35B4E964BFF563C4617E2E43EFE509CEABBF1B610FF8A9B99B10716416794EBDDE717A62812D1E2B51881FE096829731957F8888FF8D63C51906155987035C34728F971412FB04BDEA205B073763F4B1B06222FBD6640D1EED27D8BAA7EC2E4B7EF1438A6F2E24CEA57F",
    "84E260076B124260FF2793193C316098DF07470940DA018479F36F4F526EFD2D60614F2AB8D5FDA328314425AE3FD051C76D83A564B573B10A867AE40AFF0A90FE01C833834BE31F4EE20F6380A08AE0F2DD2B46CDE6A5EEAA3C13BE69C6FBFC968412C70F00F4F9229BDD3EDF4536D6",
    "84E200086F793864481DC08423860DE73FFADE9E24E74FF299F0FF967A0F3C975E061669B7EE15D15F958E02336FF9D3FCD887134E6821DDB58EBB432A011E373CFC5AAFDB68F3C75EA984BDFB0EE827BF962321C9B3F087BAE6140CEE50D15484510A5E08091524EB570C97ECAA4B429786DB2A",
    "84E260096B280260ED0035F29FDD0AF9DE6EB85064DF215A5663781703419FAA7A126C60701165CDD576A5530C8DBA5A5E8A88313D2D515E138A2589D79FD60051DEDD9790277DF0E4BBB58E1A7C2D8A6C507661A361CBB3AA3C13BE69C6FBFC968412C70F00F4F9E39C1CB6B3835F40",
    "84E2000A6F5072642065033F50CA5650B9791600573444BFBB2C2FE5E0F5AF9B1B8441442C2B259E3600153C37A1050E8AB0E8CC3324A40678B63F25004B493600509D21FD6D24DC0DCC3270C52BB8B15C78E93DE1B878E4E308644DF6CE9B01FEC9266A4D4136D8EF4269AD7076FE8D2FF46A82",
    "84E2600B6B8363601C5D3A9EFFF6C47C5BC3C2DC4218ADCB88A447654E47F12CECC00BBE5B632005B8DAAB57122D8D60143D1117A82FC8DF2DBB6E35C86040ADFA159E95B7E1BEE549025EFAA2502170CACECCE0880F1DFEAA3C13BE69C6FBFC968412C70F00F4F9C1634E9C9235DE5F",
    "84E2000C6F526364F299985E9DA60F435DAB78D0E724AEF6C176419E9461598085C93F867686CC217984763D62DC3B682486C8A7AC3CDD19B51A43D5450188F8D6C5908B7ED5562E46FF357F307AD884CAE5F8119227D853F2B471F20340D6BD5F7C351D34B510698D8B0F2A46FC46167FBA9675",
    "84E2600D6B456960FE45833E4D094CB0A30715F5577DA1A7F1236DC401AE24B020DD3D2A3FF6A6EE9D263977BA0D6CFFDF021B77227A8C6E30FC3117E9152CFE97AF80CC557D10A1464EE161CACC29B98B91E5586F6A06D9AA3C13BE69C6FBFC968412C70F00F4F9968127AE6EE6D3D9",
    "84E2000E6F3718641FC43B9AF6513571743DCBD88FCDC0C22E1F6A76E8F38D614CA6542BCDA2A4757ADCBFE3871D90DB38EB9DA4D1DBE2438655187CAFE0EA92573081BF5B535262F3FF2BC47C7168170FE606FF4BEF01580577305F50B67A26EF8CBCFD40B7B8B709DA11D3D0903A58231DC379",
    "84E2600F6B24806067532D92CF5D1AC8FCDAE76FE9D27097E0718D6D950A5678FA30C0D198DC9C3E8098EE487CE88FC8D11E4B0FEC1113E11DA459EA375F3D2FBD52D07D48D415EF29AB40DC4EAD7E9A8F740CE431938B98AA3C13BE69C6FBFC968412C70F00F4F997D3DC5B537858A0",
    "84E200106F167064B818C652C60A16BF9A31E277E518D6E5BF06D0C5DB3D520C24D9523D1C9EFAE8711EFF6E848C83A4A59202B4B9041517CD226BF0746447568CC9353E0B1E340816DC46C015EB290BBDD18AB7AE15005CD928B2280CF71CD26C1CA15626A00C66D4F1F6A74B2298D264253725",
    "84E260116B480860B635BA1F7D57628A1AA490A45879A9B20FDA7F006CC7378D66F629792C578701DA600F6E995A9331C36E0AE11E98E4D1D6B25D01B1F7D466FC9E6B6EB90F66986447BC5F5B70CB06F3FCE0B55EF5FBE1AA3C13BE69C6FBFC968412C70F00F4F9897E4E73ED188313",
    "84E200126F426964A0283184B0F5E32463DE1B969C2FD50A2922A4042545CC31B985FF2907F82D61C7FF11B825B2A9A137CF4058BDB1B260F6FA5AA1027A80034A47DC2672604D68D7FB64F166FD8A0E04942E415C5F41AB574176E16818FF5E52E2CCDF79E9B3A89A1AA4F435079824B8CE6C33",
    "84E2E0136B6162601A195BBDD2B65176F7BDE257E8F0A182149DE75FD7FE9CBA1B28FCD877AC5954967C6EC4738E38DEFC0F0EA49AEFAB30ABF7A27B139F9EAE1EC40E03FF6A53F940E1E2EAE5DF38D32E60EEB756C7F9D2AA3C13BE69C6FBFC968412C70F00F4F9B5E7872586964D6A"
   ],
   "icv": "B5E7872586964D6A58D65F97E248EAE7",
   "requestId": "1418659162408:cas0stl1:37952:i3kppbil:10435"
  }
 },
 "PutKeySTDReq": {
  "type": "object",
  "required": [
   "apduHeader",
   "kcvLength",
   "kek",
   "keyVersionNumber",
   "keys",
   "nameId"
  ],
  "properties": {
   "apduHeader": {
    "type": "string"
   },
   "kcvLength": {
    "type": "integer"
   },
   "kek": {
    "$ref": "#/components/schemas/KekObj"
   },
   "keyVersionNumber": {
    "type": "string"
   },
   "keys": {
    "$ref": "#/components/schemas/KeyList"
   },
   "nameId": {
    "type": "string"
   }
  },
  "example": {
   "apduHeader": "80D83181",
   "kcvLength": 3,
   "kek": {
    "iv": "",
    "kek": {
     "iv": "",
     "mode": "ECB",
     "objectType": "AESKeyWrapped",
     "paddingMode": "CONDITIONAL",
     "wrappedKey": "2137807E50CDEAADFB135D2DC99C42DA",
     "wrappingKeyId": "1f27882afffc3ddc15233e46c7414196303527f2"
    },
    "mode": "ECB",
    "paddingMode": "CONDITIONAL"
   },
   "keyVersionNumber": "31",
   "keys": [
    {
     "iv": "",
     "mode": "ECB",
     "objectType": "AESKeyWrapped",
     "paddingMode": "CONDITIONAL",
     "wrappedKey": "80D2A5B08FA0EE51143B459E638106DF",
     "wrappingKeyId": "1f27882afffc3ddc15233e46c7414196303527f2"
    },
    {
     "iv": "",
     "mode": "ECB",
     "objectType": "AESKeyWrapped",
     "paddingMode": "CONDITIONAL",
     "wrappedKey": "80D2A5B08FA0EE51143B459E638106DF",
     "wrappingKeyId": "1f27882afffc3ddc15233e46c7414196303527f2"
    },
    {
     "iv": "",
     "mode": "ECB",
     "objectType": "AESKeyWrapped",
     "paddingMode": "CONDITIONAL",
     "wrappedKey": "80D2A5B08FA0EE51143B459E638106DF",
     "wrappingKeyId": "1f27882afffc3ddc15233e46c7414196303527f2"
    }
   ],
   "nameId": "PutKey"
  }
 },
 "PutKeySTDRes": {
  "type": "object",
  "properties": {
   "apdus": {
    "type": "array",
    "items": {
     "type": "string"
    }
   },
   "requestId": {
    "type": "string",
    "description": "Request ID which can be used to track the status of the request."
   }
  },
  "example": {
   "apdus": [
    "80D83181463188111008734E2F7F8BF3F2B6CA41F9871F7E6F03504A7788111008734E2F7F8BF3F2B6CA41F9871F7E6F03504A7788111008734E2F7F8BF3F2B6CA41F9871F7E6F03504A7700"
   ],
   "requestId": "1418659162408:cas0stl1:37952:i3kppbil:10435"
  }
 },
 "PutKeyCASDReq": {
  "type": "object",
  "required": [
   "apduHeader",
   "caPublicKey",
   "casdPkCert",
   "doAApadding",
   "incrementSplitApdus",
   "keys"
  ],
  "properties": {
   "apduHeader": {
    "type": "string"
   },
   "caPublicKey": {
    "$ref": "#/components/schemas/CAPublicKeyCASD"
   },
   "casdPkCert": {
    "type": "string"
   },
   "doAApadding": {
    "type": "boolean"
   },
   "incrementSplitApdus": {
    "type": "boolean"
   },
   "keys": {
    "$ref": "#/components/schemas/KeyList"
   }
  },
  "example": {
   "apduHeader": null,
   "caPublicKey": {
    "exponent": "010001",
    "modulus": "9BA796DDF3288138CF05D24A2D32D45BC0D42611E3E03D82B3696746EFFC7C1CF626C31A255F4345E7A8410C9B8E6498BFBC9424B816B9740CA9913057637F88D8A828E58203BCA86AB29F9CCFF16A264D213987A2C21B78B444B2ABF8AECCCD45A95E092D01EC4DF4D501ED2494FB306EB0D9DC43E2BA1DE4DC04E11D512DA112406B53A4351AE1B4E1C174138C4522DEAF00DD1F3EA28DD5ABE99B4620C68D8C92DF4B6856D5DB41976EDA919426B7D4A43576BBF2BCB1D0EAFC4D0D38AE2EF754DC49E9CF6559B83FFF3B2480AFB35E39F7FF8375439085881BA27120F88D8140F150EB39E306B53265E50F6582C4CBA73D27A4C73856D6372089A25DA909",
    "type": "RSAPublicKey"
   },
   "casdPkCert": "7F21820156930A89330120031000000190420A6364160020000000016F5F200A6364160020000000016F9501885F2504201209045F240420220904450A89330120031000000190530A475000008231210233225F37820100995F1312A79DC693EF4BD9D58A2E967D907C83D9CFB8AB5574CC842FE6D0F0FDE1ABD187EF106A47CC0E3B91C8CE8DF9DB8D140F2E569A32132895D520C824F07371C16A014FF251F627271896CF7AEA1F082B338FF133070AA4E80BB9DD98805F895C8C6CA40ADFC145CB2A0BCC4A8F29E68BB363A3AC212C3B647FD18B002787A6115C09E86FADE1D5A7C37B5779A0F92C63863B118025E51BA3741B0CBEF116C1643C2C5B4AE3A98164C925091CD088DC65154BFBCBD3BCAB9E51FB01D72B5822C9EF163B06A7BA0EF5AC52DCEAE8DAA4FC2F0E385D9D036F26C65CA79B97DB4793DDE071A9EE12CD3EE54027C7908D3C20BC104006BE22DAD6938E463BA85F3800",
   "doAApadding": true,
   "incrementSplitApdus": false,
   "keys": [
    {
     "iv": "",
     "keyType": "TRIPLE_DES",
     "mode": "ECB",
     "paddingMode": "CONDITIONAL",
     "type": "TripleDESKeyWrapped",
     "wrappedKey": "46e8d6ab96f34592fa17189acc015335",
     "wrappingKeyId": "27e948766ba0149c757dfa13b80bd7bb0111ea25"
    },
    {
     "iv": "",
     "keyType": "TRIPLE_DES",
     "mode": "ECB",
     "paddingMode": "CONDITIONAL",
     "type": "TripleDESKeyWrapped",
     "wrappedKey": "08c32c1f3ee45ecce933df614f32451c",
     "wrappingKeyId": "27e948766ba0149c757dfa13b80bd7bb0111ea25"
    },
    {
     "iv": "",
     "keyType": "TRIPLE_DES",
     "mode": "ECB",
     "paddingMode": "CONDITIONAL",
     "type": "TripleDESKeyWrapped",
     "wrappedKey": "26e83fd0d4a55326b508001dcd248b8a",
     "wrappingKeyId": "27e948766ba0149c757dfa13b80bd7bb0111ea25"
    }
   ],
   "maxCommandLength": 255,
   "scpVersion": "SCP02",
   "securityLevel": 1,
   "template": "830122"
  }
 },
 "VerrifyWithCertReq": {
  "type": "object",
  "required": [
   "publicKeyId",
   "signature",
   "certificate",
   "message",
   "hash"
  ],
  "properties": {
   "publicKeyId": {
    "type": "string"
   },
   "signature": {
    "type": "string"
   },
   "certificate": {
    "type": "string"
   },
   "message": {
    "type": "string"
   },
   "hash": {
    "type": "string"
   }
  },
  "example": {
   "publicKeyId": "e2555f3d8a7a48a6ec31254d7249a46b46fa9431",
   "signature": "809DCA8E49FB6A18554FC3A71D18174E1419CA77F1713DF0816EE5C79E18CC7F174F433DFD31C84A65F65FB27FF8C80863A98FAA0650014903CDA9FD410042A99A82F08E854A6AB75A1E8257F3F2B64495728F1A011E8A04CC802FEB0DDC82D7931822C9408606F1EB91BE02BB9F24FBA02F98BC569F021D7752C5D437BF604EDD5AD3D8C1F04EB8E93D5E86AFF7CD2D2A9B7ADCBDFD128430E03EA9BA183429E2645572CB6C5400A3BBB6196F8B6665191C0F03BE0007375E0F122BFAC317D0AFEBD27904215221BA298001331000557591667909DDFAC789455C2EBE0007375E0F122BFAC317D0AFEBD279",
   "certificate": "931004215221BA29800133100055759166794207999900019000025F2001009501825F240421140119450100530809DDFAC789455C2E5F37818084B1A863A163E2262816EB401722DE7E7D160FB6A45BC6382041F7F2B3285D7B2ECA5BA2AD8DCBDB505B613F18374B21519E62C294188195E81FE6EB494C5363298A0BC41A30D26707916990A3EFF8E3F29D59585D51CA9CE353C2245AB88BEACFEF5B93EA8C8BE58A9ADABDDED6E2CABECCB8D9B18D9FF1666E99D4411F62A15F382057805E0E75572FBA22812365BABA18D45160E3643F37951CE854735256B910EF",
   "message": "F65F403E18C1E173728A98713399CD6CD10A133DD0D5CFE6FCA0171752E8A884322A3036616DB378F052363013BEB7839D7464060B1CD771E02EA35BADD6C3FA1A016FC1F8C57143CA9024AD329BF94FCAE6FE2EF655150A772D99C482623B0F4186D0C7B3AA71762E9DD3D8C1F04EB8E93D5E86AFF7CD2D2A9B7ADCBDFD128430E03EA9BA183429E2645572CB6C5400A3BBB6196F8B6665191C0F03",
   "hash": "NONE"
  }
 },
 "VerrifyWithCertRes": {
  "type": "object",
  "properties": {
   "requestId": {
    "type": "string",
    "description": "Request ID which can be used to track the status of the request."
   },
   "verified": {
    "type": "boolean",
    "description": "Boolean indicated whether the verification was successful."
   }
  },
  "example": {
   "verified": false,
   "requestId": "1522777074367:cas0stl2:8498:jfd00sa8:23010"
  }
 },
 "CAPublicKeyCASD": {
  "type": "object",
  "properties": {
   "exponent": {
    "type": "string"
   },
   "modulus": {
    "type": "string"
   },
   "type": {
    "type": "string"
   }
  }
 },
 "KeyList": {
  "type": "array",
  "items": {
   "$ref": "#/components/schemas/Key"
  }
 },
 "Key": {
  "type": "object",
  "properties": {
   "iv": {
    "type": "string"
   },
   "mode": {
    "type": "string"
   },
   "objectType": {
    "type": "string"
   },
   "paddingMode": {
    "type": "string"
   },
   "wrappedKey": {
    "type": "string"
   },
   "wrappingKeyId": {
    "type": "string"
   }
  }
 },
 "DGI": {
  "type": "object",
  "properties": {
   "dgi": {
    "type": "string"
   },
   "dgiType": {
    "type": "string"
   },
   "dgiDataPaddedMode": {
    "type": "string"
   },
   "encryptedDGI": {
    "type": "boolean"
   },
   "outputType": {
    "type": "string"
   }
  }
 },
 "DecKey": {
  "type": "object",
  "required": [
   "iv",
   "kek",
   "mode",
   "paddingMode"
  ],
  "properties": {
   "iv": {
    "type": "string"
   },
   "kek": {
    "$ref": "#/components/schemas/Kek"
   },
   "mode": {
    "type": "string"
   },
   "paddingMode": {
    "type": "string"
   }
  }
 },
 "SessionKeys": {
  "type": "object",
  "description": "Object containing the resultant session keys.",
  "properties": {
   "cmackeyData": {
    "type": "string"
   },
   "dekdata": {
    "type": "string"
   },
   "enckeyData": {
    "type": "string"
   },
   "kek": {
    "$ref": "#/components/schemas/KekObj"
   },
   "keyType": {
    "type": "string"
   },
   "rmackeyData": {
    "type": "string"
   },
   "wrappedDEK": {
    "type": "string"
   }
  }
 },
 "DomainMasterKeys": {
  "type": "object",
  "description": "Domain Master Keys object",
  "required": [
   "cmackeyData",
   "dekdata",
   "enckeyData",
   "kek",
   "keyType",
   "objectType",
   "receiptKeyData"
  ],
  "properties": {
   "cmackeyData": {
    "type": "string"
   },
   "dekdata": {
    "type": "string"
   },
   "enckeyData": {
    "type": "string"
   },
   "kek": {
    "$ref": "#/components/schemas/KekObj"
   },
   "keyType": {
    "type": "string"
   },
   "objectType": {
    "type": "string"
   },
   "receiptKeyData": {
    "type": "string"
   }
  }
 },
 "SecureSessionParams": {
  "type": "object",
  "description": "Secure Session params object.",
  "required": [
   "aid",
   "apduHeader",
   "cardChallenge",
   "cardCryptogram",
   "generateHostChallenge",
   "hostChallenge",
   "kek",
   "securityLevel",
   "sequenceCounter"
  ],
  "properties": {
   "aid": {
    "type": "string"
   },
   "apduHeader": {
    "type": "string"
   },
   "cardChallenge": {
    "type": "string"
   },
   "cardCryptogram": {
    "type": "string"
   },
   "generateHostChallenge": {
    "type": "boolean"
   },
   "hostChallenge": {
    "type": "string"
   },
   "kek": {
    "$ref": "#/components/schemas/KekObj"
   },
   "securityLevel": {
    "type": "integer"
   },
   "sequenceCounter": {
    "type": "string"
   }
  }
 },
 "KekObj": {
  "type": "object",
  "properties": {
   "iv": {
    "type": "string"
   },
   "kek": {
    "$ref": "#/components/schemas/Kek"
   },
   "mode": {
    "type": "string"
   },
   "paddingMode": {
    "type": "string"
   }
  }
 },
 "Kek": {
  "type": "object",
  "properties": {
   "kekType": {
    "type": "string",
    "description": "Type of kek i.e. (AESKeyId)"
   },
   "kekId": {
    "type": "string",
    "description": "The Id of the used kek."
   }
  }
 },
 "CAPublicKey": {
  "type": "object",
  "required": [
   "curveName",
   "objectType",
   "xcoordinate",
   "ycoordinate"
  ],
  "properties": {
   "curveName": {
    "type": "string"
   },
   "objectType": {
    "type": "string"
   },
   "xcoordinate": {
    "type": "string"
   },
   "ycoordinate": {
    "type": "string"
   }
  }
 },
 "SPSecretKey": {
  "type": "object",
  "required": [
   "keyId",
   "objectType"
  ],
  "properties": {
   "keyId": {
    "type": "string"
   },
   "objectType": {
    "type": "string"
   }
  }
 },
 "MasterKeys": {
  "type": "object",
  "allOf": [
   {
    "$ref": "#/components/schemas/DomainMasterKeys"
   }
  ]
 },
 "MDESDeleteKeySetReq": {
  "type": "object",
  "required": [
   "payload"
  ],
  "properties": {
   "payload": {
    "type": "string",
    "format": "byte",
    "description": "A byte-string containing the object representing KMS request payload to delete the key. Base64 encoded XML payload."
   }
  },
  "example": {
   "payload": "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PG5zMTpLZXlGaWxlT2ZmQm9hcmRpbmdSZXF1ZXN0IHhtbG5zOm5zMT0iaHR0cDovL3d3dy5tYXN0ZXJjYXJkLmNvbS9zZXJ2aWNlL21kZXMvb2JqZWN0cyI+CTxTZXJ2aWNlLz4JPE1vZGVsLz48VG9rZW5SYW5nZXM+PFRva2VuUmFuZ2U+PEtleUFsaWFzPjU1MzgyNTAwMDAwMDAyNzAwMDA8L0tleUFsaWFzPjxhY2NvdW50UmFuZ2VGcm9tPjU1MzgyNTAwMDAwMDAyNzAwMDA8L2FjY291bnRSYW5nZUZyb20+PGFjY291bnRSYW5nZVRvPjU1MzgyNTAwMDAwMDAyODAwMDA8L2FjY291bnRSYW5nZVRvPgk8L1Rva2VuUmFuZ2U+PC9Ub2tlblJhbmdlcz48L25zMTpLZXlGaWxlT2ZmQm9hcmRpbmdSZXF1ZXN0Pg=="
  }
 },
 "MDESGenerateKeySetReq": {
  "type": "object",
  "required": [
   "payload"
  ],
  "properties": {
   "payload": {
    "type": "string",
    "format": "byte",
    "description": "A byte-string containing the object representing KMS request payload."
   }
  },
  "example": {
   "payload": "PG5zMTpLZXlGaWxlUmVxdWVzdCB4bWxuczpuczE9J2h0dHA6Ly93d3cubWFzdGVyY2FyZC5jb20vc2VydmljZS9tZGVzL29iamVjdHMnIHhtbG5zOnhzZD0naHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEnIHhtbG5zOnNvYXBlbnY9J2h0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3NvYXAvZW52ZWxvcGUvJz48U2VydmljZT5NREVTPC9TZXJ2aWNlPjxNb2RlbD4wMTwvTW9kZWw+PFRva2VuUmFuZ2VzPjxUb2tlblJhbmdlPjxLZXlBbGlhcz41NTM4MjYwMDAwMDAwMDAwMDUyPC9LZXlBbGlhcz48YWNjb3VudFJhbmdlRnJvbT41NTM4MjUwMDAwMDAwMDAwMDUyPC9hY2NvdW50UmFuZ2VGcm9tPjxhY2NvdW50UmFuZ2VUbz41NTM4MjUwMDAwMDAwMDAwMDUzPC9hY2NvdW50UmFuZ2VUbz48L1Rva2VuUmFuZ2U+PC9Ub2tlblJhbmdlcz48SWNhPjM2NTA8L0ljYT48Q3VzdG9tZXJOYW1lPlBTQ1UgRmluYW5jaWFsIFNlcnZpY2VzLCBJbmMuPC9DdXN0b21lck5hbWU+PEZsb29yRXhwaXJ5RGF0ZT4wNjE0PC9GbG9vckV4cGlyeURhdGU+PEtleURlcml2YXRpb25JbmRleD4wMDE8L0tleURlcml2YXRpb25JbmRleD48RW12RGF0YT48QklOPjU1MTI5MjAwPC9CSU4+PElzc3VlcktleUV4cGlyeURhdGU+MTIzMTwvSXNzdWVyS2V5RXhwaXJ5RGF0ZT48UGF5bWVudFN5c3RlbUtleUluZGV4PkYxPC9QYXltZW50U3lzdGVtS2V5SW5kZXg+PElzc3VlcktleVNpemU+MTQwODwvSXNzdWVyS2V5U2l6ZT48SXNzdWVyS2V5QWxnb3JpdGhtSW5kaWNhdG9yPjAxPC9Jc3N1ZXJLZXlBbGdvcml0aG1JbmRpY2F0b3I+PC9FbXZEYXRhPjxJTUthY1h0cmFEYXRhPjxJbnZhbGlkQ3J5cHRvZ3JhbT4wMDU8L0ludmFsaWRDcnlwdG9ncmFtPjxOb3RWYWxpZGF0ZUNyeXB0b2dyYW0+MDA1PC9Ob3RWYWxpZGF0ZUNyeXB0b2dyYW0+PEludmFsaWRUdnJDdnI+MDA1PC9JbnZhbGlkVHZyQ3ZyPjxDcnlwdG9ncmFtTm90QXJxYz4wMDA8L0NyeXB0b2dyYW1Ob3RBcnFjPjxIZWlnaHQ+MDg8L0hlaWdodD48QnJhbmNoPjA0PC9CcmFuY2g+PERlcml2YXRpb25BbGdvcml0aG1JZD40PC9EZXJpdmF0aW9uQWxnb3JpdGhtSWQ+PENhcmRBcHBsaWNhdGlvbklkZW50aWZpZXI+NDwvQ2FyZEFwcGxpY2F0aW9uSWRlbnRpZmllcj48QXJxY0FycGNBbGdvcml0aG1JZD4xPC9BcnFjQXJwY0FsZ29yaXRobUlkPjxDdm5Qb3NpdGlvbkluZGljYXRvcj4xPC9Ddm5Qb3NpdGlvbkluZGljYXRvcj48QXJwY1Jlc3BJZlRyYW5zYWN0aW9uQWNjZXB0ZWQ+MDAxMDAwMDA8L0FycGNSZXNwSWZUcmFuc2FjdGlvbkFjY2VwdGVkPjxBcnBjUmVzcElmVHJhbnNhY3Rpb25SZWplY3RlZD4wMDAwMDAwMDwvQXJwY1Jlc3BJZlRyYW5zYWN0aW9uUmVqZWN0ZWQ+PFR2ckJpdG1hc2s+MDAwMDIwMDAwMDwvVHZyQml0bWFzaz48VHZyRXhwZWN0ZWQ+MDAwMDAwMDAwMDwvVHZyRXhwZWN0ZWQ+PEN2ckJpdG1hc2s+MDAwMDAwODkwMDA4PC9DdnJCaXRtYXNrPjxDdnJFeHBlY3RlZD4wMDAwMDAwMDAwMDA8L0N2ckV4cGVjdGVkPjxQb3NFbnRyeU1vZGU+MDc8L1Bvc0VudHJ5TW9kZT48L0lNS2FjWHRyYURhdGE+PElNS2N2YzNYdHJhRGF0YT48SW52YWxpZEN2YzM+MDA1PC9JbnZhbGlkQ3ZjMz48Tm90VmFsaWRhdGVDdmMzPjAwNTwvTm90VmFsaWRhdGVDdmMzPjxBbGxvd2VkQXRjUmFuZ2U+MDA1PC9BbGxvd2VkQXRjUmFuZ2U+PE51bWJlck1pc21hdGNoPjAwNTwvTnVtYmVyTWlzbWF0Y2g+PEFsZ29yaXRobUlkPjE8L0FsZ29yaXRobUlkPjxQQ1ZDM1RyYWNrMT4wMDAwMDAwMDA3MDAwMDwvUENWQzNUcmFjazE+PFBVTkFUQ1RyYWNrMT4wMDAwMDAwMDc4RjAwMDwvUFVOQVRDVHJhY2sxPjxOdW5UcmFjazE+MDQ8L051blRyYWNrMT48UFBTRVFUcmFjazE+MDAwMDAwMDA4MDAwMDA8L1BQU0VRVHJhY2sxPjxQQ1ZDM1RyYWNrMj4wMEUwPC9QQ1ZDM1RyYWNrMj48UFVOQVRDVHJhY2syPjBGMUU8L1BVTkFUQ1RyYWNrMj48TnVuVHJhY2syPjA0PC9OdW5UcmFjazI+PFBQU0VRVHJhY2syPjEwMDA8L1BQU0VRVHJhY2syPjxDdmMzQWxnb0lkPjE8L0N2YzNBbGdvSWQ+PEhpZ2hlc3RBVEM+MDAxMDA8L0hpZ2hlc3RBVEM+PExvd2VzdEFUQz4wMDA1MDwvTG93ZXN0QVRDPjwvSU1LY3ZjM1h0cmFEYXRhPjwvbnMxOktleUZpbGVSZXF1ZXN0Pg=="
  }
 },
 "MDESGenerateKeyStatusReq": {
  "type": "object",
  "required": [
   "requestId"
  ],
  "properties": {
   "requestId": {
    "type": "string",
    "description": "Request ID to check status of."
   }
  },
  "example": {
   "requestId": "1418659162408:cas0stl1:37952:i3kppbil:10435"
  }
 },
 "type": "object",
 "properties": {
  "requestId": {
   "type": "string",
   "description": "Request ID which can be used to track the status of the request."
  },
  "status": {
   "$ref": "#/components/schemas/KeySetStatusTypes"
  }
 },
 "example": {
  "requestId": "1418659162408:cas0stl1:37952:i3kppbil:10435",
  "status": "Submitted"
 },
 "MDESKeySetStatus": {
  "type": "object",
  "allOf": [
   {
    "$ref": "#/components/schemas/MDESKeySet"
   }
  ],
  "properties": {
   "messages": {
    "type": "string",
    "description": "Messages associated with the request."
   }
  },
  "example": {
   "requestId": "1418659162408:cas0stl1:37952:i3kppbil:10435",
   "status": "Submitted",
   "messages": null
  }
 },
 "GetCertChain": {
  "type": "object",
  "required": [
   "alias"
  ],
  "properties": {
   "alias": {
    "type": "string",
    "description": "Certificate alias to get chain for."
   }
  },
  "example": {
   "alias": "mtf-mtp-pilot-ecc-256-20140818-1"
  }
 },
 "GetCertChainRes": {
  "type": "object",
  "allOf": [
   {
    "$ref": "#/components/schemas/CertChain"
   }
  ],
  "properties": {
   "requestId": {
    "type": "string",
    "description": "Request ID which can be used to track the status of the request."
   }
  },
  "example": {
   "chain": {
    "kty": "EC",
    "use": "sig",
    "kid": "mtf-mtp-pilot-ecc-256-20140818-1",
    "x5c": [
     "MIID/DCCAeSgAwIBAgIRAI8w7xg5Di08h0yX2gWTwsYwDQYJKoZIhvcNAQELBQAwgYcxCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRNYXN0ZXJDYXJkIFdvcmxkd2lkZTEkMCIGA1UECxMbR2xvYmFsIEluZm9ybWF0aW9uIFNlY3VyaXR5MTMwMQYDVQQDEypNYXN0ZXJDYXJkIFBSRCBNb2JpbGUgQVBJIEVuY3J5cHRpb24gQ0EgRzEwHhcNMTQwODE5MTUyNTU3WhcNMTYwODE5MTUyNTU4WjBUMQswCQYDVQQGEwJVUzEdMBsGA1UEChMUTWFzdGVyQ2FyZCBXb3JsZFdpZGUxEzARBgNVBAsTCk1hc3RlclBhc3MxETAPBgNVBAMTCENpdHliYW5rMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE+RA5G2qTKJk5j1qh36LrFmKXX0fUq0dUde0K8SLLfj58twwtd0GkRWHmavcEq/xe2/20IWoVf7KI/rrIIgWLWaNgMF4wHwYDVR0jBBgwFoAU0hDoqma0nCrEcZcPu0Cwec49EkAwDAYDVR0TAQH/BAIwADAOBgNVHQ8BAf8EBAMCB4AwHQYDVR0OBBYEFNOnXfevGJr7XQ+IBNOBNAZDodEmMA0GCSqGSIb3DQEBCwUAA4ICAQDTbS/xR+d0SV7zdYhHliPnmV9WD1NC6MrR7eex2fG0eqaNBnFucaP1K25IBZoTZ9Yu/1P8x2MRxU18YvOEIwXGtWgU5vCj23NHjBgRfG3E1NjsJ34lAh2INQ/d0mkjW3DXIw8wFJ//aaDY9ZWMw122p0sxEEh8bvEu9k5dzyrxVstttWAltIIEvZM1eUS7m8fBENMPwcPHH92Ybh3HSZXvN7kOaICX8WZo4RUdxZvhXAnoLU3qhbME55b0LF6NpEwTjW2QJZFz8qMRKPZhdaorHEK1SGFasJFRuWyVbesAvvB8cP552hOMDLHkCjl+kYXW6cqyqe0HgQFuYdprHeSGyH0ZPRjHrRYX+eUbzPhH9czIgLSiZRRSH+ZFcLZFx8eWS+pTs+pMpziASoovrgB4oPySBFm1hwWAsDd13SqAyioFsCjB8xyxCgKreVTcsJG4fKMunxEG2vGM8O00TognhvQ77J4xu/jVOSLjXdv3onXuI5lkugabuxZ7qxDvmK0SBiWBS5Of/lT/mlWFmg/GsBLiahdzFobkOilWb9uqYXY2DZfvD2pGEbnlnfQWsyXOuXRr4+1v1AVs5ZcAmY2hEoDknzRC7/d4PWjxXQP3j9TdtpO0kJSzEoVM1CAPhKe7hFkvmghcaWGTUlDIqeC5pIyVQRMMW2s5j0MjwVGhwA==",
     "MIIGADCCA+igAwIBAgIQRHvDEU1M4UAGFfchcDdcFTANBgkqhkiG9w0BAQsFADCBhzELMAkGA1UEBhMCVVMxHTAbBgNVBAoTFE1hc3RlckNhcmQgV29ybGR3aWRlMSQwIgYDVQQLExtHbG9iYWwgSW5mb3JtYXRpb24gU2VjdXJpdHkxMzAxBgNVBAMTKk1hc3RlckNhcmQgUFJEIE1vYmlsZSBBUEkgRW5jcnlwdGlvbiBDQSBHMTAeFw0xNDA4MTkxMjExNDRaFw0yNDA4MTkxMjExNDVaMIGHMQswCQYDVQQGEwJVUzEdMBsGA1UEChMUTWFzdGVyQ2FyZCBXb3JsZHdpZGUxJDAiBgNVBAsTG0dsb2JhbCBJbmZvcm1hdGlvbiBTZWN1cml0eTEzMDEGA1UEAxMqTWFzdGVyQ2FyZCBQUkQgTW9iaWxlIEFQSSBFbmNyeXB0aW9uIENBIEcxMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA3hfXK0pHbEamO2HOj3usJYQZI4wKwYlawB+7iIOWwiIFeBNurfFcKdszaj26WDi5d9nFudobVHjcEr5hE5ave7eSGH89DtYY/pg4WDc184ZoFmTI8cKlrOnOCSTpt9sbfRy7vl+n6dSbo5eK1De5HqqIZpJ+KW+F/Qo7OUdiFk+pg8dk+F5TTbAaVq73oCU69XkWTo2F6/CcRCMyVEIRofWHhKdOzy0iPdqXdeJl8LH+xBl+lgbRtP8+BRGr/5RCeo95RMtrBKxaxZsM4+g9ANDPUWkEGENJ2AwSm/7X2ffRNc3G2RyJTFdE78vot2Csk+IL/IDYypqFHdurIaH0PeeMhOuCbU0rEtfd3sfRl2ofox0Ndp7NjbyHHtyWJLtd7WqQvgsCGtSmTpBU9++5cVtADTTMsFThAPWrVPlO2cNmyXNUqp+ji0UJIv5xIbroONmVJ0DO1bfYzWiCQS7kQ1LGQWt4cJl9Llr7WyqEoRQnBVT/Rl432XVN/tDbU5G02u/a72rMXxjRqyY/zHpeggi3fu2c4AU3SjXBjABNR0eu591gkk8SiSK7FZtzVzdknEZqp3/QY2v/ZLD0kvMnDUungJjQeJPlU6eMEmro73KDHfXxxjXhAbO8gNh3XopFPiGVpyzL79jrjDa8Y4k1cKDhdqv98TjgTry6zA32NYcCAwEAAaNmMGQwDgYDVR0PAQH/BAQDAgGGMBIGA1UdEwEB/wQIMAYBAf8CAQAwHQYDVR0OBBYEFNIQ6KpmtJwqxHGXD7tAsHnOPRJAMB8GA1UdIwQYMBaAFNIQ6KpmtJwqxHGXD7tAsHnOPRJAMA0GCSqGSIb3DQEBCwUAA4ICAQCB+s2pVa7qAFpVaOreOSPOj2OvKO9xt4gW+mGEixWvyX6pgCcdupm1FORSeFGuPrY7u+SeB63QXjGsRsODc/g2PsXnPpDS6zHSYFnakDYaGeVXRxrK2duAjoPcd2cuomQ4jqtJqBcdev3CzOfzgtuuc6g5KUai18tmkkMamLQj1CUptxOtT5Ra3n3YUFVchni0xQYxNi+3B3Zgb7hMmezIk1SHNgqmN0Zo9iu6UQOQ7KGNr672eOtgtyNj7nZ8JgORxCs1zRWpHBitEKIJpHYZd+UI/H3QVgc6VeHQUe+2OlFkPYu3DU5hULXQ/vnAmhEDWxpENLS7LreTWwtb+0zcefpOzuwMKj8XWOCQGhbnrdT4Lba3KtAKrhCApb5/r1ossHcXLGb5w+TpO3qlemkDcAK/ZtgYY75C5KbB4jTTB+liX8rPuHKLV21K/eTW9trk5+Rz4RJv9Tgr88HV91PBcZROUxe2umNzMi9LiRrPaGRn2xvmSAXWBBZiAGTG0Arhq8Sgoq7sHvpOia+a/fpKN+F7Axm9B9dyJyrzNbcRKCcvKoAz+2NHLXW91hp5jzZ7Dv9cK+TspdM31jJEqAzkwBWVWceQ/mtV42jpoYry6wMwO2Cf974mQMtbUWMYpADrYvqKx+MEw1PHewU7XcpJG+kR6eP0o7E2l+pWZ93jtg=="
    ]
   },
   "requestId": "1418661651842:cas0stl1:37960:i3kppbi3:10407"
  }
 },
 "CertChain": {
  "type": "object",
  "description": "kty, use, kid, x5c. The x5c property is an array which contains the chain.",
  "properties": {
   "kty": {
    "type": "string"
   },
   "use": {
    "type": "string"
   },
   "kid": {
    "type": "string"
   },
   "x5c": {
    "type": "array",
    "description": "Array of X5C values used.",
    "items": {
     "type": "string"
    }
   }
  }
 },
 "KeySetStatusTypes": {
  "type": "string",
  "description": "Valid Key Set Status Types. Valid values are `Submitted`, `Invalid`, `In-Progress`, `Success`, and `Failure`."
 },
 "Mirror": {
  "type": "object",
  "required": [
   "message"
  ],
  "properties": {
   "message": {
    "type": "string",
    "description": "Message to be reflected back to the requestor."
   }
  },
  "example": {
   "message": "foo"
  }
 },
 "ServicesRes": {
  "type": "object",
  "properties": {
   "services": {
    "description": "Current available services.",
    "type": "array",
    "items": {
     "type": "string"
    }
   },
   "requestId": {
    "type": "string",
    "description": "The unique identifierr for this request."
   }
  },
  "example": {
   "services": [
    "/cert/ecc/generate-keypair-and-csr",
    "/cert/rsa/generate-keypair-and-csr",
    "/core/android-pay/verify-and-decrypt",
    "/core/apple-pay/verify-and-decrypt",
    "/core/decrypt/aes",
    "/core/decrypt/aes/advanced",
    "/core/decrypt/rsa/advanced",
    "/core/derive/ecdh1-aes-128-decrypt",
    "/core/derive/ecdh1-aes-128-encrypt",
    "/core/derive/ecdh1-aes-256-decrypt",
    "/core/derive/ecdh1-aes-256-encrypt",
    "/core/encrypt/aes",
    "/core/encrypt/aes/advanced",
    "/core/encrypt/rsa/advanced",
    "/core/generate/ecc",
    "/core/generate/rsa",
    "/core/generate/secret-key",
    "/core/hash/pan",
    "/core/hash/pbkdf2",
    "/core/hash/sha256",
    "/core/hash/sha512",
    "/core/random/bytes",
    "/core/sign/ecdsa-sha1",
    "/core/sign/ecdsa-sha256",
    "/core/sign/ecdsa-sha512",
    "/core/sign/hmac-sha256",
    "/core/sign/hmac-sha512",
    "/core/sign/rsa-sha1",
    "/core/sign/rsa-sha256",
    "/core/sign/rsa-sha512",
    "/core/verify/ecdsa-sha1",
    "/core/verify/ecdsa-sha256",
    "/core/verify/ecdsa-sha512",
    "/core/verify/hmac-sha256",
    "/core/verify/hmac-sha512",
    "/core/verify/rsa-sha1",
    "/core/verify/rsa-sha256",
    "/core/verify/rsa-sha512",
    "/core/wrapped-decrypt",
    "/core/wrapped-encrypt/aes-128",
    "/core/wrapped-encrypt/aes-256",
    "/gp/establish-secure-session-casd",
    "/gp/establish-secure-session-std",
    "/gp/prepare-perso-commands",
    "/gp/put-key-casd",
    "/gp/put-key-std",
    "/gp/secure-scripts",
    "/gp/verify-with-certificate",
    "/kms/generate-mdes-keyset",
    "/kms/get-certificate-chain",
    "/kms/mdes-keyset-status",
    "/public/mirror",
    "/public/services",
    "/see/cms/common",
    "/see/cms/mobile",
    "/see/cms/pan",
    "/see/generate-mac",
    "/self-service/info"
   ],
   "requestId": "1524082857137:C02VR11VHTD8:97305:jg5jk4o8:10000"
  }
 },
 "CMSComReq": {
  "type": "object",
  "required": [
   "requests"
  ],
  "properties": {
   "requests": {
    "$ref": "#/components/schemas/Requests"
   }
  },
  "example": {
   "requests": [
    {
     "path": "/see/cms/common/generate-random",
     "method": "POST",
     "batchRequestId": "0005",
     "payload": {
      "number": 32
     }
    },
    {
     "path": "/see/cms/common/encrypt/aes-ccm",
     "batchRequestId": "0002",
     "method": "POST",
     "payload": {
      "key": {
       "type": "AESKeyWrapped",
       "wrappingKeyId": "1f27882afffc3ddc15233e46c7414196303527f2",
       "wrappedKey": "80d2a5b08fa0ee51143b459e638106df",
       "mode": "ECB",
       "iv": "",
       "paddingMode": "CONDITIONAL"
      },
      "method": "CCM",
      "startingVariable": "1011121314151617",
      "paddingMode": "NONE",
      "dataA": "000102030405060708090a0b0c0d0e0f",
      "dataD1": "202122232425262728292a2b2c2d2e2f",
      "dataD2": "",
      "macLength": 6,
      "KEKL": null,
      "methodDec": "ECB",
      "ivdec": "",
      "paddingModeDec": "NONE"
     }
    },
    {
     "path": "/see/cms/common/decrypt/aes-ccm",
     "batchRequestId": "0003",
     "method": "POST",
     "payload": {
      "key": {
       "objectType": "AESKeyWrapped",
       "wrappingKeyId": "1f27882afffc3ddc15233e46c7414196303527f2",
       "wrappedKey": "80d2a5b08fa0ee51143b459e638106df",
       "mode": "ECB",
       "iv": "",
       "paddingMode": "CONDITIONAL"
      },
      "method": "CCM",
      "startingVariable": "1011121314151617",
      "paddingMode": "NONE",
      "dataA": "000102030405060708090a0b0c0d0e0f",
      "cipherText": "d2a1f0e051ea5f62081a7792073d593d",
      "MAC": "1fc64fbfaccd",
      "status": "Plain",
      "KEKL": null,
      "methodEnc": 0,
      "ivenc": "",
      "paddingModeEnc": "NONE"
     }
    },
    {
     "path": "/see/cms/common/translate",
     "batchRequestId": "0004",
     "method": "POST",
     "payload": {
      "asymKey": null,
      "inputKey": {
       "objectType": "TripleDESKeyId",
       "keyId": "27e948766ba0149c757dfa13b80bd7bb0111ea25"
      },
      "outputKey": {
       "objectType": "AESKeyId",
       "keyId": "1f27882afffc3ddc15233e46c7414196303527f2"
      },
      "methodIn": "",
      "IVIn": "",
      "paddingModeIn": "CONDITIONAL",
      "methodOut": "CTR",
      "IVOut": "e8c28971ec94a7353b6dfc4ad98b451c",
      "paddingModeOut": "CONDITIONAL",
      "dataIn": "47c166c9122b116f0f277fdefe654402"
     }
    },
    {
     "path": "/see/cms/common/translate",
     "batchRequestId": "Translate",
     "method": "POST",
     "payload": {
      "asymKey": {
       "objectType": "AsymmetricKeyId",
       "keyId": "c38a5e0c51664f3db0d5b5295226b7f85211a8d8"
      },
      "inputKey": null,
      "outputKey": {
       "objectType": "AESKeyId",
       "keyId": "1f27882afffc3ddc15233e46c7414196303527f2"
      },
      "methodIn": "",
      "IVIn": "",
      "paddingModeIn": "CONDITIONAL",
      "methodOut": "CTR",
      "IVOut": "e8c28971ec94a7353b6dfc4ad98b451c",
      "paddingModeOut": "CONDITIONAL",
      "dataIn": "4f6627f19e26af6c2bfe1463cc0f513593ac73b9321a5110ad3b21da47c8a316264ea2a7bc63a69b9163a12416932720a25c4c6e8b6db20f0aacdebd07afa60b3ee54104b3164bcb3f5ea9ceec284481f7151388f64d50e1364405288b2f9a5514ecf8589246d8ef975fb88d2ecc0ee54fea7ecbfb9c54d35fd2d2ce04d57085"
     }
    },
    {
     "path": "/see/cms/common/translate",
     "batchRequestId": "Translate",
     "method": "POST",
     "payload": {
      "asymKey": null,
      "inputKey": null,
      "outputKey": {
       "objectType": "AESKeyId",
       "keyId": "1f27882afffc3ddc15233e46c7414196303527f2"
      },
      "methodIn": "",
      "IVIn": "",
      "paddingModeIn": "CONDITIONAL",
      "methodOut": "CBC",
      "IVOut": "e8c28971ec94a7353b6dfc4ad98b451c",
      "paddingModeOut": "CONDITIONAL",
      "dataIn": "7472616e736c617465"
     }
    }
   ]
  }
 },
 "CMSComRes": {
  "type": "object",
  "properties": {
   "responses": {
    "$ref": "#/components/schemas/Responses"
   },
   "requestId": {
    "type": "string",
    "description": "Request ID which can be used to track the status of the request."
   }
  },
  "example": {
   "responses": [
    {
     "batchRequestId": "0005",
     "statusCode": 200,
     "path": "/see/cms/common/generate-random",
     "payload": {
      "data": "757CBB3A334AAC394139D880BEDADC1CD5DCAD3B56237E9F42494F88347F568B"
     }
    },
    {
     "batchRequestId": "0002",
     "statusCode": 200,
     "path": "/see/cms/common/encrypt/aes-ccm",
     "payload": {
      "cipherText": "D2A1F0E051EA5F62081A7792073D593D",
      "startingVariable": "1011121314151617",
      "MAC": "1FC64FBFACCD"
     }
    },
    {
     "batchRequestId": "0003",
     "statusCode": 200,
     "path": "/see/cms/common/decrypt/aes-ccm",
     "payload": {
      "data": "202122232425262728292A2B2C2D2E2F",
      "outcome": true
     }
    }
   ],
   "requestId": "1426627894226:localhost:12173:i76vzu1q:20520"
  }
 },
 "CMSMobReq": {
  "type": "object",
  "required": [
   "method",
   "iv",
   "kcvLen",
   "paddingMode",
   "kekl",
   "requests"
  ],
  "properties": {
   "method": {
    "type": "string",
    "description": "Method to use when encrypting data using KEK [CBC/ECB]."
   },
   "iv": {
    "type": "string",
    "description": "IV to use if method is CBC."
   },
   "kcvLen": {
    "type": "integer",
    "description": "Length of key check values."
   },
   "cmsmpaId": {
    "type": "string",
    "description": "A unique identifier associated to the mobile application of a user."
   },
   "paddingMode": {
    "type": "string",
    "description": "Type of padding mode to use while encrypting or decrypting. [CONDITIONAL/ALWAYS]"
   },
   "kekl": {
    "description": "A reference or a wrapped key [3DES or AES] to encrypt data elements generated in this call.",
    "allOf": [
     {
      "$ref": "#/components/schemas/Kek"
     }
    ]
   },
   "requests": {
    "$ref": "#/components/schemas/Requests"
   }
  },
  "example": {
   "kekl": {
    "kekType": "AESKeyId",
    "kekId": "ab0c5270fc5ce01487f197a681e2034f9f604824"
   },
   "method": "ECB",
   "iv": "",
   "paddingMode": "CONDITIONAL",
   "kcvLen": 5,
   "cmsmpaId": "0123456789ABCDEF0123456789ABCDEF",
   "requests": [
    {
     "path": "/see/cms/mobile/generate-master-keys",
     "batchRequestId": "001",
     "method": "POST",
     "payload": {}
    },
    {
     "path": "/see/cms/mobile/check-authentication-code",
     "method": "POST",
     "batchRequestId": "003",
     "payload": {
      "method": 0,
      "paddingMode": "CONDITIONAL",
      "cmsmpa_AUTH": "0123456789ABCDEF0123456789ABCDEF",
      "sessionDiversifier": "0123456789ABCDEF0123456789ABCDEF",
      "mpa_FGP": "0123456789ABCDEF0123456789ABCDEF"
     }
    }
   ]
  }
 },
 "CMSMobRes": {
  "type": "object",
  "properties": {
   "responses": {
    "$ref": "#/components/schemas/Responses"
   },
   "requestId": {
    "type": "string",
    "description": "Request ID which can be used to track the status of the request."
   }
  },
  "example": {
   "responses": [
    {
     "batchRequestId": "001",
     "statusCode": 200,
     "path": "/see/cms/mobile/generate-master-keys",
     "payload": {
      "mk_MAC": "70E3450C9782678F92C662D7099D2663",
      "kcv_MAC": "B266176439",
      "mk_CONF": "C4A70CB2D075D6086B36F62075460F39",
      "kcv_CONF": "0CF8A917CF",
      "mk_DEK": "5D2047ED5A702F084C7C1BC238DCC958",
      "kcv_DEK": "4BCB9CF97B"
     }
    },
    {
     "batchRequestId": "003",
     "statusCode": 500,
     "path": "/see/cms/mobile/check-authentication-code",
     "payload": {
      "statusCode": 500,
      "error": "Internal Server Error",
      "message": "Thales error code: SEE_INVALID_PARAMS"
     }
    }
   ],
   "requestId": "1522776423937:cas0stl2:8526:jfd00sca:22963"
  }
 },
 "CMSPanReq": {
  "type": "object",
  "description": "Array of objects for the batch of requests to perform. Each request object should contain batchRequestId, path, method, and payload.",
  "required": [
   "pan",
   "kcvLen",
   "psn",
   "kekt",
   "kekp",
   "kekl",
   "requests"
  ],
  "properties": {
   "pan": {
    "type": "string",
    "description": "16-19 digits PAN."
   },
   "psn": {
    "type": "integer",
    "description": "PAN sequence number with valid values between 00-99."
   },
   "kcvLen": {
    "type": "integer",
    "description": "Length of key check values."
   },
   "kekt": {
    "description": "A reference or a wrapped key [3DES or AES] to decrypt data elements.",
    "allOf": [
     {
      "$ref": "#/components/schemas/Kek"
     }
    ]
   },
   "kekp": {
    "description": "A reference or a wrapped key to encrypt PIN.",
    "allOf": [
     {
      "$ref": "#/components/schemas/Kek"
     }
    ]
   },
   "kekl": {
    "description": "A reference or a wrapped key [3DES or AES] to encrypt data elements generated in this call.",
    "allOf": [
     {
      "$ref": "#/components/schemas/Kek"
     }
    ]
   },
   "requests": {
    "$ref": "#/components/schemas/Requests"
   }
  },
  "example": {
   "pan": "5412751234567807",
   "psn": "00",
   "kcvLen": 3,
   "kekl": {
    "kekType": "AESKeyId",
    "kekId": "ab0c5270fc5ce01487f197a681e2034f9f604824"
   },
   "kekt": {
    "kekType": "AESKeyId",
    "kekId": "ab0c5270fc5ce01487f197a681e2034f9f604824"
   },
   "kekp": {
    "kekType": "AESKeyId",
    "kekId": "ab0c5270fc5ce01487f197a681e2034f9f604824"
   },
   "requests": [
    {
     "path": "/see/cms/pan/calculate-sk-and-suk",
     "batchRequestId": "001",
     "method": "POST",
     "payload": {
      "method": "",
      "paddingMode": "CONDITIONAL",
      "ATC": [
       "0123456789ABCDEF",
       "0123456789ABCDEF"
      ],
      "derivedKeyMD": {
       "objectType": "AESKeyWrapped",
       "wrappingKeyId": "1f27882afffc3ddc15233e46c7414196303527f2",
       "wrappedKey": "80d2a5b08fa0ee51143b459e638106df",
       "mode": "ECB",
       "iv": "",
       "paddingMode": "CONDITIONAL"
      },
      "kcv_MD": "0123456789ABCDEF0123456789ABCDEF",
      "derivedKeyUMD": {
       "objectType": "AESKeyWrapped",
       "wrappingKeyId": "1f27882afffc3ddc15233e46c7414196303527f2",
       "wrappedKey": "80d2a5b08fa0ee51143b459e638106df",
       "mode": "ECB",
       "iv": "",
       "paddingMode": "CONDITIONAL"
      },
      "kcv_UMD": "0123456789ABCDEF0123456789ABCDEF",
      "outputSKforSUK": "true",
      "methodPINXOR": "",
      "encMobilePIN": "0123456789ABCDEF0123456789ABCDEF"
     }
    },
    {
     "path": "/see/cms/pan/calculate-idn",
     "batchRequestId": "0002",
     "payload": {
      "method": "",
      "paddingMode": "CONDITIONAL",
      "ATC": [
       "0000"
      ],
      "derivedKey": {
       "objectType": "AESKeyWrapped",
       "wrappingKeyId": "14a76feb000aa1e3690872f08854afdb4238afbd",
       "wrappedKey": "925CB27926A440ADA8DC81E606DF4084",
       "mode": "ECB",
       "iv": "",
       "paddingMode": "CONDITIONAL"
      },
      "KCV": "CC36"
     },
     "method": "POST"
    }
   ]
  }
 },
 "CMSPanRes": {
  "type": "object",
  "properties": {
   "responses": {
    "$ref": "#/components/schemas/Responses"
   },
   "requestId": {
    "type": "string",
    "description": "Request ID which can be used to track the status of the request."
   }
  },
  "example": {
   "responses": [
    {
     "batchRequestId": "001",
     "statusCode": 500,
     "path": "/see/cms/pan/calculate-sk-and-suk",
     "payload": {
      "statusCode": 500,
      "error": "Internal Server Error",
      "message": "Thales error code: SEE_KEY_PARITY_INVALID"
     }
    },
    {
     "batchRequestId": "0002",
     "statusCode": 200,
     "path": "/see/cms/pan/calculate-idn",
     "payload": {
      "ATC": [
       "0000"
      ],
      "IDN": [
       "0AC415E6A863614CCC3670C00A7438B5"
      ]
     }
    }
   ],
   "requestId": "1426707433738:cas0stl1:39090:i7bu6p18:15045"
  }
 },
 "CMSGenMacReq": {
  "type": "object",
  "required": [
   "key1",
   "data"
  ],
  "properties": {
   "key1": {
    "type": "object",
    "description": "Object - also Supports wrappingkey"
   },
   "key2": {
    "type": "object",
    "description": "(optional)"
   },
   "data": {
    "type": "string"
   }
  },
  "example": {
   "key1": {
    "type": "TripleDESKeyId",
    "keyId": "ffbeb8bb451befebfc1dd4295a924fbeeab7e36c"
   },
   "key2": {
    "wrappingKeyId": "ffbeb8bb451befebfc1dd4295a924fbeeab7e36c",
    "wrappedKey": "cc2601b3fbd04883cc2601b3fbd048830aaf692aa13e0939",
    "mode": "ECB",
    "iv": "",
    "paddingMode": "EIGHTY_AND_ZEROS",
    "type": "TripleDESKeyWrapped"
   },
   "data": "001122334455667788aa"
  }
 },
 "CMSGenMacRes": {
  "type": "object",
  "properties": {
   "mac1": {
    "type": "string"
   },
   "mac2": {
    "type": "string",
    "description": "(if key2 is provided)"
   },
   "requestId": {
    "type": "string",
    "description": "Request ID which can be used to track the status of the request."
   }
  },
  "example": {
   "mac1": "JxgpN9EUYdc=",
   "mac2": "BBsqBxjBGHs=",
   "requestId": "1458251071594:C02NGHVUG3QC:64946:ilwt193m:10000"
  }
 },
 "CMSGenCryptogramReq": {
  "type": "object",
  "required": [
   "pan",
   "psn",
   "imk",
   "cmkDerivationMethod",
   "skDeriviationMethod",
   "atc",
   "transactionData"
  ],
  "properties": {
   "nameId": {
    "type": "string",
    "description": "Name identifying string value."
   },
   "pan": {
    "type": "string",
    "description": "Primary Account Number. Value is between ```16``` and ```19``` characters long."
   },
   "psn": {
    "type": "string",
    "description": "PAN Sequence Number. Value is between ```00``` and ```99```."
   },
   "imk": {
    "type": "object",
    "description": "Contains the properties necessary to derive the new Triple DES key.",
    "required": [
     "keyId",
     "objectType"
    ],
    "properties": {
     "keyId": {
      "type": "string",
      "description": "Key identifying string value."
     },
     "objectType": {
      "type": "string",
      "description": "Statically configured to always be ```TripleDESKeyId``` by ```MDES```."
     }
    }
   },
   "cmkDerivationMethod": {
    "type": "string",
    "description": "Method used to derive the card master key. Valid options",
    "enum": [
     "OPTION_A",
     "OPTION_B",
     "OPTION_C"
    ]
   },
   "skDeriviationMethod": {
    "type": "string",
    "description": "Method used to derive the card session key. Supported methods must include EMV Common Session Key (CSK) and optionally Mastercard Proprietary Method."
   },
   "atc": {
    "type": "string",
    "description": "The card ATC (2 byte value)."
   },
   "transactionData": {
    "type": "array",
    "items": {
     "$ref": "#/components/schemas/TransactionDataObj"
    }
   }
  },
  "example": {
   "pan": "5123456789012345",
   "psn": "00",
   "imk": {
    "objectType": "TripleDESKeyId",
    "keyId": "d3ea512b36a3e94f9c63c9c40a87c569e9d117b5"
   },
   "cmkDerivationMethod": "OPTION_A",
   "skDeriviationMethod": "EMV-CSK",
   "atc": "FFFF",
   "transactionData": [
    {
     "part1": "01234567890ABCDEF",
     "part2": "FEDCBA0987654321",
     "includeUN": true
    },
    {
     "part1": "1234567890ABCDEF04F93ED870FEDCBA0987654321",
     "part2": ""
    }
   ]
  }
 },
 "CMSGenDtdReq": {
  "type": "object",
  "required": [
   "pan",
   "psn",
   "imk",
   "cmkDerivationMethod",
   "skDeriviationMethod",
   "atc",
   "transactionData",
   "trackData"
  ],
  "properties": {
   "nameId": {
    "type": "string",
    "description": "Name identifying string value."
   },
   "pan": {
    "type": "string",
    "description": "Primary Account Number. Value is between ```16``` and ```19``` characters long."
   },
   "psn": {
    "type": "string",
    "description": "PAN Sequence Number. Value is between ```00``` and ```99```."
   },
   "imk": {
    "type": "object",
    "description": "Contains the properties necessary to derive the new Triple DES key.",
    "required": [
     "objectType"
    ],
    "properties": {
     "objectType": {
      "type": "string",
      "description": "Valid values are ```TripleDESKeyWrapped``` or ```TripleDESKeyId```."
     },
     "keyId": {
      "type": "string",
      "description": "Key identifying string value. Required when ```objectType``` is ```TripleDESKeyId```, forbidden otherwise."
     },
     "paddingMode": {
      "type": "string",
      "description": "Required when ```objectType``` is ```TripleDESKeyWrapped```, forbidden otherwise."
     },
     "iv": {
      "type": "string",
      "description": "Required when ```objectType``` is ```TripleDESKeyWrapped```, forbidden otherwise."
     },
     "mode": {
      "type": "string",
      "description": "Required when ```objectType``` is ```TripleDESKeyWrapped```, forbidden otherwise."
     },
     "wrappedKey": {
      "type": "string",
      "description": "Required when ```objectType``` is ```TripleDESKeyWrapped```, forbidden otherwise."
     },
     "wrappingKeyId": {
      "type": "string",
      "description": "Required when ```objectType``` is ```TripleDESKeyWrapped```, forbidden otherwise."
     }
    }
   },
   "cmkDerivationMethod": {
    "type": "string",
    "description": "Method used to derive the card master key. Valid options",
    "enum": [
     "OPTION_A",
     "OPTION_B"
    ]
   },
   "skDeriviationMethod": {
    "type": "string",
    "description": "Method used to derive the card session key. Supported methods must include EMV Common Session Key (CSK)."
   },
   "atc": {
    "type": "string",
    "description": "The card ATC (2 byte value)."
   },
   "transactionData": {
    "type": "string",
    "description": "The data to be encrypted. At least one of ```transactionData``` and ```trackData``` is required."
   },
   "trackData": {
    "type": "string",
    "description": "Full track data compliant with DTD specification. At least one of ```transactionData``` and ```trackData``` is required."
   }
  },
  "example": {
   "pan": "5238188000001020",
   "psn": "00",
   "imk": {
    "objectType": "TripleDESKeyId",
    "keyId": "d3ea512b36a3e94f9c63c9c40a87c569e9d117b5"
   },
   "cmkDerivationMethod": "OPTION_A",
   "skDeriviationMethod": "EMV-CSK",
   "atc": "0001",
   "transactionData": "000038380001",
   "trackData": "5238188000001020D20492010000000000000F"
  }
 },
 "CMSGenDtdRes": {
  "type": "object",
  "properties": {
   "requestId": {
    "type": "string",
    "description": "Request ID which can be used to track the status of the request."
   },
   "encryptedData": {
    "type": "string",
    "description": "The result of encryption of the transactionData"
   },
   "ivcvc3": {
    "type": "string",
    "description": "The calculated IVCVC3 value"
   }
  },
  "example": {
   "requestId": "1458251071594:C02NGHVUG3QC:64946:ilwt193m:10000",
   "encryptedData": "B6F47BB3FA71E74A",
   "ivcvc3": "191A"
  }
 },
 "CMSGenCryptogramRes": {
  "type": "object",
  "properties": {
   "nameId": {
    "type": "string",
    "description": "A copy of the value sent in the request header."
   },
   "returnCode": {
    "type": "string",
    "description": "Thales return code."
   },
   "responseData": {
    "type": "array",
    "items": {
     "$ref": "#/components/schemas/ResponseDataObj"
    }
   }
  },
  "example": {
   "nameId": "1582666955985:ahost:59148:k72f1eei:10000",
   "returnCode": "NO_ERROR",
   "responseData": [
    {
     "transactionCryptogram": "01234567890ABCDEF",
     "UN": "0F9D345E"
    },
    {
     "transactionCryptogram": "FFEEDDCCBBAA9988",
     "UN": ""
    }
   ]
  }
 },
 "TransactionDataObj": {
  "type": "object",
  "required": [
   "part1"
  ],
  "properties": {
   "part1": {
    "type": "string",
    "description": "The first part of the data to be signed during cryptogram calculation."
   },
   "part2": {
    "type": "string",
    "description": "The last part of the data to be signed during cryptogram calculation. May be empty."
   },
   "includeUN": {
    "type": "boolean",
    "description": "A boolean value (default is ```false``` if not included) for whether to include the UN in the data to be signed between Part 1 and Part 2 If set to true, the function must use a generated UN, however only one UN generated per function call, first occurrence could be used to trigger UN generation and any subsequent occurrence uses the same UN. UN is a ```4 byte``` binary value as per EMV Tag ```9F37```.\n"
   }
  }
 },
 "ResponseDataObj": {
  "type": "object",
  "properties": {
   "transactionCryptogram": {
    "type": "string",
    "description": "Cryptogram generated for each element of ```transactionData```."
   },
   "UN": {
    "type": "string",
    "description": "UN used for the cryptogram calculation or empty if ```includeUN``` is set to ```false```."
   }
  }
 },
 "Requests": {
  "type": "array",
  "description": "Array of objects for the batch of requests to perform. Each request object should contain batchRequestId, path, method, and payload.",
  "items": {
   "type": "object",
   "properties": {
    "batchRequestId": {
     "type": "string",
     "description": "ID pertaining to the batch request."
    },
    "method": {
     "type": "string",
     "description": "HTTP method used."
    },
    "path": {
     "type": "string",
     "description": "What endpoint the request originated from."
    },
    "payload": {
     "type": "object",
     "description": "Payload of the given request."
    }
   }
  }
 },
 "Responses": {
  "type": "array",
  "description": "Array of objects with results from each of the batched requests. Each object contains batchRequestId, path, statusCode, and payload. The statusCode indicates whether the sub-request was successful or not (200 is success, anything else is failure). The payload property will contain the response information for that specific request. In the case of an error, it will contain detailed information about that error.",
  "items": {
   "type": "object",
   "properties": {
    "batchRequestId": {
     "type": "string",
     "description": "ID pertaining to the batch request."
    },
    "statusCode": {
     "type": "integer",
     "description": "HTTP status code received."
    },
    "path": {
     "type": "string",
     "description": "What endpoint the request originated from."
    },
    "payload": {
     "type": "object",
     "description": "Payload of the given request."
    }
   }
  }
 },
 "SelfServiceRes": {
  "type": "object",
  "properties": {
   "dns": {
    "description": "The certificate DNs which are on-boarded for your client.",
    "type": "array",
    "items": {
     "type": "string"
    }
   },
   "defaults": {
    "type": "object",
    "description": "The default keys used for each type of operation when you omit optional aliases.",
    "properties": {
     "keys": {
      "$ref": "#/components/schemas/Keys"
     }
    }
   },
   "keys": {
    "$ref": "#/components/schemas/Keys"
   },
   "requestId": {
    "type": "string",
    "description": "Request ID which can be used to track the status of the request."
   }
  },
  "example": {
   "dns": [
    "cn=test"
   ],
   "defaults": {
    "keys": [
     {
      "operation": "encrypt/decrypt",
      "algorithm": "AES",
      "alias": "dev-test-aes-128-1"
     },
     {
      "operation": "encrypt/decrypt",
      "algorithm": "RSA",
      "alias": "dev-test-rsa-2048-1"
     },
     {
      "operation": "wrap/unwrap",
      "algorithm": "AES",
      "alias": "dev-test-aes-128-1"
     },
     {
      "operation": "sign/verify",
      "algorithm": "ECC",
      "alias": "dev-test-ecc-p256-1"
     },
     {
      "operation": "sign/verify",
      "algorithm": "RSA",
      "alias": "dev-test-rsa-2048-1"
     }
    ]
   },
   "keys": [
    {
     "alias": "dev-test-aes-128-1",
     "algorithm": "AES",
     "length": "128"
    },
    {
     "alias": "dev-test-aes-128-2",
     "algorithm": "AES",
     "length": "128"
    },
    {
     "alias": "dev-test-ecc-p256-1",
     "algorithm": "ECC",
     "length": "256"
    },
    {
     "alias": "dev-test-hmac-sha-256-1",
     "algorithm": "HMAC",
     "length": "256"
    },
    {
     "alias": "dev-test-rsa-2048-1",
     "algorithm": "RSA",
     "length": "2048"
    },
    {
     "alias": "dev-test-rsa-2048-2",
     "algorithm": "RSA",
     "length": "2048"
    },
    {
     "alias": "imported-ecc-p256-derivation",
     "algorithm": "ECC",
     "length": "256"
    },
    {
     "alias": "imported-ecc-p384-derivation",
     "algorithm": "ECC",
     "length": "256"
    },
    {
     "alias": "imported-ecc-p521-derivation",
     "algorithm": "ECC",
     "length": "256"
    },
    {
     "alias": "imported-rsa-2048",
     "algorithm": "RSA",
     "length": "2048"
    },
    {
     "alias": "root-ca-test",
     "algorithm": "RSA",
     "length": "2048"
    },
    {
     "alias": "verify-aes-128",
     "algorithm": "AES",
     "length": "128"
    },
    {
     "alias": "verify-aes-256",
     "algorithm": "AES",
     "length": "256"
    }
   ],
   "requestId": "1454694419295:C02KV14CFFT3:49185:ik9yt1r4:10000"
  }
 },
 "Keys": {
  "description": "The keys your client has access to.",
  "type": "array",
  "items": {
   "type": "object",
   "properties": {
    "operation": {
     "type": "string",
     "description": "The type of operation."
    },
    "algorithm": {
     "type": "string",
     "description": "Type of algorithm used."
    },
    "alias": {
     "type": "string",
     "description": "Alias assigned to that key."
    }
   }
  }
 },
 "GetSlotList": {
  "type": "object",
  "properties": {
   "slots": {
    "type": "array",
    "description": "A list of the available HSM slots."
   }
  },
  "example": {
   "slots": [
    1,
    2
   ]
  }
 },
 "CoreHashAlgo": {
  "type": "string",
  "description": "Valid algorithm types",
  "enum": [
   "sha256",
   "sha512"
  ]
 },
 "CoreSignAlgo": {
  "type": "string",
  "description": "Valid algorithm types",
  "enum": [
   "ecdsa-sha1",
   "ecdsa-sha256",
   "ecdsa-sha512",
   "rsa-sha1",
   "rsa-sha256",
   "rsa-sha512",
   "hmac-sha256",
   "hmac-sha512"
  ]
 },
 "CoreVerifyAlgo": {
  "type": "string",
  "enum": [
   "ecdsa-sha1",
   "ecdsa-sha256",
   "ecdsa-sha512",
   "rsa-sha1",
   "rsa-sha256",
   "rsa-sha512",
   "hmac-sha256",
   "hmac-sha512"
  ]
 },
 "CoreDerDecAESAlgo": {
  "type": "string",
  "description": "Valid algorithm types",
  "enum": [
   "ecdh1-aes-128-decrypt",
   "ecdh1-aes-256-decrypt"
  ]
 },
 "CoreDerEncAESAlgo": {
  "type": "string",
  "description": "Valid algorithm types",
  "enum": [
   "ecdh1-aes-128-encrypt",
   "ecdh1-aes-256-encrypt"
  ]
 },
 "WrappedEncDecAlgo": {
  "type": "string",
  "description": "Valid algorithm types",
  "enum": [
   "aes-128",
   "aes-256"
  ]
 }
}