version: 2.1

orbs:
  go: circleci/go@1.5.0

commands:
  prepare_golang:
    description: "Checkout, install all packages and handle cache"
    steps:
      - checkout
      - go/mod-download-cached
  prepare_docker:
    description: "Docker login"
    steps:
      - run:
          name: Docker login
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin $DOCKER_REGISTRY
            echo $DOCKER_PASS_2 | docker login -u $DOCKER_USER_2 --password-stdin $DOCKER_REGISTRY_2
  docker_build_dev:
    description: "Build Quorum Key Manager - dev mode"
    steps:
      - run:
          name: Build Quorum Key Manager
          command: >-
            DOCKER_BUILDKIT=1 docker build
            --label org.opencontainers.image.created=`date -u +"%Y-%m-%dT%H:%M:%SZ"`
            --label org.opencontainers.image.url="https://consensys.net"
            --label org.opencontainers.image.documentation="https://docs.quorum-key-manager.consensys.net/"
            --label org.opencontainers.image.source="${CIRCLE_REPOSITORY_URL}"
            --label org.opencontainers.image.version="branch"
            --label org.opencontainers.image.revision="${CIRCLE_SHA1:0:7}"
            --label org.opencontainers.image.vendor="ConsenSys Software Inc."
            --label org.opencontainers.image.licenses="BUSL-1.1"
            --label org.opencontainers.image.title="${CIRCLE_PROJECT_REPONAME}"
            --label org.opencontainers.image.description="A universal Key & Account Management solution for blockchain applications."
            -q
            --build-arg VERSION=debug
            -t ${DOCKER_REGISTRY_DEV_REPO}/quorum-key-manager:${CIRCLE_SHA1:0:7} .
  docker_build_prod:
    description: "Build Quorum Key Manager"
    steps:
      - run:
          name: Build Quorum Key Manager
          command: >-
            DOCKER_BUILDKIT=1 docker build
            --label org.opencontainers.image.created=`date -u +"%Y-%m-%dT%H:%M:%SZ"`
            --label org.opencontainers.image.url="https://consensys.net"
            --label org.opencontainers.image.documentation="https://docs.quorum-key-manager.consensys.net/"
            --label org.opencontainers.image.source="${CIRCLE_REPOSITORY_URL}"
            --label org.opencontainers.image.version="${CIRCLE_TAG}"
            --label org.opencontainers.image.revision="${CIRCLE_SHA1:0:7}"
            --label org.opencontainers.image.vendor="ConsenSys Software Inc."
            --label org.opencontainers.image.licenses="BUSL-1.1"
            --label org.opencontainers.image.title="${CIRCLE_PROJECT_REPONAME}"
            --label org.opencontainers.image.description="A universal Key & Account Management solution for blockchain applications."
            -q
            -t ${DOCKER_REGISTRY_REPO_2}/quorum-key-manager:${CIRCLE_TAG} .

  # potential remote environment values
  # - qa
  # - staging
  # potential remote namespace:
  # - staging-qkm-v21-1 (CIRCLE_TAG=v21.1.4)
  # - qa-qkm (CIRCLE_BRANCH=main)
  # - qa-qkm-v21-1 (CIRCLE_BRANCH=maintenance/v21.1)
  set_remote_environment_variables:
    description: "Set remote environment values"
    parameters:
      environment_values:
        type: string
        default: ""
      qkm_namespace:
        type: string
        default: ""
    steps:
      - when:
          condition: <<parameters.environment_values>>
          steps:
            - run:
                name: Set Environment Values
                command: echo 'export ENVIRONMENT_VALUES=<<parameters.environment_values>>' >> $BASH_ENV
      - unless:
          condition: <<parameters.environment_values>>
          steps:
            - run:
                name: Set Environment Values
                command: if [ "${CIRCLE_TAG}" ]; then echo 'export ENVIRONMENT_VALUES=staging' >> $BASH_ENV ; else echo 'export ENVIRONMENT_VALUES=qa' >> $BASH_ENV; fi
      - when:
          condition: <<parameters.qkm_namespace>>
          steps:
            - run:
                name: Set Quorum Key Manager Namespace
                command: echo 'export QKM_NAMESPACE=<<parameters.environment_values>>-qkm' >> $BASH_ENV

      - unless:
          condition: <<parameters.qkm_namespace>>
          steps:
            - run:
                name: Set Quorum Key Manager Namespace
                command: |
                  if [ "${CIRCLE_TAG}" ]; then echo 'export TAG=${CIRCLE_TAG%.*}' >> $BASH_ENV && echo 'export QKM_NAMESPACE=${ENVIRONMENT_VALUES}-qkm-${TAG//./-}' >> $BASH_ENV;
                  elif [ "${CIRCLE_BRANCH}" == "main" ]; then echo 'export QKM_NAMESPACE=${ENVIRONMENT_VALUES}-qkm' >> $BASH_ENV;
                  else echo 'export TAG=${CIRCLE_BRANCH#"maintenance/"}' >> $BASH_ENV && echo 'export QKM_NAMESPACE=${ENVIRONMENT_VALUES}-qkm-${TAG//./-}' >> $BASH_ENV;
                  fi

jobs:
  lint:
    executor:
      name: go/default
      tag: '1.16.8'
    steps:
      - prepare_golang
      - run:
          name: Check lints
          command: |
            make lint-tools
            make lint-ci

  gobuild:
    executor:
      name: go/default
      tag: '1.16.8'
    steps:
      - prepare_golang
      - run:
          name: Build
          command: make gobuild

  test:
    docker:
      - image: cimg/go:1.16.8
    steps:
      - prepare_golang
      - run:
          name: Run unit tests
          command: make run-coverage

  acceptance:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - run:
          name: Uninstall Go
          command: sudo rm -rvf /usr/local/go/
      - go/install:
          version: 1.16.8
      - prepare_golang
      - run:
          name: Acceptance tests
          command: make run-acceptance
          
  e2e:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: xlarge
    steps:
      - run:
          name: Uninstall Go
          command: sudo rm -rvf /usr/local/go/
      - go/install:
          version: 1.16.8
      - prepare_golang
      - run:
          name: e2e tests
          command: |
            set +e
            echo "$MANIFEST_B64" | base64 --decode > ./deps/config/manifests/manifest.yml
            make up
            echo "Wait 20 seconds for services to boot up correctly..."
            sleep 20
            make run-e2e

  push-dev-image:
    docker:
      - image: cimg/base:2020.01
    resource_class: large
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - prepare_docker
      - docker_build_dev
      - run:
          name: Deploy image in repository
          command: |
            docker push ${DOCKER_REGISTRY_DEV_REPO}/quorum-key-manager:${CIRCLE_SHA1:0:7}
            docker tag ${DOCKER_REGISTRY_DEV_REPO}/quorum-key-manager:${CIRCLE_SHA1:0:7} ${DOCKER_REGISTRY_REPO_2}/quorum-key-manager:develop
            docker push ${DOCKER_REGISTRY_REPO_2}/quorum-key-manager:develop

  release-tag:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - prepare_docker
      - docker_build_prod
      - run:
          name: Release tagged version
          command: |
            docker push ${DOCKER_REGISTRY_REPO_2}/quorum-key-manager:${CIRCLE_TAG}
            docker tag ${DOCKER_REGISTRY_REPO_2}/quorum-key-manager:${CIRCLE_TAG} ${DOCKER_REGISTRY_REPO_2}/quorum-key-manager:latest
            docker push ${DOCKER_REGISTRY_REPO_2}/quorum-key-manager:latest

  deploy-qa:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - set_remote_environment_variables
      - run:
          name: Deploy QA environment
          command: >-
            QKM_TAG=${CIRCLE_SHA1:0:7}
            QKM_REPOSITORY=${DOCKER_REGISTRY_DEV_REPO}/quorum-key-manager
            make deploy-remote-env

  deploy-staging:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - set_remote_environment_variables
      - run:
          name: Deploy staging environment
          command: >-
            QKM_TAG=${CIRCLE_TAG}
            QKM_REPOSITORY=${DOCKER_REGISTRY_REPO}/quorum-key-manager
            make deploy-remote-env

workflows:
  version: 2
  default:
    jobs:
      - lint:
          filters:
            tags:
              only: /^v.*/
            branches:
              only: /.*/
      - gobuild:
          filters:
            tags:
              only: /^v.*/
            branches:
              only: /.*/
      - test:
          filters:
            tags:
              only: /^v.*/
            branches:
              only: /.*/
      - acceptance:
          filters:
            tags:
              only: /^v.*/
            branches:
              only: /.*/
      - e2e:
          filters:
            tags:
              only: /^v.*/
            branches:
              only: main
          requires:
            - acceptance
            - test
            - gobuild
      - push-dev-image:
          filters:
            branches:
              only: main
            tags:
              only: /^v.*/
          requires:
            - e2e
#      - deploy-qa:
#          filters:
#            branches:
#              only: main
#          requires:
#            - push-dev-image
      - wait-for-approval:
          type: approval
          requires:
            - push-dev-image
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - release-tag:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - wait-for-approval
#      - deploy-staging:
#          filters:
#            tags:
#              only: /^v.*/
#            branches:
#              ignore: /.*/
#          requires:
#            - release-tag
