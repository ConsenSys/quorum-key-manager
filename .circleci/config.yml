version: 2.1

orbs:
  go: circleci/go@1.5.0
  codecov: codecov/codecov@3.2.2

commands:
  prepare_golang:
    description: "Checkout, install all packages and handle cache"
    steps:
      - checkout
      - go/mod-download-cached
  prepare_docker:
    description: "Docker login"
    steps:
      - run:
          name: Enable experimental Docker features
          command: export DOCKER_CLI_EXPERIMENTAL=enabled
      - run:
          name: Docker login
          command: |
            echo "Login in cloudsmith"
            echo $CLOUDSMITH_PASS_RW | docker login docker.consensys.net -u $CLOUDSMITH_USER_RW --password-stdin
            echo "Login in docker.io"
            echo $DOCKER_PASSWORD_RW | docker login docker.io -u $DOCKER_USER_RW --password-stdin
      - run:
          name: DCT signing setup
          command: |
            mkdir -p $HOME/.docker/trust/private
            echo $DCT_KEY | base64 --decode > $HOME/.docker/trust/private/$DCT_HASH.key
            chmod 600 $HOME/.docker/trust/private/$DCT_HASH.key
            docker trust key load $HOME/.docker/trust/private/$DCT_HASH.key --name opsquorum
  prepare_docker_buildx:
    description: "Docker buildx setup"
    parameters:
      qemu-user-static-version:
        default: 6.1.0-8
        description: The version of qemu-user-static to use.
        type: string
      version:
        default: 0.7.1
        description: The version of buildx to install.
        type: string
    steps:
      - run:
          name: Install Docker buildx
          command: |
            mkdir -p ~/.docker/cli-plugins
            wget "https://github.com/docker/buildx/releases/download/v<< parameters.version >>/buildx-v<< parameters.version >>.linux-amd64" -O ~/.docker/cli-plugins/docker-buildx
            chmod a+x ~/.docker/cli-plugins/docker-buildx
      - run:
          name: Start multiarch/qemu-user-static container
          command: |
            docker run --rm --privileged multiarch/qemu-user-static:<< parameters.qemu-user-static-version >> --reset -p yes
      - run:
          name: Create docker-multiarch builder
          command: |
            docker context create docker-multiarch
            DOCKER_CONTEXT=$(docker buildx create --use docker-multiarch --platform linux/amd64,linux/arm64)
            docker buildx inspect --builder ${DOCKER_CONTEXT} --bootstrap
            docker buildx use ${DOCKER_CONTEXT}
      - run:
          command: docker buildx install
          name: Initialize Docker buildx

  # potential remote environment values
  # - qa
  # - staging
  # potential remote namespace:
  # - staging-qkm-v21-1 (CIRCLE_TAG=v21.1.4)
  # - qa-qkm (CIRCLE_BRANCH=main)
  # - qa-qkm-v21-1 (CIRCLE_BRANCH=maintenance/v21.1)
  set_remote_environment_variables:
    description: "Set remote environment values"
    parameters:
      environment_values:
        type: string
        default: ""
      qkm_namespace:
        type: string
        default: ""
    steps:
      - when:
          condition: <<parameters.environment_values>>
          steps:
            - run:
                name: Set Environment Values
                command: echo 'export ENVIRONMENT_VALUES=<<parameters.environment_values>>' >> $BASH_ENV
      - unless:
          condition: <<parameters.environment_values>>
          steps:
            - run:
                name: Set Environment Values
                command: if [ "${CIRCLE_TAG}" ]; then echo 'export ENVIRONMENT_VALUES=staging' >> $BASH_ENV ; else echo 'export ENVIRONMENT_VALUES=qa' >> $BASH_ENV; fi
      - when:
          condition: <<parameters.qkm_namespace>>
          steps:
            - run:
                name: Set Quorum Key Manager Namespace
                command: echo 'export QKM_NAMESPACE=<<parameters.environment_values>>-qkm' >> $BASH_ENV

      - unless:
          condition: <<parameters.qkm_namespace>>
          steps:
            - run:
                name: Set Quorum Key Manager Namespace
                command: |
                  if [ "${CIRCLE_TAG}" ]; then echo 'export TAG=${CIRCLE_TAG%.*}' >> $BASH_ENV && echo 'export QKM_NAMESPACE=${ENVIRONMENT_VALUES}-qkm-${TAG//./-}' >> $BASH_ENV;
                  elif [ "${CIRCLE_BRANCH}" == "main" ]; then echo 'export QKM_NAMESPACE=${ENVIRONMENT_VALUES}-qkm' >> $BASH_ENV;
                  else echo 'export TAG=${CIRCLE_BRANCH#"maintenance/"}' >> $BASH_ENV && echo 'export QKM_NAMESPACE=${ENVIRONMENT_VALUES}-qkm-${TAG//./-}' >> $BASH_ENV;
                  fi

jobs:
  lint:
    executor:
      name: go/default
      tag: '1.16.8'
    steps:
      - prepare_golang
      - run:
          name: Check lints
          command: |
            make lint-tools
            make lint-ci

  gobuild:
    executor:
      name: go/default
      tag: '1.16.8'
    steps:
      - prepare_golang
      - run:
          name: Build
          command: make gobuild

  test:
    docker:
      - image: cimg/go:1.16.8
    steps:
      - prepare_golang
      - run:
          name: Run unit tests
          command: make run-coverage-unit
      - codecov/upload:
          file: ./build/coverage/unit.out
          flags: unittests
      - store_artifacts:
          path: ./build/coverage/unit.html
          destination: unit-coverage.html

  acceptance:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - run:
          name: Uninstall Go
          command: sudo rm -rvf /usr/local/go/
      - go/install:
          version: 1.16.8
      - prepare_golang
      - run:
          name: Acceptance tests
          command: make run-coverage-acceptance
      - codecov/upload:
          file: ./build/coverage/acceptance.out
          flags: acceptance
      - store_artifacts:
          path: ./build/coverage/acceptance.html
          destination: acceptance-coverage.html
          
  e2e:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: xlarge
    steps:
      - run:
          name: Uninstall Go
          command: sudo rm -rvf /usr/local/go/
      - go/install:
          version: 1.16.8
      - prepare_golang
      - run:
          name: e2e tests
          command: |
            set +e
            echo "$MANIFEST_B64" | base64 --decode > ./deps/config/manifests/manifest.yml
            make up-tls
            echo "Wait 20 seconds for services to boot up correctly..."
            sleep 20
            make run-e2e
          
  build-docker-image:
    docker:
      - image: cimg/base:2021.12
    resource_class: xlarge
    parameters: # parameters are at the job level
      docker-image-platforms:
        type: string
        default: linux/amd64
      docker-distroless-version:
        type: string
        default: nonroot
      docker-image-registry:
        type: string
      docker-image-tag:
        type: string
      docker-image-sign:
        type: boolean
        default: false
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - prepare_docker
      - prepare_docker_buildx
      - run:
          name: Build, push and sign images
          no_output_timeout: 60m
          command: |
            export DOCKER_IMAGE_SIGN="<< parameters.docker-image-sign >>"
            export DOCKER_IMAGE_PLATFORMS="<< parameters.docker-image-platforms >>"
            export DOCKER_IMAGE_VERSION="<< parameters.docker-distroless-version >>"
            export DOCKER_IMAGE_REF="<< parameters.docker-image-registry >>/<< parameters.docker-image-tag >>"

            for PLATFORM in $DOCKER_IMAGE_PLATFORMS; do
              TARGETOS="$(echo "${PLATFORM}" | cut -d '/' -f 1)"
              TARGETARCH="$(echo "${PLATFORM}" | cut -d '/' -f 2)"

              if [ $TARGETOS != "linux" ]; then
                echo "Targeted OS not supported $TARGETOS"
                exit 1
              fi

              if [ $TARGETARCH == "amd64" ]; then
                DOCKER_IMAGE_TAG="${DOCKER_IMAGE_REF}"
              else
                DOCKER_IMAGE_TAG="${DOCKER_IMAGE_REF}.${TARGETARCH}"
              fi

              echo "Building image ${DOCKER_IMAGE_TAG} for {os:${TARGETOS}, arch:$TARGETARCH}..."
              DOCKER_BUILDKIT=1 docker build --build-arg VERSION=${DOCKER_IMAGE_VERSION} \
                --label org.opencontainers.image.created=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
                --label org.opencontainers.image.url="https://consensys.net" \
                --label org.opencontainers.image.documentation="https://docs.quorum-key-manager.consensys.net/" \
                --label org.opencontainers.image.source="${CIRCLE_REPOSITORY_URL}" \
                --label org.opencontainers.image.version="${CIRCLE_TAG-branch}" \
                --label org.opencontainers.image.revision="${CIRCLE_SHA1:0:7}" \
                --label org.opencontainers.image.vendor="ConsenSys Software Inc." \
                --label org.opencontainers.image.licenses="BUSL-1.1" \
                --label org.opencontainers.image.title="${CIRCLE_PROJECT_REPONAME}" \
                --label org.opencontainers.image.description="A universal Key & Account Management solution for blockchain applications." \
                --platform ${PLATFORM} \
                --push -t ${DOCKER_IMAGE_TAG} \
                -q \
                . 

                if [ $DOCKER_IMAGE_SIGN == "true" ]; then
                  echo "Waiting for few seconds for image to become available..."
                  sleep 10

                  echo "Pulling docker image ${DOCKER_IMAGE_TAG}..."
                  docker pull "${DOCKER_IMAGE_TAG}"

                  echo "Signing docker image ${DOCKER_IMAGE_TAG}..."
                  docker trust sign --local "${DOCKER_IMAGE_TAG}"

                  echo "Pushing docker image ${DOCKER_IMAGE_TAG}..."
                  docker push "${DOCKER_IMAGE_TAG}"
                fi
            done
            

  deploy-qa:
    docker:
      - image: cimg/base:2021.12
    steps:
      - checkout
      - set_remote_environment_variables
      - run:
          name: Deploy QA environment
          command: >-
            QKM_TAG=${CIRCLE_SHA1:0:7}
            QKM_REPOSITORY=${CLOUDSMITH_DEV_REPO}/quorum-key-manager
            make deploy-remote-env

  deploy-staging:
    docker:
      - image: cimg/base:2021.12
    steps:
      - checkout
      - set_remote_environment_variables
      - run:
          name: Deploy staging environment
          command: >-
            QKM_TAG=${CIRCLE_TAG}
            QKM_REPOSITORY=consensys/quorum-key-manager
            make deploy-remote-env

workflows:
  version: 2
  default:
    jobs:
      - lint:
          filters:
            tags:
              only: /^v.*/
            branches:
              only: /.*/
      - gobuild:
          filters:
            tags:
              only: /^v.*/
            branches:
              only: /.*/
      - test:
          filters:
            tags:
              only: /^v.*/
            branches:
              only: /.*/
      - acceptance:
          filters:
            tags:
              only: /^v.*/
            branches:
              only: /.*/
      - e2e:
          filters:
            tags:
              only: /^v.*/
            branches:
              only: main
          requires:
            - acceptance
            - test
            - gobuild
      - build-docker-image: # Push Dev image
          name: push-dev-image
          matrix:
            parameters:
              docker-image-tag: ["quorum-key-manager:${CIRCLE_SHA1:0:7}", "quorum-key-manager:develop"]
          context:
            - dockerhub-quorumengineering-rw
            - dockerhub-opsquorum-dct
            - cloudsmith-tanuki-rw
          docker-image-platforms: linux/amd64
          docker-distroless-version: debug-nonroot
          docker-image-registry: ${CLOUDSMITH_DEV_REPO}
          filters:
            branches:
              only: main
          requires:
            - e2e
#      - deploy-qa:
#          filters:
#            branches:
#              only: main
#          requires:
#            - push-dev-image
      - wait-for-approval:
          type: approval
          requires:
            - e2e
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build-docker-image: # Push prod image
          name: release-tag
          context:
            - dockerhub-quorumengineering-rw
            - dockerhub-opsquorum-dct
          matrix:
            parameters:
              docker-image-tag: ["quorum-key-manager:${CIRCLE_TAG}", "quorum-key-manager:latest"]
          docker-image-platforms: "linux/amd64 linux/arm64"
          docker-image-registry: consensys
          docker-image-sign: true
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - wait-for-approval
      - build-docker-image: # Push prod debug image
          name: release-debug-tag
          context:
            - dockerhub-quorumengineering-rw
            - dockerhub-opsquorum-dct
          docker-image-platforms: linux/amd64
          docker-distroless-version: debug-nonroot
          docker-image-tag: "quorum-key-manager:${CIRCLE_TAG}-debug"
          docker-image-registry: consensys
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - wait-for-approval
#      - deploy-staging:
#          filters:
#            tags:
#              only: /^v.*/
#            branches:
#              ignore: /.*/
#          requires:
#            - release-tag
