version: 2.1

orbs:
  go: circleci/go@1.5.0
  sonarcloud: sonarsource/sonarcloud@1.0.1
  aws-eks: circleci/aws-eks@2.0
  wait-for: cobli/wait-for@1.0.0

commands:
  prepare_golang:
    description: "Checkout, install all packages and handle cache"
    steps:
      - checkout
      - go/mod-download-cached
  prepare_docker:
    description: "Docker login"
    parameters:
      docker-image-registry:
        type: string
      docker-password:
        type: string
      docker-user:
        type: string
    steps:
      - run:
          name: Docker login
          command: |
            echo Login into << parameters.docker-image-registry >>
            echo << parameters.docker-password >> | docker login << parameters.docker-image-registry >> -u << parameters.docker-user >> --password-stdin
  prepare_docker_buildx:
    description: "Docker buildx setup"
    parameters:
      qemu-user-static-version:
        default: 6.1.0-8
        description: The version of qemu-user-static to use.
        type: string
      version:
        default: 0.7.1
        description: The version of buildx to install.
        type: string
    steps:
      - run:
          name: Install Docker buildx
          command: |
            mkdir -p ~/.docker/cli-plugins
            wget "https://github.com/docker/buildx/releases/download/v<< parameters.version >>/buildx-v<< parameters.version >>.linux-amd64" -O ~/.docker/cli-plugins/docker-buildx
            chmod a+x ~/.docker/cli-plugins/docker-buildx
      - run:
          name: Start multiarch/qemu-user-static container
          command: |
            docker run --rm --privileged multiarch/qemu-user-static:<< parameters.qemu-user-static-version >> --reset -p yes
      - run:
          name: Create docker-multiarch builder
          command: |
            docker context create docker-multiarch
            DOCKER_CONTEXT=$(docker buildx create --use docker-multiarch --platform linux/amd64,linux/arm64)
            docker buildx inspect --builder ${DOCKER_CONTEXT} --bootstrap
            docker buildx use ${DOCKER_CONTEXT}
      - run:
          command: docker buildx install
          name: Initialize Docker buildx

  # potential remote environment values
  # - qa
  # - staging
  # potential remote namespace:
  # - staging-qkm-v21-1 (CIRCLE_TAG=v21.1.4)
  # - qa-qkm (CIRCLE_BRANCH=main)
  # - qa-qkm-v21-1 (CIRCLE_BRANCH=maintenance/v21.1)
  set_remote_environment_variables:
    description: "Set remote environment values"
    parameters:
      environment_values:
        type: string
        default: ""
      qkm_namespace:
        type: string
        default: ""
      b64_manifests:
        type: string
        default: ""
    steps:
      - when:
          condition: <<parameters.environment_values>>
          steps:
            - run:
                name: Set Environment Values
                command: echo 'export ENVIRONMENT_VALUES=<<parameters.environment_values>>' >> $BASH_ENV
      - unless:
          condition: <<parameters.environment_values>>
          steps:
            - run:
                name: Set Environment Values
                command: if [ "${CIRCLE_TAG}" ]; then echo 'export ENVIRONMENT_VALUES=staging' >> $BASH_ENV ; else echo 'export ENVIRONMENT_VALUES=qa' >> $BASH_ENV; fi
      - when:
          condition: <<parameters.qkm_namespace>>
          steps:
            - run:
                name: Set Quorum Key Manager Namespace
                command: echo 'export QKM_NAMESPACE=<<parameters.environment_values>>-qkm' >> $BASH_ENV
            - run:
                name: Set Quorum Key Manager Health Endpoint
                command: echo 'export QKM_HEALTH_ENDPOINT=health-<<parameters.environment_values>>-qkm.ops.consensys.net' >> $BASH_ENV

      - unless:
          condition: <<parameters.qkm_namespace>>
          steps:
            - run:
                name: Set Quorum Key Manager Namespace
                command: |
                  if [ "${CIRCLE_TAG}" ]; then echo 'export TAG=${CIRCLE_TAG%.*}' >> $BASH_ENV && echo 'export QKM_NAMESPACE=${ENVIRONMENT_VALUES}-qkm-${TAG//./-}' >> $BASH_ENV;
                  elif [ "${CIRCLE_BRANCH}" == "main" ]; then echo 'export QKM_NAMESPACE=${ENVIRONMENT_VALUES}-qkm' >> $BASH_ENV;
                  else echo 'export TAG=${CIRCLE_BRANCH#"maintenance/"}' >> $BASH_ENV && echo 'export QKM_NAMESPACE=${ENVIRONMENT_VALUES}-qkm-${TAG//./-}' >> $BASH_ENV;
                  fi
                  echo 'export QKM_NAMESPACE=${ENVIRONMENT_VALUES}-qkm' >> $BASH_ENV
      - when:
          condition: <<parameters.b64_manifests>>
          steps:
            - run:
                name: Set B64 Manifests
                command: echo 'export B64_MANIFESTS=<<parameters.b64_manifests>>' >> $BASH_ENV
      - unless:
          condition: <<parameters.b64_manifests>>
          steps:
            - run:
                name: Set B64 Manifests default value
                command: echo 'export B64_MANIFESTS=$B64_MANIFESTS_DEFAULT' >> $BASH_ENV

# --------------------------
# Start of jobs definitions
# Jobs are defined hereafter
# Tasks executed within these jobs are for the most defined in the project MakeFile
jobs:
  # defines the linting env and tasks
  lint:
    executor:
      name: go/default
      tag: '1.16.8'
    steps:
      - prepare_golang
      - run:
          name: Check lints
          command: |
            make lint-tools
            make lint-ci

  # defines the building env
  gobuild:
    executor:
      name: go/default
      tag: '1.16.8'
    steps:
      - prepare_golang
      - run:
          name: Build
          command: make gobuild
  # defines units tests and code coverage environment
  test:
    docker:
      - image: cimg/go:1.16.8
    steps:
      - prepare_golang
      - run:
          name: Run unit tests
          command: make run-coverage-unit
      - store_artifacts:
          path: ./build/coverage/unit.html
          destination: unit-coverage.html
      - store_test_results:
          path: ./build/coverage/unit.out
      - persist_to_workspace:
          root: .
          paths:
            - ./build/coverage

  # defines units tests in race mode
  race:
    docker:
      - image: cimg/go:1.16.8
    steps:
      - prepare_golang
      - run:
          name: Run unit tests in race mode
          command: make run-race

  # defines acceptance tests and code coverage environment
  acceptance:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - run:
          name: Uninstall Go
          command: sudo rm -rvf /usr/local/go/
      - go/install:
          version: 1.16.8
      - prepare_golang
      - run:
          name: Acceptance tests
          command: make run-coverage-acceptance
      - store_artifacts:
          path: ./build/coverage/acceptance.html
          destination: acceptance-coverage.html
      - store_test_results:
          path: ./build/coverage/acceptance.out
      - persist_to_workspace:
          root: .
          paths:
            - ./build/coverage

  sonarscan:
    docker:
      - image: cimg/go:1.16.8
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: List coverage files
          command: ls -la ./build/coverage
      - sonarcloud/scan

  # defines end 2 end tests environment
  # Will spin up an appropriate environment and run the tests against it
  # Needs AWS authentication + kubectl tool
  # Attaches persisted CA + certs + keys in the workspace for Auth tests
  # Uses kubectl port forward to open up the remote qkm on the given k8s cluster + namespace
  e2e:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    parameters:
      test_data:
        type: string
        default: $QA_TEST_DATA
      client_key:
        type: string
        default: $QKM_CLIENT_KEY
      client_auth_cert:
        type: string
        default: $QKM_CLIENT_AUTH_CERT
      client_no_auth_key:
        type: string
        default: $QKM_CLIENT_NO_AUTH_KEY
      client_no_auth_cert:
        type: string
        default: $QKM_CLIENT_NO_AUTH_CERT
      cluster-name:
        type: string
        default: "orchestrate"
      namespace:
        type: string
        default: "qa-qkm"
      port-frowarding:
        default: $PORT_FORWARDING
        type: string
      health_url:
        default: "health-qa-qkm.ops.consensys.net"
        type: string

    steps:
      - run:
          name: Uninstall Go
          command: sudo rm -rvf /usr/local/go/
      - go/install:
          version: 1.16.8
      - prepare_golang
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - when:
          condition:
            equal: [ "true", "${<< parameters.port-frowarding >>}" ]
          steps:
            - run:
                name: Port forward
                background: true
                command: |
                  kubectl port-forward -n << parameters.namespace >> service/quorum-key-manager-quorumkeymanager 8080:8080 8081:8081&
      - wait-for/sh-command:
          seconds-between-retries: 3
          timeout: 30
          description: "Wait for deployment readiness"
          sh-command: nc -z << parameters.health_url >> 443
      - run:
          name: e2e tests
          command: |
            set +e
            echo << parameters.client_key >> | base64 --decode > ./tests/e2e/certificates/client.key
            echo << parameters.client_auth_cert >> | base64 --decode > ./tests/e2e/certificates/client.crt
            echo << parameters.client_no_auth_key >> | base64 --decode > ./tests/e2e/certificates/client_no_auth.key
            echo << parameters.client_no_auth_cert >> | base64 --decode > ./tests/e2e/certificates/client_no_auth.crt
            export TEST_DATA="<< parameters.test_data >>"
            make run-e2e

  # defines the docker image management process
  # Will iterate the targeted platforms then build, optionally sign and push images
  build-docker-image:
    docker:
      - image: cimg/base:2021.12
    resource_class: xlarge
    # parameters are set on the job level, see below
    parameters:
      docker-image-platforms:
        type: string
        default: linux/amd64
      docker-distroless-version:
        type: string
        default: nonroot
      docker-image-registry:
        type: string
      docker-password:
        type: string
      docker-user:
        type: string
      docker-image-tag:
        type: string
      docker-image-sign:
        type: boolean
        default: false
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - prepare_docker:
          docker-user: << parameters.docker-user >>
          docker-password: << parameters.docker-password >>
          docker-image-registry: << parameters.docker-image-registry >>
      - prepare_docker_buildx
      - run:
          name: Build, push and sign images
          no_output_timeout: 60m
          command: |
            export DOCKER_IMAGE_SIGN="<< parameters.docker-image-sign >>"
            export DOCKER_IMAGE_PLATFORMS="<< parameters.docker-image-platforms >>"
            export DOCKER_IMAGE_VERSION="<< parameters.docker-distroless-version >>"
            export DOCKER_IMAGE_REF="<< parameters.docker-image-registry >>/<< parameters.docker-image-tag >>"

            for PLATFORM in $DOCKER_IMAGE_PLATFORMS; do
              TARGETOS="$(echo "${PLATFORM}" | cut -d '/' -f 1)"
              TARGETARCH="$(echo "${PLATFORM}" | cut -d '/' -f 2)"

              if [ $TARGETOS != "linux" ]; then
                echo "Targeted OS not supported $TARGETOS"
                exit 1
              fi

              if [ $TARGETARCH == "amd64" ]; then
                DOCKER_IMAGE_TAG="${DOCKER_IMAGE_REF}"
              else
                DOCKER_IMAGE_TAG="${DOCKER_IMAGE_REF}.${TARGETARCH}"
              fi

              echo "Building image ${DOCKER_IMAGE_TAG} for {os:${TARGETOS}, arch:$TARGETARCH}..."
              DOCKER_BUILDKIT=1 docker build --build-arg VERSION=${DOCKER_IMAGE_VERSION} \
                --label org.opencontainers.image.created=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
                --label org.opencontainers.image.url="https://consensys.net" \
                --label org.opencontainers.image.documentation="https://docs.quorum-key-manager.consensys.net/" \
                --label org.opencontainers.image.source="${CIRCLE_REPOSITORY_URL}" \
                --label org.opencontainers.image.version="${CIRCLE_TAG-branch}" \
                --label org.opencontainers.image.revision="${CIRCLE_SHA1:0:7}" \
                --label org.opencontainers.image.vendor="ConsenSys Software Inc." \
                --label org.opencontainers.image.licenses="BUSL-1.1" \
                --label org.opencontainers.image.title="${CIRCLE_PROJECT_REPONAME}" \
                --label org.opencontainers.image.description="A universal Key & Account Management solution for blockchain applications." \
                --platform ${PLATFORM} \
                --push -t ${DOCKER_IMAGE_TAG} \
                -q \
                .

                if [ $DOCKER_IMAGE_SIGN == "true" ]; then
                  echo "Waiting for few seconds for image to become available..."
                  sleep 10

                  echo "Pulling docker image ${DOCKER_IMAGE_TAG}..."
                  docker pull "${DOCKER_IMAGE_TAG}"

                  echo "Signing docker image ${DOCKER_IMAGE_TAG}..."
                  docker trust sign --local "${DOCKER_IMAGE_TAG}"

                  echo "Pushing docker image ${DOCKER_IMAGE_TAG}..."
                  docker push "${DOCKER_IMAGE_TAG}"
                fi
            done

  build-docker-arm-image:
    machine:
      image: 'ubuntu-2004:202101-01'
    resource_class: arm.large
    parameters:
      docker-image-platform:
        type: string
        default: linux/arm64
      docker-distroless-version:
        type: string
        default: nonroot
      docker-image-registry:
        type: string
      docker-password:
        type: string
      docker-user:
        type: string
      docker-image-tag:
        type: string
    steps:
      - checkout
      - prepare_docker:
          docker-user: << parameters.docker-user >>
          docker-password: << parameters.docker-password >>
          docker-image-registry: << parameters.docker-image-registry >>
      - run:
          name: Build and push image
          no_output_timeout: 90m
          command: |
            export DOCKER_IMAGE_PLATFORM="<< parameters.docker-image-platform >>"
            export DOCKER_IMAGE_VERSION="<< parameters.docker-distroless-version >>"
            export DOCKER_IMAGE_REF="<< parameters.docker-image-registry >>/<< parameters.docker-image-tag >>"

            TARGETOS="$(echo "${DOCKER_IMAGE_PLATFORM}" | cut -d '/' -f 1)"
            TARGETARCH="$(echo "${DOCKER_IMAGE_PLATFORM}" | cut -d '/' -f 2)"

            DOCKER_IMAGE_TAG="${DOCKER_IMAGE_REF}.${TARGETARCH}"

            echo "Building image ${DOCKER_IMAGE_TAG} for {os:${TARGETOS}, arch:$TARGETARCH}..."
            docker build --build-arg VERSION=${DOCKER_IMAGE_VERSION} \
             --label org.opencontainers.image.created=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
             --label org.opencontainers.image.url="https://consensys.net/codefi/orchestrate/" \
             --label org.opencontainers.image.source="${CIRCLE_REPOSITORY_URL}" \
             --label org.opencontainers.image.version="${CIRCLE-TAG-branch}" \
             --label org.opencontainers.image.revision="${CIRCLE_SHA1:0:7}" \
             --label org.opencontainers.image.vendor="ConsenSys Software Inc." \
             --label org.opencontainers.image.title="${CIRCLE_PROJECT_REPONAME}" \
             --label org.opencontainers.image.description="Orchestrate is a blockchain Transaction Orchestration system" \
             --label org.opencontainers.image.documentation="https://docs.orchestrate.consensys.net/" \
             --label org.opencontainers.image.licenses="BUSL-1.1" \
             --platform ${DOCKER_IMAGE_PLATFORM} \
             --tag ${DOCKER_IMAGE_TAG} \
             .

            echo "Pushing image ${DOCKER_IMAGE_TAG} for {os:${TARGETOS}, arch:$TARGETARCH}..."
            docker push "${DOCKER_IMAGE_TAG}"

  # defines the deployment procedure
  # Will update the existing TLS secret of the QKM with fresh PKI data
  # Needs AWS authentication + kubectl tool
  # Persists CA + certs + keys in the workspace for e2e job tu use
  # Will fetch the `github/ConsenSys/quorum-key-manager-kubernetes` chart using the following
  # QKM_TAG=${CIRCLE_SHA1:0:7}
  # QKM_REPOSITORY=${CLOUDSMITH_DEV_REPO}/quorum-key-manager
  # REGISTRY_USERNAME, docker registry user
  # REGISTRY_PASSWORD, docker registry pw
  # see scripts/deploy-remote-env.sh for details
  deploy:
    docker:
      - image: cimg/base:2022.04
    parameters:
      cluster-name:
        type: string
        default: "orchestrate"
      qkm-namespace:
        type: string
        default: "qa-qkm"
      environment-values:
        type: string
        default: "qa"
      docker-image-tag:
        type: string
    steps:
      - checkout
      - set_remote_environment_variables
      - run:
          name: Deploy << parameters.qkm-namespace >> environment
          command: >-
            QKM_TAG="<< parameters.docker-image-tag >>"
            QKM_NAMESPACE="<< parameters.qkm-namespace >>"
            ENVIRONMENT_VALUES="<< parameters.environment-values >>"
            QKM_REPOSITORY=${CLOUDSMITH_DEV_REPO}/quorum-key-manager
            REGISTRY_USERNAME=${CLOUDSMITH_USER_RW}
            REGISTRY_PASSWORD=${CLOUDSMITH_PASS_RW}
            make deploy-remote-env

  tag-docker-image:
    docker:
      - image: cimg/base:2022.04
    resource_class: xlarge
    parameters:
      docker-image-platform:
        type: string
        default: linux/amd64
      docker-distroless-version:
        type: string
        default: nonroot
      docker-image-source-tag:
        type: string
      docker-image-destination-tag:
        type: string
      docker-image-source-registry:
        type: string
      docker-image-destination-registry:
        type: string
      docker-source-user:
        type: string
      docker-source-password:
        type: string
      docker-destination-user:
        type: string
      docker-destination-password:
        type: string
      docker-image-sign:
        type: boolean
        default: false
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - prepare_docker:
          docker-user: << parameters.docker-source-user >>
          docker-password: << parameters.docker-source-password >>
          docker-image-registry: << parameters.docker-image-source-registry >>
      - prepare_docker:
          docker-user: << parameters.docker-destination-user >>
          docker-password: << parameters.docker-destination-password >>
          docker-image-registry: << parameters.docker-image-destination-registry >>
      - prepare_docker_buildx
      - run:
          name: Build, push and sign images
          no_output_timeout: 90m
          command: |
            export DOCKER_IMAGE_SIGN="<< parameters.docker-image-sign >>"
            export DOCKER_IMAGE_PLATFORM="<< parameters.docker-image-platform >>"
            export DOCKER_IMAGE_VERSION="<< parameters.docker-distroless-version >>"
            export DOCKER_IMAGE_SOURCE_REF="<< parameters.docker-image-source-registry >>/<< parameters.docker-image-source-tag >>"
            export DOCKER_IMAGE_DESTINATION_REF="<< parameters.docker-image-destination-registry >>/<< parameters.docker-image-destination-tag >>"

            TARGETOS="$(echo "${DOCKER_IMAGE_PLATFORM}" | cut -d '/' -f 1)"
            TARGETARCH="$(echo "${DOCKER_IMAGE_PLATFORM}" | cut -d '/' -f 2)"

            if [ $TARGETOS != "linux" ]; then
              echo "Targeted OS not supported $TARGETOS"
              exit 1
            fi

            DOCKER_IMAGE_SOURCE_TAG="${DOCKER_IMAGE_SOURCE_REF}"

            if [ $TARGETARCH == "amd64" ]; then
              DOCKER_IMAGE_DESTINATION_TAG="${DOCKER_IMAGE_DESTINATION_REF}"
              DOCKER_IMAGE_SOURCE_TAG="${DOCKER_IMAGE_SOURCE_REF}"
            else
              DOCKER_IMAGE_DESTINATION_TAG="${DOCKER_IMAGE_SOURCE_REF}.${TARGETARCH}"
              DOCKER_IMAGE_SOURCE_TAG="${DOCKER_IMAGE_SOURCE_REF}.${TARGETARCH}"
            fi

            echo "Releasing image ${DOCKER_IMAGE_DESTINATION_TAG} for {os:${TARGETOS}, arch:$TARGETARCH}..."
            echo "Pulling docker image ${DOCKER_IMAGE_SOURCE_TAG}..."
            docker pull "${DOCKER_IMAGE_SOURCE_TAG}"

            if [ $DOCKER_IMAGE_SIGN == "true" ]; then
                mkdir -p $HOME/.docker/trust/private
                echo $DCT_KEY | base64 --decode > $HOME/.docker/trust/private/$DCT_HASH.key
                chmod 600 $HOME/.docker/trust/private/$DCT_HASH.key
                docker trust key load $HOME/.docker/trust/private/$DCT_HASH.key --name opsquorum

                echo "Waiting for few seconds for image to become available..."
                sleep 10

                echo "Signing docker image ${DOCKER_IMAGE_SOURCE_TAG}..."
                docker trust sign --local "${DOCKER_IMAGE_SOURCE_TAG}"
            fi

            echo "Tagging source image ${DOCKER_IMAGE_SOURCE_TAG} to destination registry ${DOCKER_IMAGE_DESTINATION_TAG}..."
            docker tag "${DOCKER_IMAGE_SOURCE_TAG}" "${DOCKER_IMAGE_DESTINATION_TAG}"

            echo "Pushing docker image ${DOCKER_IMAGE_DESTINATION_TAG}..."
            docker push "${DOCKER_IMAGE_DESTINATION_TAG}"

# --------------------------
# End of jobs definitions
# --------------------------

# --------------------------
# Start of workflows definitions
# --------------------------

workflows:
  version: 2
  default:
    jobs:
      # Will run appropriate linting locally for each `/^v.*/` git tag and each commit
      - lint:
          filters:
            tags:
              ignore:
                - /^v.*/
      # Will build locally for each `/^v.*/` git tag and each commit
      - gobuild:
          filters:
            tags:
              ignore:
                - /^v.*/
      # Will run the unit tests locally for each `/^v.*/` git tag and each commit
      - test:
          requires:
            - gobuild
            - lint
      # Will run the unit tests in race mode locally for each `/^v.*/` git tag and each commit
      - race:
          requires:
            - gobuild
            - lint
      # Will run the acceptance tests locally for each `/^v.*/` git tag and each commit
      - acceptance:
          requires:
            - gobuild
            - lint
      - sonarscan:
          filters:
            branches:
              only: /.*/
          requires:
            - test
            - acceptance
      # Will build and push a dev image for each main commit
      # Resulting image is tagged with ${CIRCLE_SHA1:0:7}
      # Images are compliant with linux/amd64 architecture
      - build-docker-image: # Push Dev image
          name: push-qkm-dev-image-${CIRCLE_SHA1:0:7}
          context:
            - dockerhub-quorumengineering-rw
            - dockerhub-opsquorum-dct
            - cloudsmith-tanuki-rw
          docker-image-tag: "quorum-key-manager:${CIRCLE_SHA1:0:7}"
          docker-image-platforms: linux/amd64
          docker-distroless-version: debug-nonroot
          docker-image-registry: ${CLOUDSMITH_DEV_REPO}
          docker-user: ${CLOUDSMITH_USER_RW}
          docker-password: ${CLOUDSMITH_PASS_RW}
          filters:
            branches:
              only: main
            tags:
              only: /^v.*/
      - build-docker-arm-image: # Push Dev arm image
          name: push-qkm-dev-arm-image-${CIRCLE_SHA1:0:7}
          context:
            - dockerhub-quorumengineering-rw
            - dockerhub-opsquorum-dct
            - cloudsmith-tanuki-rw
          docker-image-tag: "quorum-key-manager:${CIRCLE_SHA1:0:7}"
          docker-distroless-version: debug-nonroot
          docker-image-registry: ${CLOUDSMITH_DEV_REPO}
          docker-user: ${CLOUDSMITH_USER_RW}
          docker-password: ${CLOUDSMITH_PASS_RW}
          filters:
            branches:
              only: main
            tags:
              only: /^v.*/
      # triggers the qa env deployment when the main branch is hit
      # requires that a develop image has been successfully pushed
      - deploy:
          name: "deploy-qa"
          context:
            - cloudsmith-tanuki-rw
          qkm-namespace: "qa-qkm"
          environment-values: "qa"
          docker-image-tag: ${CIRCLE_SHA1:0:7}
          filters:
            branches:
              only: main
          requires:
            - push-qkm-dev-image-${CIRCLE_SHA1:0:7}
      # Will run the end 2 end tests locally for each `/^v.*/` git tag and every main commit
      # requires successful Build, Unit and acceptance tests
      - e2e:
          name: e2e-qa
          test_data: $QA_TEST_DATA
          client_key: $QKM_CLIENT_KEY
          client_auth_cert: $QKM_CLIENT_AUTH_CERT
          client_no_auth_key: $QKM_CLIENT_NO_AUTH_KEY
          client_no_auth_cert: $QKM_CLIENT_NO_AUTH_CERT
          requires:
            - deploy-qa
      # Will build and push a dev image for each main commit
      # Resulting image is tagged with develop
      # Images are compliant with linux/amd64 architecture
      - build-docker-image: # Push Dev image
          name: push-qkm-dev-image-develop
          context:
            - dockerhub-quorumengineering-rw
            - dockerhub-opsquorum-dct
            - cloudsmith-tanuki-rw
          docker-image-tag: "quorum-key-manager:develop"
          docker-image-platforms: linux/amd64
          docker-distroless-version: debug-nonroot
          docker-image-registry: ${CLOUDSMITH_DEV_REPO}
          docker-user: ${CLOUDSMITH_USER_RW}
          docker-password: ${CLOUDSMITH_PASS_RW}
          filters:
            branches:
              only: main
          requires:
            - e2e-qa

      # Is a pipeline blocker that requires a human decision and action
      - wait-for-approval:
          type: approval
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - push-qkm-dev-image-${CIRCLE_SHA1:0:7}
      # Will build and push a prod (NON debug) image for each `/^v.*/` git tag
      # Resulting image is tagged with both ${CIRCLE_TAG} and latest
      # Images are compliant with both linux/amd64 and linux/arm64 architectures
      # requires an approval

      # Will build and push a prod-debug image for each `/^v.*/` git tag
      # requires an approval
      - build-docker-image:
          name: release-debug-tag
          context:
            - dockerhub-quorumengineering-rw
            - dockerhub-opsquorum-dct
            - cloudsmith-tanuki-rw
          docker-image-platforms: linux/amd64
          docker-distroless-version: debug-nonroot
          docker-image-tag: "quorum-key-manager:${CIRCLE_TAG}-debug"
          docker-image-registry: consensys
          docker-user: ${CLOUDSMITH_USER_RW}
          docker-password: ${CLOUDSMITH_PASS_RW}
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - wait-for-approval
      # Will deploy the staging env
      # requires a successful release image (latest tag) pushed
      - deploy:
          name: "deploy-staging"
          context:
            - cloudsmith-tanuki-rw
          qkm-namespace: "staging-qkm"
          environment-values: "staging"
          docker-image-tag: ${CIRCLE_SHA1:0:7}
          requires:
            - push-qkm-dev-image-${CIRCLE_SHA1:0:7}
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      # Will run the end 2 end tests locally for each `/^v.*/` git tag and every main commit
      # requires successful deploy
      - e2e:
          name: e2e-staging
          test_data: $STAGING_TEST_DATA
          client_key: $QKM_CLIENT_KEY
          client_auth_cert: $QKM_CLIENT_AUTH_CERT
          client_no_auth_key: $QKM_CLIENT_NO_AUTH_KEY
          client_no_auth_cert: $QKM_CLIENT_NO_AUTH_CERT
          health_url: "health-staging-qkm.ops.consensys.net"
          filters:
            tags:
              only: /^v.*/
          requires:
            - deploy-staging

      # Tag prod image
      - tag-docker-image:
          name: release-<< matrix.docker-image-destination-tag >>-<< matrix.docker-image-platform >>
          context:
            - cloudsmith-tanuki-rw
            - dockerhub-opsquorum-dct
          matrix:
            parameters:
              docker-image-destination-tag: [ "quorum-key-manager:${CIRCLE_TAG}", "quorum-key-manager:latest" ]
              docker-image-platform: [ "linux/amd64", "linux/arm64" ]
          docker-image-source-tag: quorum-key-manager:${CIRCLE_SHA1:0:7}
          docker-image-source-registry: ${CLOUDSMITH_DEV_REPO}
          docker-image-destination-registry: consensys
          docker-source-user: ${CLOUDSMITH_USER_RW}
          docker-source-password: ${CLOUDSMITH_PASS_RW}
          docker-destination-user: ${DOCKER_USER_RW}
          docker-destination-password: ${DOCKER_PASSWORD_RW}
          docker-image-sign: true
          filters:
            tags:
              only: /^v.*/
            branches:
              only: main
          requires:
            - wait-for-approval
# --------------------------
# End of workflows definition definitions
# --------------------------
