version: 2.1

orbs:
  go: circleci/go@1.5.0
  sonarcloud: sonarsource/sonarcloud@1.0.1

commands:
  prepare_golang:
    description: "Checkout, install all packages and handle cache"
    steps:
      - checkout
      - go/mod-download-cached
  prepare_docker:
    description: "Docker login"
    steps:
      - run:
          name: Enable experimental Docker features
          command: export DOCKER_CLI_EXPERIMENTAL=enabled
      - run:
          name: Docker login
          command: |
            echo "Login in cloudsmith"
            echo $CLOUDSMITH_PASS_RW | docker login docker.consensys.net -u $CLOUDSMITH_USER_RW --password-stdin
            echo "Login in docker.io"
            echo $DOCKER_PASSWORD_RW | docker login docker.io -u $DOCKER_USER_RW --password-stdin
      - run:
          name: DCT signing setup
          command: |
            mkdir -p $HOME/.docker/trust/private
            echo $DCT_KEY | base64 --decode > $HOME/.docker/trust/private/$DCT_HASH.key
            chmod 600 $HOME/.docker/trust/private/$DCT_HASH.key
            docker trust key load $HOME/.docker/trust/private/$DCT_HASH.key --name opsquorum
  prepare_docker_buildx:
    description: "Docker buildx setup"
    parameters:
      qemu-user-static-version:
        default: 6.1.0-8
        description: The version of qemu-user-static to use.
        type: string
      version:
        default: 0.7.1
        description: The version of buildx to install.
        type: string
    steps:
      - run:
          name: Install Docker buildx
          command: |
            mkdir -p ~/.docker/cli-plugins
            wget "https://github.com/docker/buildx/releases/download/v<< parameters.version >>/buildx-v<< parameters.version >>.linux-amd64" -O ~/.docker/cli-plugins/docker-buildx
            chmod a+x ~/.docker/cli-plugins/docker-buildx
      - run:
          name: Start multiarch/qemu-user-static container
          command: |
            docker run --rm --privileged multiarch/qemu-user-static:<< parameters.qemu-user-static-version >> --reset -p yes
      - run:
          name: Create docker-multiarch builder
          command: |
            docker context create docker-multiarch
            DOCKER_CONTEXT=$(docker buildx create --use docker-multiarch --platform linux/amd64,linux/arm64)
            docker buildx inspect --builder ${DOCKER_CONTEXT} --bootstrap
            docker buildx use ${DOCKER_CONTEXT}
      - run:
          command: docker buildx install
          name: Initialize Docker buildx

  # potential remote environment values
  # - qa
  # - staging
  # potential remote namespace:
  # - staging-qkm-v21-1 (CIRCLE_TAG=v21.1.4)
  # - qa-qkm (CIRCLE_BRANCH=main)
  # - qa-qkm-v21-1 (CIRCLE_BRANCH=maintenance/v21.1)
  set_remote_environment_variables:
    description: "Set remote environment values"
    parameters:
      environment_values:
        type: string
        default: ""
      qkm_namespace:
        type: string
        default: ""
      b64_manifests:
        type: string
        default: ""
    steps:
      - when:
          condition: <<parameters.environment_values>>
          steps:
            - run:
                name: Set Environment Values
                command: echo 'export ENVIRONMENT_VALUES=<<parameters.environment_values>>' >> $BASH_ENV
      - unless:
          condition: <<parameters.environment_values>>
          steps:
            - run:
                name: Set Environment Values
                command: if [ "${CIRCLE_TAG}" ]; then echo 'export ENVIRONMENT_VALUES=staging' >> $BASH_ENV ; else echo 'export ENVIRONMENT_VALUES=qa' >> $BASH_ENV; fi
      - when:
          condition: <<parameters.qkm_namespace>>
          steps:
            - run:
                name: Set Quorum Key Manager Namespace
                command: echo 'export QKM_NAMESPACE=<<parameters.environment_values>>-qkm' >> $BASH_ENV

      - unless:
          condition: <<parameters.qkm_namespace>>
          steps:
            - run:
                name: Set Quorum Key Manager Namespace
                command: |
                  if [ "${CIRCLE_TAG}" ]; then echo 'export TAG=${CIRCLE_TAG%.*}' >> $BASH_ENV && echo 'export QKM_NAMESPACE=${ENVIRONMENT_VALUES}-qkm-${TAG//./-}' >> $BASH_ENV;
                  elif [ "${CIRCLE_BRANCH}" == "main" ]; then echo 'export QKM_NAMESPACE=${ENVIRONMENT_VALUES}-qkm' >> $BASH_ENV;
                  else echo 'export TAG=${CIRCLE_BRANCH#"maintenance/"}' >> $BASH_ENV && echo 'export QKM_NAMESPACE=${ENVIRONMENT_VALUES}-qkm-${TAG//./-}' >> $BASH_ENV;
                  fi
                  echo 'export QKM_NAMESPACE=${ENVIRONMENT_VALUES}-qkm' >> $BASH_ENV
      - when:
          condition: <<parameters.b64_manifests>>
          steps:
            - run:
                name: Set B64 Manifests
                command: echo 'export B64_MANIFESTS=<<parameters.b64_manifests>>' >> $BASH_ENV
      - unless:
          condition: <<parameters.b64_manifests>>
          steps:
            - run:
                name: Set B64 Manifests
                command: echo 'export B64_MANIFESTS=$B64_MANIFESTS_DEFAULT' >> $BASH_ENV

# --------------------------
# Start of jobs definitions
# Jobs are defined hereafter
# Tasks executed within these jobs are for the most defined in the project MakeFile
jobs:
  # defines the linting env and tasks
  lint:
    executor:
      name: go/default
      tag: '1.16.8'
    steps:
      - prepare_golang
      - run:
          name: Check lints
          command: |
            make lint-tools
            make lint-ci

  # defines the building env
  gobuild:
    executor:
      name: go/default
      tag: '1.16.8'
    steps:
      - prepare_golang
      - run:
          name: Build
          command: make gobuild
  # defines units tests and code coverage environment
  test:
    docker:
      - image: cimg/go:1.16.8
    steps:
      - prepare_golang
      - run:
          name: Run unit tests
          command: make run-coverage-unit
      - store_artifacts:
          path: ./build/coverage/unit.html
          destination: unit-coverage.html
      - store_test_results:
          path: ./build/coverage/unit.out
      - persist_to_workspace:
          root: .
          paths:
            - ./build/coverage
          
  # defines units tests in race mode
  race:
    docker:
      - image: cimg/go:1.16.8
    steps:
      - prepare_golang
      - run:
          name: Run unit tests in race mode
          command: make run-race
            
  # defines acceptance tests and code coverage environment
  acceptance:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - run:
          name: Uninstall Go
          command: sudo rm -rvf /usr/local/go/
      - go/install:
          version: 1.16.8
      - prepare_golang
      - run:
          name: Acceptance tests
          command: make run-coverage-acceptance
      - store_artifacts:
          path: ./build/coverage/acceptance.html
          destination: acceptance-coverage.html
      - store_test_results:
          path: ./build/coverage/acceptance.out
      - persist_to_workspace:
          root: .
          paths:
            - ./build/coverage

  sonarscan:
    docker:
      - image: cimg/go:1.16.8
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: List coverage files
          command: ls -la ./build/coverage
      - sonarcloud/scan

  # defines end 2 end tests environment
  # Will spin up an appropriate environment and run the tests against it
  e2e:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: xlarge
    steps:
      - run:
          name: Uninstall Go
          command: sudo rm -rvf /usr/local/go/
      - go/install:
          version: 1.16.8
      - prepare_golang
      - run:
          name: e2e tests
          command: |
            set +e
            echo "$MANIFEST_B64" | base64 --decode > ./deps/config/manifests/manifest.yml
            make deps-tls
            echo "Wait 10 seconds for dependencies to boot up correctly..."
            sleep 10
            make qkm
            echo "Wait 5 seconds for qkm to boot up correctly..."
            sleep 5
            make run-e2e

  # defines the docker image management process
  # Will iterate the targeted platforms then build, optionally sign and push images
  build-docker-image:
    docker:
      - image: cimg/base:2021.12
    resource_class: xlarge
    # parameters are set on the job level, see below
    parameters:
      docker-image-platforms:
        type: string
        default: linux/amd64
      docker-distroless-version:
        type: string
        default: nonroot
      docker-image-registry:
        type: string
      docker-image-tag:
        type: string
      docker-image-sign:
        type: boolean
        default: false
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - prepare_docker
      - prepare_docker_buildx
      - run:
          name: Build, push and sign images
          no_output_timeout: 60m
          command: |
            export DOCKER_IMAGE_SIGN="<< parameters.docker-image-sign >>"
            export DOCKER_IMAGE_PLATFORMS="<< parameters.docker-image-platforms >>"
            export DOCKER_IMAGE_VERSION="<< parameters.docker-distroless-version >>"
            export DOCKER_IMAGE_REF="<< parameters.docker-image-registry >>/<< parameters.docker-image-tag >>"

            for PLATFORM in $DOCKER_IMAGE_PLATFORMS; do
              TARGETOS="$(echo "${PLATFORM}" | cut -d '/' -f 1)"
              TARGETARCH="$(echo "${PLATFORM}" | cut -d '/' -f 2)"

              if [ $TARGETOS != "linux" ]; then
                echo "Targeted OS not supported $TARGETOS"
                exit 1
              fi

              if [ $TARGETARCH == "amd64" ]; then
                DOCKER_IMAGE_TAG="${DOCKER_IMAGE_REF}"
              else
                DOCKER_IMAGE_TAG="${DOCKER_IMAGE_REF}.${TARGETARCH}"
              fi

              echo "Building image ${DOCKER_IMAGE_TAG} for {os:${TARGETOS}, arch:$TARGETARCH}..."
              DOCKER_BUILDKIT=1 docker build --build-arg VERSION=${DOCKER_IMAGE_VERSION} \
                --label org.opencontainers.image.created=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
                --label org.opencontainers.image.url="https://consensys.net" \
                --label org.opencontainers.image.documentation="https://docs.quorum-key-manager.consensys.net/" \
                --label org.opencontainers.image.source="${CIRCLE_REPOSITORY_URL}" \
                --label org.opencontainers.image.version="${CIRCLE_TAG-branch}" \
                --label org.opencontainers.image.revision="${CIRCLE_SHA1:0:7}" \
                --label org.opencontainers.image.vendor="ConsenSys Software Inc." \
                --label org.opencontainers.image.licenses="BUSL-1.1" \
                --label org.opencontainers.image.title="${CIRCLE_PROJECT_REPONAME}" \
                --label org.opencontainers.image.description="A universal Key & Account Management solution for blockchain applications." \
                --platform ${PLATFORM} \
                --push -t ${DOCKER_IMAGE_TAG} \
                -q \
                .

                if [ $DOCKER_IMAGE_SIGN == "true" ]; then
                  echo "Waiting for few seconds for image to become available..."
                  sleep 10

                  echo "Pulling docker image ${DOCKER_IMAGE_TAG}..."
                  docker pull "${DOCKER_IMAGE_TAG}"

                  echo "Signing docker image ${DOCKER_IMAGE_TAG}..."
                  docker trust sign --local "${DOCKER_IMAGE_TAG}"

                  echo "Pushing docker image ${DOCKER_IMAGE_TAG}..."
                  docker push "${DOCKER_IMAGE_TAG}"
                fi
            done

  # defines the qa deployment
  # Will fetch the `github/ConsenSys/quorum-key-manager-kubernetes` chart using
  # QKM_TAG=${CIRCLE_SHA1:0:7}
  # QKM_REPOSITORY=${CLOUDSMITH_DEV_REPO}/quorum-key-manager
  # REGISTRY_USERNAME, docker registry user
  # REGISTRY_PASSWORD, docker registry pw
  # see scripts/deploy-remote-env.sh for details
  deploy-qa:
    docker:
      - image: cimg/base:2021.12
    steps:
      - checkout
      - set_remote_environment_variables
      - run:
          name: Deploy QA environment
          command: >-
            QKM_TAG=${CIRCLE_SHA1:0:7}
            QKM_REPOSITORY=${CLOUDSMITH_DEV_REPO}/quorum-key-manager
            REGISTRY_USERNAME=${CLOUDSMITH_USER_RW}
            REGISTRY_PASSWORD=${CLOUDSMITH_PASS_RW}
            make deploy-remote-env
  # deploy-staging:
  # defines the staging deployment
  # Will fetch the `github/ConsenSys/quorum-key-manager-kubernetes` chart using
  # QKM_TAG=${CIRCLE_TAG}
  # QKM_REPOSITORY=consensys/quorum-key-manager
  # see scripts/deploy-remote-env.sh for details
  deploy-staging:
    docker:
      - image: cimg/base:2021.12
    steps:
      - checkout
      - set_remote_environment_variables
      - run:
          name: Deploy staging environment
          command: >-
            QKM_TAG=${CIRCLE_TAG}
            QKM_REPOSITORY=consensys/quorum-key-manager
            make deploy-remote-env

# --------------------------
# End of jobs definitions
# --------------------------

# --------------------------
# Start of workflows definitions
# --------------------------

workflows:
  version: 2
  default:
    jobs:
      # Will run appropriate linting locally for each `/^v.*/` git tag and each commit
      - lint:
          filters:
            tags:
              only: /^v.*/
            branches:
              only: /.*/
      # Will build locally for each `/^v.*/` git tag and each commit
      - gobuild:
          filters:
            tags:
              only: /^v.*/
            branches:
              only: /.*/
      # Will run the unit tests locally for each `/^v.*/` git tag and each commit
      - test:
          filters:
            tags:
              only: /^v.*/
            branches:
              only: /.*/
      # Will run the unit tests in race mode locally for each `/^v.*/` git tag and each commit
      - race:
          filters:
            tags:
              only: /^v.*/
            branches:
              only: /.*/
      # Will run the acceptance tests locally for each `/^v.*/` git tag and each commit
      - acceptance:
          filters:
            tags:
              only: /^v.*/
            branches:
              only: /.*/
      - sonarscan:
          filters:
            tags:
              only: /^v.*/
            branches:
              only: /.*/
          requires:
            - test
            - acceptance
      # Will run the end 2 end tests locally for each `/^v.*/` git tag and every main commit
      # requires successful Build, Unit and acceptance tests
      - e2e:
          filters:
            tags:
              only: /^v.*/
            branches:
              only: main
          requires:
            - acceptance
            - test
            - race
            - gobuild
      # Will build and push a dev image for each main commit
      # Resulting image is tagged with both ${CIRCLE_SHA1:0:7} and develop
      # Images are compliant with linux/amd64 architecture
      - build-docker-image: # Push Dev image
          name: push-qkm-dev-image-<< matrix.docker-image-tag >>
          matrix:
            parameters:
              docker-image-tag: ["quorum-key-manager:${CIRCLE_SHA1:0:7}", "quorum-key-manager:develop"]
          context:
            - dockerhub-quorumengineering-rw
            - dockerhub-opsquorum-dct
            - cloudsmith-tanuki-rw
          docker-image-platforms: linux/amd64
          docker-distroless-version: debug-nonroot
          docker-image-registry: ${CLOUDSMITH_DEV_REPO}
          filters:
            branches:
              only: main
          requires:
            - e2e
      # triggers the qa env deployment when the main branch is hit
      # requires that a develop image has been successfully pushed
      - deploy-qa:
          context:
            - cloudsmith-tanuki-rw
          filters:
            branches:
              only: main
          requires:
            - push-qkm-dev-image-quorum-key-manager:develop
      # Is a pipeline blocker that requires a human decision and action
      - wait-for-approval:
          type: approval
          requires:
            - e2e
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      # Will build and push a prod (NON debug) image for each `/^v.*/` git tag
      # Resulting image is tagged with both ${CIRCLE_TAG} and latest
      # Images are compliant with both linux/amd64 and linux/arm64 architectures
      # requires an approval
      - build-docker-image: # Push prod image
          name: release-tag-<< matrix.docker-image-tag >>
          context:
            - dockerhub-quorumengineering-rw
            - dockerhub-opsquorum-dct
          matrix:
            parameters:
              docker-image-tag: ["quorum-key-manager:${CIRCLE_TAG}", "quorum-key-manager:latest"]
          docker-image-platforms: "linux/amd64 linux/arm64"
          docker-image-registry: consensys
          docker-image-sign: true
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - wait-for-approval
      # Will build and push a prod-debug image for each `/^v.*/` git tag
      # requires an approval
      - build-docker-image:
          name: release-debug-tag
          context:
            - dockerhub-quorumengineering-rw
            - dockerhub-opsquorum-dct
          docker-image-platforms: linux/amd64
          docker-distroless-version: debug-nonroot
          docker-image-tag: "quorum-key-manager:${CIRCLE_TAG}-debug"
          docker-image-registry: consensys
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - wait-for-approval
      # Will deploy the staging env
      # requires a successful release image (latest tag) pushed
      - deploy-staging:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - release-tag-quorum-key-manager:latest

# --------------------------
# End of workflows definition definitions
# --------------------------
